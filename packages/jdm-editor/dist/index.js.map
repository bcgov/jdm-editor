{"version":3,"file":"index.js","sources":["../src/components/decision-table/context/dt-dialog.context.tsx","../node_modules/fast-deep-equal/es6/react.js","../src/components/decision-table/context/dt-store.context.tsx","../src/helpers/components.ts","../src/helpers/compose-refs.ts","../src/components/autosize-text-area.tsx","../src/helpers/wasm.ts","../src/helpers/node-type.ts","../src/components/shared/diff-radio.tsx","../src/components/arrow-diff-icon.tsx","../src/components/shared/diff-switch.tsx","../src/components/shared/diff-input.tsx","../src/components/shared/diff-select.tsx","../src/components/shared/diff-ce.tsx","../src/components/shared/diff-text-area.tsx","../src/components/decision-graph/graph/tab-decision-table.tsx","../src/helpers/platform.ts","../src/helpers/use-persistent-state.ts","../src/components/stack.tsx","../src/components/spaced-text.tsx","../src/components/diff-icon.tsx","../src/components/decision-graph/nodes/graph-card.tsx","../src/components/decision-graph/nodes/specifications/colors.ts","../src/components/decision-graph/nodes/decision-node.tsx","../src/components/decision-graph/nodes/graph-node.tsx","../src/components/decision-graph/nodes/specifications/specification-types.ts","../src/components/decision-graph/nodes/specifications/decision-table.specification.tsx","../src/components/expression/context/expression-store.context.tsx","../src/components/expression/expression-controller.tsx","../src/components/expression/expression-item.tsx","../src/components/expression/expression-list.tsx","../src/components/expression/expression.tsx","../src/components/decision-graph/graph/tab-expression.tsx","../src/components/decision-graph/nodes/specifications/expression.specification.tsx","../node_modules/@types/big.js/index.d.ts?raw","../node_modules/dayjs/index.d.ts?raw","../src/components/function/helpers/default-function.js?raw","../src/components/function/helpers/global.d.ts?raw","../src/components/function/helpers/http.d.ts?raw","../src/components/function/helpers/zen.d.ts?raw","../src/components/function/helpers/zod.d.ts?raw","../src/components/function/helpers/libs.ts","../src/components/decision-graph/graph/tab-function.tsx","../src/components/decision-graph/nodes/specifications/function.specification.tsx","../src/helpers/utility.ts","../src/components/decision-graph/graph/json-to-json-schema-dialog.tsx","../src/components/decision-graph/graph/tab-json-schema.tsx","../src/components/decision-graph/nodes/specifications/input.specification.tsx","../src/components/decision-graph/nodes/specifications/output.specification.tsx","../src/components/decision-graph/nodes/specifications/switch.specification.tsx","../src/components/decision-graph/dg-diff-util.ts","../src/components/decision-graph/dg-types.ts","../src/components/decision-graph/dg-util.ts","../src/components/decision-graph/context/dg-store.context.tsx","../src/components/decision-graph/dg-empty.tsx","../src/helpers/traversal.ts","../src/components/decision-graph/nodes/specifications/specifications.tsx","../src/components/decision-graph/dg-infer.tsx","../src/components/decision-graph/dg-panel.tsx","../src/components/decision-graph/custom-edge.tsx","../src/components/decision-graph/hooks/use-graph-clipboard.ts","../src/components/decision-graph/graph/graph-components.tsx","../src/components/decision-graph/graph/graph.tsx","../src/helpers/file-helpers.ts","../src/helpers/excel-file-utils.ts","../src/components/decision-graph/graph/graph-side-toolbar.tsx","../src/components/decision-graph/graph/graph-tabs.tsx","../src/components/decision-graph/dg-wrapper.tsx","../src/components/decision-graph/dg.tsx","../src/components/decision-graph/nodes/custom-node/index.tsx","../src/helpers/monaco.ts","../src/components/decision-graph/simulator/simulator-editor.tsx","../src/components/decision-graph/simulator/simulator-request-panel.tsx","../src/components/decision-graph/simulator/dg-simulator.tsx","../src/components/code-editor/extensions/diagnostic.tsx","../src/helpers/codemirror.ts","../src/components/code-editor/extensions/linter.ts","../src/components/code-editor/extensions/zen.ts","../src/components/code-editor/extensions/types.ts","../src/components/code-editor/ce.tsx","../src/components/decision-table/dialog/field-add-dialog.tsx","../src/components/decision-table/dialog/field-update-dialog.tsx","../src/components/decision-table/dialog/fields-reorder-dialog.tsx","../src/components/decision-table/dialog/dt-dialogs.tsx","../src/components/decision-table/dt-command-bar.tsx","../src/components/decision-table/dt-empty.tsx","../src/components/decision-table/table/table-context-menu.tsx","../src/components/decision-table/table/table-default-cell.tsx","../src/components/decision-table/table/table-head-cell.tsx","../src/components/decision-table/table/table-head-row.tsx","../src/components/decision-table/table/table-row.tsx","../src/components/decision-table/table/table.tsx","../src/components/decision-table/dt.tsx","../src/assets/typescript.svg?inline","../src/components/function/function-debugger-log.tsx","../src/components/function/function-debugger.tsx","../src/components/function/helpers/determine-type.ts","../src/components/function/function.tsx","../src/theme.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport type { ColumnType, TableSchemaItem } from './dt-store.context';\n\nexport type TableDialogType = 'add' | 'reorder' | 'edit';\nexport type TableDialogState = {\n  type: TableDialogType;\n  item: TableSchemaItem | null;\n  columnType: ColumnType;\n};\n\nexport type TableDialogContextState = {\n  setDialog: React.Dispatch<React.SetStateAction<TableDialogState | undefined>>;\n  dialog: TableDialogState | undefined;\n  isDialogActive: (type: TableDialogType) => boolean;\n  getContainer?: () => HTMLElement;\n};\n\nexport const TableDialogContext = React.createContext<TableDialogContextState>({} as any);\n\nexport const DecisionTableDialogProvider: React.FC<\n  React.PropsWithChildren<{\n    getContainer?: () => HTMLElement;\n  }>\n> = ({ children, getContainer }) => {\n  const [dialog, setDialog] = useState<TableDialogState | undefined>(undefined);\n  const isDialogActive = (type: TableDialogType) => {\n    return dialog?.type === type;\n  };\n\n  return (\n    <TableDialogContext.Provider\n      value={{\n        dialog,\n        setDialog,\n        isDialogActive,\n        getContainer,\n      }}\n    >\n      {children}\n    </TableDialogContext.Provider>\n  );\n};\n\nexport const useDecisionTableDialog = () => React.useContext(TableDialogContext);\n","'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n  var envHasBigInt64Array = typeof BigInt64Array !== 'undefined';\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n    if ((a instanceof Map) && (b instanceof Map)) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries())\n        if (!b.has(i[0])) return false;\n      for (i of a.entries())\n        if (!equal(i[1], b.get(i[0]))) return false;\n      return true;\n    }\n\n    if ((a instanceof Set) && (b instanceof Set)) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries())\n        if (!b.has(i[0])) return false;\n      return true;\n    }\n\n    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (a[i] !== b[i]) return false;\n      return true;\n    }\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (key === '_owner' && a.$$typeof) {\n        // React-specific: avoid traversing React elements' _owner.\n        //  _owner contains circular references\n        // and is not needed when comparing the actual elements (and not their owners)\n        continue;\n      }\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","import type { VariableType } from '@gorules/zen-engine-wasm';\nimport equal from 'fast-deep-equal/es6/react';\nimport { produce } from 'immer';\nimport React, { useMemo } from 'react';\nimport type { StoreApi, UseBoundStore } from 'zustand';\nimport { create } from 'zustand';\n\nimport type { SchemaSelectProps } from '../../../helpers/components';\nimport type { Diff, DiffMetadata } from '../../decision-graph/dg-types';\nimport type { TableCellProps } from '../table/table-default-cell';\n\nexport type TableExportOptions = {\n  name: string;\n};\n\nexport type TableCursor = {\n  x: string;\n  y: number;\n};\n\nexport type TableSchemaItem = {\n  id: string;\n  name: string;\n  field?: string;\n  defaultValue?: string;\n  _diff?: DiffMetadata;\n};\n\nexport type HitPolicy = 'first' | 'collect';\nexport type ColumnType = 'inputs' | 'outputs';\n\nexport type DecisionTableType = {\n  hitPolicy: HitPolicy | string;\n  passThorough?: boolean;\n  inputField?: string;\n  outputPath?: string;\n  executionMode?: 'single' | 'loop';\n  inputs: TableSchemaItem[];\n  outputs: TableSchemaItem[];\n  rules: Record<string, string>[];\n} & Diff;\n\nconst cleanupTableRule = (\n  decisionTable: DecisionTableType,\n  rule: Record<string, string>,\n  defaultId?: string,\n): Record<string, string> => {\n  const schemaItems = [...decisionTable.inputs, ...decisionTable.outputs];\n  const newRule: Record<string, string> = {\n    _id: rule._id || crypto.randomUUID(),\n    _description: rule._description,\n  };\n  schemaItems.forEach((schemaItem) => {\n    if (defaultId && newRule._id === defaultId) {\n      return (newRule[schemaItem.id] = rule?.[schemaItem.id] || schemaItem?.defaultValue || '');\n    }\n    newRule[schemaItem.id] = rule?.[schemaItem.id] || '';\n  });\n  return newRule;\n};\n\nconst cleanupTableRules = (decisionTable: DecisionTableType, defaultId?: string): Record<string, string>[] => {\n  const rules = decisionTable?.rules || [];\n  const schemaItems = [...decisionTable.inputs, ...decisionTable.outputs];\n  return rules.map((rule) => {\n    const newRule: Record<string, string> = {\n      _id: rule._id || crypto.randomUUID(),\n      _description: rule._description,\n    };\n    schemaItems.forEach((schemaItem) => {\n      if (defaultId && newRule._id === defaultId) {\n        return (newRule[schemaItem.id] = rule?.[schemaItem.id] || schemaItem?.defaultValue || '');\n      }\n      newRule[schemaItem.id] = rule?.[schemaItem.id] || '';\n    });\n    return newRule;\n  });\n};\n\nexport const parseDecisionTable = (decisionTable?: DecisionTableType) => {\n  const dt: DecisionTableType = {\n    hitPolicy: decisionTable?.hitPolicy || 'first',\n    inputs: decisionTable?.inputs || [],\n    outputs: decisionTable?.outputs || [],\n    rules: decisionTable?.rules || [],\n    passThorough: decisionTable?.passThorough ?? false,\n    inputField: decisionTable?.inputField,\n    outputPath: decisionTable?.outputPath,\n    executionMode: decisionTable?.executionMode ?? 'single',\n    _diff: decisionTable?._diff,\n  };\n\n  if (dt.inputs?.length === 0) {\n    dt.inputs = [\n      {\n        id: crypto.randomUUID(),\n        name: 'Input',\n      },\n    ];\n  }\n\n  if (dt.outputs?.length === 0) {\n    dt.outputs = [\n      {\n        id: crypto.randomUUID(),\n        field: 'output',\n        name: 'Output',\n      },\n    ];\n  }\n\n  dt.rules.forEach((r) => {\n    if (typeof (r as Record<string, unknown>)._id === 'string' && r._id.length > 0) {\n      return;\n    }\n\n    r._id = crypto.randomUUID();\n  });\n\n  return dt;\n};\n\nexport type DecisionTableStoreType = {\n  state: {\n    id?: string;\n    name?: string;\n    decisionTable: DecisionTableType;\n    cursor: TableCursor | null;\n    activeRules: string[];\n\n    disabled: boolean;\n    configurable: boolean;\n    disableHitPolicy: boolean;\n\n    minColWidth: number;\n    colWidth: number;\n\n    inputData?: unknown;\n    inputVariableType?: VariableType;\n    derivedVariableTypes: Record<string, VariableType>;\n\n    inputsSchema?: SchemaSelectProps[];\n    outputsSchema?: SchemaSelectProps[];\n  };\n\n  actions: {\n    setDecisionTable: (val: DecisionTableType) => void;\n    setCursor: (cursor: TableCursor | null) => void;\n    commitData: (data: string, cursor: TableCursor) => void;\n    swapRows: (source: number, target: number) => void;\n    addRowAbove: (target?: number) => void;\n    addRowBelow: (target?: number) => void;\n    removeRow: (target?: number) => void;\n    addColumn: (type: ColumnType, column: TableSchemaItem) => void;\n    updateColumn: (type: ColumnType, id: string, column: TableSchemaItem) => void;\n    removeColumn: (type: ColumnType, id: string) => void;\n    reorderColumns: (type: ColumnType, columns: TableSchemaItem[]) => void;\n    updateHitPolicy: (hitPolicy: HitPolicy) => void;\n  };\n\n  listeners: {\n    onChange?: (val: DecisionTableType) => void;\n    cellRenderer?: (props: TableCellProps) => React.ReactNode | null | undefined;\n    onColumnResize?: () => void;\n  };\n};\n\ntype ExposedStore<T> = UseBoundStore<StoreApi<T>> & {\n  setState: (partial: Partial<T>) => void;\n};\n\nconst DecisionTableStoreContext = React.createContext<{\n  stateStore: ExposedStore<DecisionTableStoreType['state']>;\n  listenerStore: ExposedStore<DecisionTableStoreType['listeners']>;\n  actions: DecisionTableStoreType['actions'];\n}>({} as any);\n\nexport type DecisionTableContextProps = {\n  //\n};\n\nexport const DecisionTableProvider: React.FC<React.PropsWithChildren<DecisionTableContextProps>> = (props) => {\n  const { children } = props;\n\n  const stateStore = useMemo(\n    () =>\n      create<DecisionTableStoreType['state']>(() => ({\n        id: undefined,\n        name: undefined,\n        decisionTable: parseDecisionTable(),\n        cursor: null,\n        activeRules: [],\n\n        disabled: false,\n        configurable: true,\n        disableHitPolicy: false,\n\n        colWidth: 200,\n        minColWidth: 150,\n\n        inputsSchema: undefined,\n        outputsSchema: undefined,\n\n        derivedVariableTypes: {},\n        inputVariableType: undefined,\n        inputData: undefined,\n      })),\n    [],\n  );\n\n  const listenerStore = useMemo(\n    () =>\n      create<DecisionTableStoreType['listeners']>(() => ({\n        onChange: undefined,\n        cellRenderer: undefined,\n      })),\n    [],\n  );\n\n  const actions = useMemo<DecisionTableStoreType['actions']>(\n    () => ({\n      setDecisionTable: (decisionTable) => stateStore.setState({ decisionTable }),\n      setCursor: (cursor: TableCursor | null) => stateStore.setState({ cursor }),\n      commitData: (value: string, cursor: TableCursor) => {\n        const { decisionTable } = stateStore.getState();\n\n        const updatedDecisionTable = produce(decisionTable, (draft) => {\n          const { x, y } = cursor;\n          draft.rules[y][x] = value;\n          return draft;\n        });\n\n        stateStore.setState({ decisionTable: updatedDecisionTable });\n        listenerStore.getState().onChange?.(updatedDecisionTable);\n      },\n      swapRows: (source: number, target: number) => {\n        const { decisionTable } = stateStore.getState();\n\n        const updatedDecisionTable = produce(decisionTable, (draft) => {\n          const input = draft?.rules?.[source];\n          draft.rules.splice(source, 1);\n          draft.rules.splice(target, 0, input);\n          return draft;\n        });\n\n        stateStore.setState({ decisionTable: updatedDecisionTable, cursor: null });\n        listenerStore.getState().onChange?.(updatedDecisionTable);\n      },\n      addRowAbove: (target?: number) => {\n        const { decisionTable } = stateStore.getState();\n\n        const updatedDecisionTable = produce(decisionTable, (draft) => {\n          if (target === undefined) {\n            target = 0;\n          }\n\n          const _id = crypto.randomUUID();\n          draft.rules.splice(target, 0, cleanupTableRule(draft, { _id }, _id));\n\n          return draft;\n        });\n\n        stateStore.setState({ decisionTable: updatedDecisionTable });\n        listenerStore.getState().onChange?.(updatedDecisionTable);\n\n        const { cursor } = stateStore.getState();\n        if (cursor && cursor?.y === target) {\n          stateStore.setState({ cursor: { x: cursor.x, y: cursor.y + 1 } });\n        }\n      },\n      addRowBelow: (target?: number) => {\n        const { decisionTable } = stateStore.getState();\n\n        const updatedDecisionTable = produce(decisionTable, (draft) => {\n          if (target === undefined) {\n            target = draft?.rules?.length;\n          } else {\n            target += 1;\n          }\n\n          const _id = crypto.randomUUID();\n          draft.rules.splice(target, 0, cleanupTableRule(draft, { _id }, _id));\n          return draft;\n        });\n        stateStore.setState({ decisionTable: updatedDecisionTable });\n        listenerStore.getState().onChange?.(updatedDecisionTable);\n\n        const { cursor } = stateStore.getState();\n        if (cursor && cursor?.y === target) {\n          stateStore.setState({ cursor: { x: cursor.x, y: cursor.y - 1 } });\n        }\n      },\n      removeRow: (target?: number) => {\n        const { decisionTable } = stateStore.getState();\n\n        const updatedDecisionTable = produce(decisionTable, (draft) => {\n          if (target === undefined) {\n            target = draft?.rules?.length || 0;\n          }\n\n          draft.rules.splice(target, 1);\n          return draft;\n        });\n\n        stateStore.setState({ decisionTable: updatedDecisionTable });\n        listenerStore.getState().onChange?.(updatedDecisionTable);\n      },\n      addColumn: (type: ColumnType, column: TableSchemaItem) => {\n        const { decisionTable } = stateStore.getState();\n\n        const updatedDecisionTable = produce(decisionTable, (draft) => {\n          draft[type].push(column);\n          draft.rules = cleanupTableRules(draft);\n          return draft;\n        });\n\n        stateStore.setState({ decisionTable: updatedDecisionTable });\n        listenerStore.getState().onChange?.(updatedDecisionTable);\n      },\n      updateColumn: (type: ColumnType, id: string, data: TableSchemaItem) => {\n        const { decisionTable } = stateStore.getState();\n\n        const updatedDecisionTable = produce(decisionTable, (draft) => {\n          draft[type] = draft[type].map((item) => {\n            if (item.id === id) {\n              return {\n                ...item,\n                name: data?.name,\n                field: data?.field,\n                defaultValue: data?.defaultValue,\n              };\n            }\n            return item;\n          });\n\n          draft.rules = cleanupTableRules(draft);\n          return draft;\n        });\n\n        stateStore.setState({ decisionTable: updatedDecisionTable });\n        listenerStore.getState().onChange?.(updatedDecisionTable);\n      },\n      removeColumn: (type: ColumnType, id: string) => {\n        const { decisionTable } = stateStore.getState();\n\n        const updatedDecisionTable = parseDecisionTable(\n          produce(decisionTable, (draft) => {\n            draft[type] = (draft?.[type] || []).filter((item) => item?.id !== id);\n            draft.rules = cleanupTableRules(draft);\n            return draft;\n          }),\n        );\n\n        stateStore.setState({ decisionTable: updatedDecisionTable, cursor: null });\n        listenerStore.getState().onChange?.(updatedDecisionTable);\n      },\n      reorderColumns: (type: ColumnType, columns: TableSchemaItem[]) => {\n        const { decisionTable } = stateStore.getState();\n\n        const updatedDecisionTable = produce(decisionTable, (draft) => {\n          draft[type] = columns;\n          draft.rules = cleanupTableRules(draft);\n          return draft;\n        });\n\n        stateStore.setState({ decisionTable: updatedDecisionTable });\n        listenerStore.getState().onChange?.(updatedDecisionTable);\n      },\n      updateHitPolicy: (hitPolicy: HitPolicy) => {\n        const { decisionTable } = stateStore.getState();\n\n        const updatedDecisionTable = produce(decisionTable, (draft) => {\n          draft.hitPolicy = hitPolicy;\n          return draft;\n        });\n\n        stateStore.setState({ decisionTable: updatedDecisionTable });\n        listenerStore.getState().onChange?.(updatedDecisionTable);\n      },\n    }),\n    [],\n  );\n\n  return (\n    <DecisionTableStoreContext.Provider\n      value={{\n        stateStore,\n        listenerStore,\n        actions,\n      }}\n    >\n      {children}\n    </DecisionTableStoreContext.Provider>\n  );\n};\n\nexport function useDecisionTableState<T>(\n  selector: (state: DecisionTableStoreType['state']) => T,\n  equals: (a: any, b: any) => boolean = equal,\n): T {\n  return React.useContext(DecisionTableStoreContext).stateStore(selector, equals);\n}\n\nexport function useDecisionTableListeners<T>(\n  selector: (state: DecisionTableStoreType['listeners']) => T,\n  equals: (a: any, b: any) => boolean = equal,\n): T {\n  return React.useContext(DecisionTableStoreContext).listenerStore(selector, equals);\n}\n\nexport function useDecisionTableActions(): DecisionTableStoreType['actions'] {\n  return React.useContext(DecisionTableStoreContext).actions;\n}\n\nexport const useDecisionTableRaw = () => React.useContext(DecisionTableStoreContext);\nexport default DecisionTableProvider;\n","import type { DecisionTableStoreType } from '../components/decision-table/context/dt-store.context';\n\nexport type SchemaSelectProps = {\n  field: string;\n  name?: string;\n  items?: SchemaSelectProps[];\n};\nexport const recursiveSelect = (selector: string[], fields: SchemaSelectProps[]): SchemaSelectProps | undefined => {\n  const key = selector?.[0];\n  if (!key) return;\n  const field = fields.find((field) => field.field === key);\n  if (field?.items) {\n    return recursiveSelect(selector.slice(1), field.items);\n  }\n  return field;\n};\n\nexport const getPath = (key: string, items: SchemaSelectProps[]): string[] | undefined => {\n  if (!key || !items) return;\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n    if (item.field === key) {\n      return [item.field];\n    }\n\n    if (item.items) {\n      const path = getPath(key, item.items);\n      if (!path) continue;\n      return [item.field, ...path];\n    }\n  }\n};\n\nexport const columnIdSelector = (x: string) => (state: DecisionTableStoreType['state']) =>\n  [\n    ...state.decisionTable.inputs.map((i: any) => ({\n      ...i,\n      colType: 'input',\n    })),\n    ...state.decisionTable.outputs.map((i: any) => ({\n      ...i,\n      colType: 'output',\n    })),\n  ].find((c) => c.id === x);\n","import type { MutableRefObject, Ref } from 'react';\n\ntype OptionalRef<T> = Ref<T> | undefined;\n\nexport function composeRefs<T>(...refs: [OptionalRef<T>, OptionalRef<T>, ...Array<OptionalRef<T>>]): Ref<T> {\n  if (refs.length === 2) {\n    // micro-optimize the hot path\n    return composeTwoRefs(refs[0], refs[1]) || null;\n  }\n\n  const composedRef = refs\n    .slice(1)\n    .reduce(\n      (semiCombinedRef: OptionalRef<T>, refToInclude: OptionalRef<T>) => composeTwoRefs(semiCombinedRef, refToInclude),\n      refs[0],\n    );\n  return composedRef || null;\n}\n\ntype NonNullRef<T> = NonNullable<Ref<T>>;\nconst composedRefCache = new WeakMap<NonNullRef<unknown>, WeakMap<NonNullRef<unknown>, NonNullRef<unknown>>>();\n\nfunction composeTwoRefs<T>(ref1: OptionalRef<T>, ref2: OptionalRef<T>): OptionalRef<T> {\n  if (ref1 && ref2) {\n    const ref1Cache = composedRefCache.get(ref1) || new WeakMap<NonNullRef<unknown>, NonNullRef<unknown>>();\n    composedRefCache.set(ref1, ref1Cache);\n\n    const composedRef =\n      ref1Cache.get(ref2) ||\n      ((instance: T): void => {\n        updateRef(ref1, instance);\n        updateRef(ref2, instance);\n      });\n    ref1Cache.set(ref2, composedRef);\n\n    return composedRef as NonNullRef<T>;\n  }\n\n  if (!ref1) {\n    return ref2;\n  } else {\n    return ref1;\n  }\n}\n\nfunction updateRef<T>(ref: NonNullRef<T>, instance: null | T): void {\n  if (typeof ref === 'function') {\n    ref(instance);\n  } else {\n    (ref as MutableRefObject<T | null>).current = instance;\n  }\n}\n","import clsx from 'clsx';\nimport React, { useEffect, useRef } from 'react';\n\nimport { composeRefs } from '../helpers/compose-refs';\n\nexport type AutosizeTextAreaProps = {\n  maxRows: number;\n} & React.DetailedHTMLProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\n\nconst recalculateRows = (node: HTMLTextAreaElement, maxRows: number) => {\n  const computedStyles = getComputedStyle(node);\n  const lineHeight = parseInt(computedStyles.lineHeight);\n  const paddingTop = parseInt(computedStyles.paddingTop);\n  const paddingBottom = parseInt(computedStyles.paddingBottom);\n\n  node.rows = 1;\n\n  const contentHeight = node.scrollHeight - paddingTop - paddingBottom;\n  const calculatedRows = Math.floor(contentHeight / lineHeight);\n\n  node.rows = Math.min(Math.max(calculatedRows, 1), maxRows);\n};\n\nexport const AutosizeTextArea = React.forwardRef<HTMLTextAreaElement, AutosizeTextAreaProps>(\n  ({ maxRows, className, value, ...props }, ref) => {\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n    useEffect(() => {\n      if (!textareaRef.current) {\n        return;\n      }\n\n      recalculateRows(textareaRef.current, maxRows);\n    }, [value, maxRows]);\n\n    useEffect(() => {\n      if (!textareaRef.current) {\n        return;\n      }\n\n      const observerCallback: ResizeObserverCallback = (entries: ResizeObserverEntry[]) => {\n        window.requestAnimationFrame((): void | undefined => {\n          if (!Array.isArray(entries) || entries.length === 0) {\n            return;\n          }\n\n          recalculateRows(entries[0].target as HTMLTextAreaElement, maxRows);\n        });\n      };\n\n      const resizeObserver = new ResizeObserver(observerCallback);\n      resizeObserver.observe(textareaRef.current);\n\n      return () => {\n        resizeObserver.disconnect();\n      };\n    }, [maxRows]);\n\n    return (\n      <textarea\n        className={clsx('grl-textarea-input', className)}\n        ref={composeRefs(textareaRef, ref)}\n        value={value}\n        {...props}\n      />\n    );\n  },\n);\n","import { isReady } from '@gorules/zen-engine-wasm';\n\nlet wasmAvailable = false;\n\nexport const isWasmAvailable = () => {\n  if (wasmAvailable) {\n    return true;\n  }\n\n  try {\n    if (isReady()) {\n      wasmAvailable = true;\n      return wasmAvailable;\n    }\n  } catch {\n    return false;\n  }\n};\n","import { VariableType } from '@gorules/zen-engine-wasm';\nimport { useMemo } from 'react';\n\nimport { NodeTypeKind, useDecisionGraphState } from '../components';\nimport type { DecisionGraphStoreType } from '../components/decision-graph/context/dg-store.context';\nimport { isWasmAvailable } from './wasm';\n\ntype NodeTypeParams = {\n  attachGlobals?: boolean;\n  disabled?: boolean;\n};\n\nconst getNodeType = (nodeTypes: DecisionGraphStoreType['state']['nodeTypes'], id: string) =>\n  nodeTypes[id]?.[NodeTypeKind.Input] ??\n  nodeTypes[id]?.[NodeTypeKind.InferredInput] ??\n  VariableType.fromJson({ Object: {} });\n\nexport const useNodeType = (id: string, { attachGlobals = true, disabled = false }: NodeTypeParams = {}) => {\n  const typeInfo = useDecisionGraphState(({ nodeTypes, globalType }) => {\n    if (!isWasmAvailable() || disabled) {\n      return undefined;\n    }\n\n    return { nodeTypes, globalType };\n  });\n\n  return useMemo(() => {\n    if (!typeInfo?.nodeTypes) {\n      return undefined;\n    }\n\n    const nodeType = getNodeType(typeInfo.nodeTypes, id);\n    if (!attachGlobals) {\n      return nodeType;\n    }\n\n    Object.entries(typeInfo?.globalType ?? {}).forEach(([k, v]) => nodeType.set(k, v));\n    return nodeType;\n  }, [typeInfo?.globalType, typeInfo?.nodeTypes, attachGlobals]);\n};\n","import type { RadioGroupProps } from 'antd';\nimport { Radio } from 'antd';\nimport clsx from 'clsx';\nimport React from 'react';\n\nexport type DiffRadioProps = {\n  previousValue?: string;\n  displayDiff?: boolean;\n} & RadioGroupProps;\n\nexport const DiffRadio: React.FC<DiffRadioProps> = ({ displayDiff, previousValue, options, ...rest }) => {\n  return (\n    <Radio.Group {...rest}>\n      {(options || []).map((option: any) => (\n        <Radio\n          value={option.value}\n          key={option.value}\n          className={clsx([\n            displayDiff && option.value === previousValue && 'text-removed',\n            displayDiff && option.value === rest.value && 'text-added',\n          ])}\n        >\n          {option.label}\n        </Radio>\n      ))}\n    </Radio.Group>\n  );\n};\n","import { ArrowDownOutlined, ArrowRightOutlined } from '@ant-design/icons';\nimport React from 'react';\n\nexport const ArrowDiffIcon: React.FC<{ direction?: 'right' | 'down'; size?: 'small' | 'medium' }> = ({\n  direction = 'right',\n  size = 'small',\n}) => {\n  const fontSize = size === 'small' ? 12 : 16;\n  if (direction === 'down')\n    return (\n      <ArrowDownOutlined\n        className={'text-modified'}\n        style={{\n          fontSize,\n        }}\n      />\n    );\n  return (\n    <ArrowRightOutlined\n      className={'text-modified'}\n      style={{\n        fontSize,\n      }}\n    />\n  );\n};\n","import { Space, Switch, type SwitchProps } from 'antd';\nimport React from 'react';\n\nimport { ArrowDiffIcon } from '../arrow-diff-icon';\n\nexport type DiffSwitchProps = {\n  previousChecked?: boolean;\n  displayDiff?: boolean;\n} & SwitchProps;\n\nexport const DiffSwitch: React.FC<DiffSwitchProps> = ({ displayDiff, previousChecked, ...rest }) => {\n  return (\n    <Space size={4}>\n      {displayDiff && (\n        <>\n          <Switch disabled={rest.disabled} size={'small'} checked={previousChecked} />\n          <ArrowDiffIcon />\n        </>\n      )}\n      <Switch size={'small'} {...rest} />\n    </Space>\n  );\n};\n","import { Input, type InputProps } from 'antd';\nimport clsx from 'clsx';\nimport React from 'react';\n\nexport type DiffInputProps = InputProps & {\n  previousValue?: string;\n  displayDiff?: boolean;\n};\n\nexport const DiffInput: React.FC<DiffInputProps> = ({ previousValue, displayDiff, ...rest }) => {\n  if (displayDiff) {\n    return (\n      <div className={'diff-input-group'}>\n        {(previousValue || '')?.length > 0 && (\n          <Input\n            {...rest}\n            value={previousValue}\n            onChange={undefined}\n            className={clsx(rest.className, 'previous-input')}\n          />\n        )}\n        {((rest?.value || '') as string)?.length > 0 && (\n          <Input {...rest} className={clsx(rest.className, 'current-input')} />\n        )}\n      </div>\n    );\n  }\n  return <Input {...rest} />;\n};\n","import { Select, type SelectProps, Space, type SpaceProps } from 'antd';\nimport clsx from 'clsx';\nimport React from 'react';\n\nimport { ArrowDiffIcon } from '../arrow-diff-icon';\n\nexport type DiffSelectProps = Omit<SelectProps, 'direction'> & {\n  previousValue?: string;\n  displayDiff?: boolean;\n  direction?: SpaceProps['direction'];\n};\n\nexport const DiffSelect: React.FC<DiffSelectProps> = ({\n  direction = 'horizontal',\n  previousValue,\n  displayDiff,\n  ...rest\n}) => {\n  return (\n    <Space size={'small'} direction={direction}>\n      {displayDiff && (\n        <>\n          <Select\n            {...rest}\n            disabled\n            value={previousValue}\n            className={clsx(rest.className, 'text-removed')}\n            onChange={undefined}\n          />\n          <ArrowDiffIcon />\n        </>\n      )}\n      <Select\n        {...rest}\n        disabled={rest.disabled || displayDiff}\n        className={clsx(rest.className, displayDiff && 'text-added')}\n      />\n    </Space>\n  );\n};\n","import clsx from 'clsx';\nimport React from 'react';\n\nimport type { CodeEditorProps } from '../code-editor';\nimport { CodeEditor } from '../code-editor';\n\nexport type DiffCodeEditorProps = CodeEditorProps & {\n  displayDiff?: boolean;\n  previousValue?: string;\n  noStyle?: boolean;\n};\n\nexport const DiffCodeEditor = React.forwardRef<HTMLDivElement, DiffCodeEditorProps>(\n  ({ displayDiff, previousValue, noStyle, ...rest }, ref) => {\n    if (displayDiff) {\n      return (\n        <div className={clsx('diff-code-editor', noStyle && 'no-style')}>\n          {(previousValue || '')?.length > 0 && (\n            <CodeEditor\n              {...rest}\n              className={clsx(rest.className, 'previous-input')}\n              value={previousValue}\n              onChange={undefined}\n              disabled={true}\n              noStyle\n              lint={false}\n            />\n          )}\n          {(rest?.value || '')?.length > 0 && (\n            <CodeEditor\n              {...rest}\n              className={clsx(rest.className, 'current-input')}\n              disabled={true}\n              noStyle\n              lint={false}\n            />\n          )}\n        </div>\n      );\n    }\n    return <CodeEditor ref={ref} {...rest} />;\n  },\n);\n","import clsx from 'clsx';\nimport React, { forwardRef } from 'react';\n\nimport { AutosizeTextArea, type AutosizeTextAreaProps } from '../autosize-text-area';\n\nexport type DiffAutosizeTextAreaProps = AutosizeTextAreaProps & {\n  previousValue?: string;\n  displayDiff?: boolean;\n  noStyle?: boolean;\n};\n\nexport const DiffAutosizeTextArea: React.FC<DiffAutosizeTextAreaProps> = forwardRef(\n  ({ previousValue, displayDiff, noStyle, ...rest }, ref) => {\n    if (displayDiff) {\n      return (\n        <div className={clsx('diff-text-area-group', noStyle && 'no-style')}>\n          {(previousValue || '')?.length > 0 && (\n            <AutosizeTextArea\n              {...rest}\n              value={previousValue}\n              onChange={undefined}\n              className={clsx(rest.className, 'previous-input')}\n            />\n          )}\n          {((rest.value || '') as string)?.length > 0 && (\n            <AutosizeTextArea {...rest} className={clsx(rest.className, 'current-input')} />\n          )}\n        </div>\n      );\n    }\n    return <AutosizeTextArea ref={ref} {...rest} />;\n  },\n);\n","import type { DragDropManager } from 'dnd-core';\nimport React, { useMemo } from 'react';\nimport { P, match } from 'ts-pattern';\n\nimport { useNodeType } from '../../../helpers/node-type';\nimport { DecisionTable } from '../../decision-table';\nimport { useDecisionGraphActions, useDecisionGraphState } from '../context/dg-store.context';\nimport type { NodeDecisionTableData } from '../nodes/specifications/decision-table.specification';\nimport type { SimulationTrace, SimulationTraceDataTable } from '../simulator/simulation.types';\n\nexport type TabDecisionTableProps = {\n  id: string;\n  manager?: DragDropManager;\n};\n\nexport const TabDecisionTable: React.FC<TabDecisionTableProps> = ({ id, manager }) => {\n  const graphActions = useDecisionGraphActions();\n  const nodeType = useNodeType(id, { attachGlobals: false });\n  const { nodeTrace, disabled, configurable, content, globalType, inputsSchema, outputsSchema } = useDecisionGraphState(\n    ({ simulate, disabled, configurable, decisionGraph, globalType, inputsSchema, outputsSchema }) => ({\n      nodeTrace: match(simulate)\n        .with({ result: P._ }, ({ result }) => result?.trace?.[id] as SimulationTrace<SimulationTraceDataTable>)\n        .otherwise(() => null),\n      disabled,\n      configurable,\n      content: (decisionGraph?.nodes ?? []).find((node) => node.id === id)?.content as NodeDecisionTableData,\n      globalType,\n      inputsSchema,\n      outputsSchema,\n    }),\n  );\n\n  const activeRules: string[] =\n    nodeTrace?.traceData !== undefined\n      ? Array.isArray(nodeTrace?.traceData)\n        ? nodeTrace?.traceData?.map((d: any) => d?.rule?._id)\n        : [nodeTrace?.traceData?.rule?._id]\n      : [];\n\n  const computedType = useMemo(() => {\n    if (!nodeType) {\n      return undefined;\n    }\n\n    const computedType = match(content?.inputField)\n      .with(P.string, (inputField) => nodeType.get(inputField))\n      .otherwise(() => nodeType);\n\n    const newType = content?.executionMode === 'loop' ? computedType.arrayItem() : computedType;\n\n    Object.entries(globalType).forEach(([k, v]) => newType.set(k, v));\n    return newType;\n  }, [nodeType, globalType, content?.inputField, content?.executionMode]);\n\n  return (\n    <DecisionTable\n      id={id}\n      tableHeight={'100%'}\n      value={content as any}\n      manager={manager}\n      disabled={disabled}\n      configurable={configurable}\n      inputData={computedType}\n      activeRules={(activeRules || []).filter((id) => !!id)}\n      inputsSchema={inputsSchema}\n      outputsSchema={outputsSchema}\n      onChange={(val) => {\n        graphActions.updateNode(id, (draft) => {\n          Object.assign(draft.content, val);\n          return draft;\n        });\n      }}\n    />\n  );\n};\n","const isMac = navigator.platform.includes('Mac');\n\nconst keyMaps: Record<string, string> = {\n  Ctrl: '⌘',\n  Backspace: '⌫',\n  Alt: '⌥',\n};\n\nexport const platform = {\n  shortcut: (s: string): string => {\n    if (!isMac) return s;\n\n    return Object.keys(keyMaps).reduce((acc, key) => acc.replaceAll(key, keyMaps[key]), s);\n  },\n};\n","import type { Dispatch, SetStateAction } from 'react';\nimport { useEffect, useState } from 'react';\n\nconst memoryCache: Record<string, unknown> = {};\n\nexport const usePersistentState = <S>(\n  key: string,\n  defaultValue?: S,\n): [S | undefined, Dispatch<SetStateAction<S | undefined>>] => {\n  const [state, setState] = useState(() => (memoryCache?.[key] as S) ?? defaultValue);\n\n  useEffect(() => {\n    memoryCache[key] = state;\n  }, [state]);\n\n  return [state, setState];\n};\n","import React, { useMemo } from 'react';\n\nexport type StackAlignment =\n  | 'start'\n  | 'end'\n  | 'center'\n  | 'space-between'\n  | 'space-around'\n  | 'space-evenly'\n  | 'baseline'\n  | 'stretch';\n\nexport type StackProps = {\n  horizontal?: boolean;\n  reversed?: boolean;\n  grow?: boolean;\n  verticalAlign?: StackAlignment;\n  horizontalAlign?: StackAlignment;\n  gap?: string | number;\n  height?: string | number;\n  width?: string | number;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nexport const Stack: React.FC<StackProps> = (props) => {\n  const {\n    horizontal,\n    reversed,\n    verticalAlign = 'start',\n    horizontalAlign = 'start',\n    gap = 8,\n    height = 'auto',\n    width = '100%',\n    grow,\n    style,\n    ...rest\n  } = props;\n\n  const flexDirection = useMemo(() => {\n    if (horizontal) {\n      return !reversed ? 'row' : 'row-reverse';\n    }\n    return !reversed ? 'column' : 'column-reverse';\n  }, [horizontal, reversed]);\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection,\n        justifyContent: !horizontal ? verticalAlign : horizontalAlign,\n        alignItems: !horizontal ? horizontalAlign : verticalAlign,\n        height,\n        width,\n        gap,\n        flexGrow: grow ? 1 : undefined,\n        ...style,\n      }}\n      {...rest}\n    />\n  );\n};\n","import { Typography } from 'antd';\nimport React from 'react';\n\nimport { Stack } from './stack';\n\nexport type SpacedTextProps = {\n  left: React.ReactNode;\n  right?: React.ReactNode;\n  gap?: number;\n};\n\nexport const SpacedText: React.VFC<SpacedTextProps> = ({ left, right, gap = 16 }) => {\n  return (\n    <Stack gap={gap} horizontal horizontalAlign='space-between'>\n      <Typography.Text style={{ color: 'inherit' }}>{left}</Typography.Text>\n      {right && <Typography.Text style={{ color: 'inherit' }}>{right}</Typography.Text>}\n    </Stack>\n  );\n};\n","import { DragOutlined, MinusSquareOutlined, PlusSquareOutlined } from '@ant-design/icons';\nimport React from 'react';\nimport { match } from 'ts-pattern';\n\nimport type { DiffStatus } from './decision-graph/dg-types';\n\nexport const DiffIcon: React.FC<\n  {\n    status?: DiffStatus;\n  } & React.HTMLAttributes<HTMLSpanElement>\n> = ({ status, ...rest }) => {\n  return match(status)\n    .with('removed', () => (\n      <MinusSquareOutlined\n        {...rest}\n        style={{\n          color: 'var(--grl-color-error)',\n          ...(rest?.style || {}),\n        }}\n      />\n    ))\n    .with('added', () => (\n      <PlusSquareOutlined\n        {...rest}\n        style={{\n          color: 'var(--grl-color-success)',\n          ...(rest?.style || {}),\n        }}\n      />\n    ))\n    .with('modified', () => (\n      <span\n        {...rest}\n        style={{\n          width: rest?.style?.fontSize ?? 14,\n          height: rest?.style?.fontSize ?? 14,\n          border: '1.5px solid var(--grl-color-warning)',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          position: 'relative',\n          boxSizing: 'border-box',\n          ...(rest?.style || {}),\n        }}\n      >\n        <span\n          style={{\n            width: 3,\n            height: 3,\n            backgroundColor: 'var(--grl-color-warning)',\n            borderRadius: '50%',\n          }}\n        />\n      </span>\n    ))\n    .with('moved', () => (\n      <DragOutlined\n        {...rest}\n        style={{\n          color: 'var(--grl-color-info)',\n          ...(rest?.style || {}),\n        }}\n      />\n    ))\n    .otherwise(() => null);\n};\n","import clsx from 'clsx';\nimport React from 'react';\n\nexport type GraphCardProps = React.HTMLAttributes<HTMLDivElement>;\n\nexport const GraphCard: React.FC<GraphCardProps> = ({ className, ...props }) => {\n  return <div className={clsx('grl-dn__graphCard', className)} {...props} />;\n};\n","export enum NodeColor {\n  Blue = 'var(--node-color-blue)',\n  Purple = 'var(--node-color-purple)',\n  Orange = 'var(--node-color-orange)',\n  Green = 'var(--node-color-green)',\n}\n","import { CloseOutlined, MoreOutlined } from '@ant-design/icons';\nimport { Button, Dropdown, type MenuProps, Typography } from 'antd';\nimport clsx from 'clsx';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Transition } from 'transition-hook';\nimport { match } from 'ts-pattern';\n\nimport { DiffIcon } from '../../diff-icon';\nimport './decision-node.scss';\nimport { GraphCard } from './graph-card';\nimport { NodeColor } from './specifications/colors';\n\nexport type DecisionNodeProps = {\n  name?: string;\n  icon: React.ReactNode;\n  type: React.ReactNode;\n  helper?: (React.ReactNode | false)[];\n  disabled?: boolean;\n  isSelected?: boolean;\n  children?: React.ReactNode;\n  actions?: React.ReactNode[];\n  status?: 'error' | 'success' | 'warning';\n  diffStatus?: 'removed' | 'added' | 'modified' | 'moved';\n  noBodyPadding?: boolean;\n  color?: 'primary' | 'secondary' | string;\n  menuItems?: MenuProps['items'];\n  onNameChange?: (name: string) => void;\n  compactMode?: boolean;\n  listMode?: boolean;\n  details?: React.ReactNode;\n  detailsOpen?: boolean;\n  detailsTitle?: string;\n  onDetailsClose?: () => void;\n};\n\nexport const DecisionNode: React.FC<DecisionNodeProps> = ({\n  icon,\n  name,\n  children,\n  actions = [],\n  disabled = false,\n  isSelected = false,\n  noBodyPadding = false,\n  color = 'primary',\n  onNameChange,\n  menuItems = [],\n  status,\n  diffStatus,\n  compactMode,\n  listMode,\n  helper,\n  details,\n  detailsOpen = false,\n  detailsTitle = 'Details',\n  onDetailsClose,\n}) => {\n  const [contentEditing, setContentEditing] = useState(false);\n  const nameRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (nameRef.current && contentEditing) {\n      nameRef.current.value = name as string;\n      nameRef.current.focus();\n      nameRef.current.select();\n    }\n  }, [contentEditing]);\n\n  const nodeColor = match(color)\n    .with('primary', () => NodeColor.Blue)\n    .otherwise((c) => c);\n\n  return (\n    <div\n      className={clsx(\n        'grl-dn',\n        compactMode && 'grl-dn--compact',\n        listMode && 'grl-dn--list',\n        !diffStatus && isSelected && `grl-dn--selected`,\n        status && `grl-dn--${status}`,\n        diffStatus && `grl-dn--diff-${diffStatus}`,\n      )}\n      style={\n        {\n          '--node-color': nodeColor,\n        } as any\n      }\n      onKeyDown={(e) => e.stopPropagation()}\n    >\n      <GraphCard>\n        <div className={'grl-dn__status-bar'}>\n          {Array.isArray(helper) &&\n            helper\n              .filter((h) => !!h)\n              .map((h, i) => (\n                <div key={i} className={clsx('grl-dn__status-icon')}>\n                  {h}\n                </div>\n              ))}\n          {status === 'error' && (\n            <div className={clsx('grl-dn__status-icon', `grl-dn__status-icon--${status}`)}>\n              <CloseOutlined />\n            </div>\n          )}\n          <DiffIcon status={diffStatus} style={{ fontSize: 16 }} />\n        </div>\n        <div className={clsx('grl-dn__header', compactMode && 'compact')}>\n          <div className={clsx('grl-dn__header__icon', compactMode && 'compact')}>{icon}</div>\n          <div className='grl-dn__header__text'>\n            {!contentEditing && (\n              <Typography.Text\n                className={clsx('grl-dn__header__text__name')}\n                onClick={() => {\n                  if (!disabled) {\n                    setContentEditing(true);\n                  }\n                }}\n              >\n                {name}\n              </Typography.Text>\n            )}\n            {contentEditing && (\n              <input\n                ref={nameRef}\n                className={clsx('grl-dn__header__text__name-input', 'nodrag')}\n                onBlur={(e) => {\n                  if (e.target.value?.trim?.()?.length > 0) {\n                    onNameChange?.(nameRef?.current?.value as string);\n                  }\n                  e.preventDefault();\n                  setContentEditing(false);\n                }}\n                onKeyDown={(e) => {\n                  if (e.key === 'Enter') {\n                    e.currentTarget.blur();\n                    e.preventDefault();\n                  } else if (e.key === 'Escape') {\n                    if (nameRef.current) {\n                      nameRef.current.value = name as string;\n                    }\n                    setContentEditing(false);\n                    e.preventDefault();\n                  }\n                }}\n              />\n            )}\n          </div>\n          {menuItems.length > 0 && (\n            <div className={clsx('grl-dn__header__actions', 'nodrag')}>\n              <Dropdown trigger={['click']} overlayStyle={{ minWidth: 250 }} menu={{ items: menuItems }}>\n                <Button type='text' size={'small'} icon={<MoreOutlined />} />\n              </Dropdown>\n            </div>\n          )}\n        </div>\n        {children && (\n          <div\n            className={clsx(\n              'grl-dn__body',\n              actions.length === 0 && 'grl-dn__body--no-footer',\n              noBodyPadding && 'grl-dn__body--no-padding',\n            )}\n          >\n            {children}\n          </div>\n        )}\n        {actions.length > 0 && (\n          <div className={clsx('grl-dn__footer', 'nodrag')}>\n            <div className='grl-dn__footer__actions'>{actions}</div>\n          </div>\n        )}\n      </GraphCard>\n      <Transition state={detailsOpen} timeout={100}>\n        {(stage, shouldMount) =>\n          shouldMount && (\n            <GraphCard\n              className='nodrag'\n              style={{\n                transition: '0.1s ease-in-out',\n                transform: stage === 'enter' ? 'translateY(0)' : 'translateY(-10px)',\n                opacity: stage === 'enter' ? 1 : 0,\n              }}\n            >\n              <div className='grl-dn__details'>\n                <div className='grl-dn__details__header'>\n                  <Typography.Text className='grl-dn__details__header__text'>{detailsTitle}</Typography.Text>\n                  <Button\n                    type={'text'}\n                    size={'small'}\n                    className='grl-dn__details__header__close'\n                    icon={<CloseOutlined style={{ fontSize: 8 }} />}\n                    onClick={onDetailsClose}\n                  />\n                </div>\n                <div className='grl-dn__details__body'>{details}</div>\n              </div>\n            </GraphCard>\n          )\n        }\n      </Transition>\n    </div>\n  );\n};\n","import { BookOutlined } from '@ant-design/icons';\nimport type { MenuProps } from 'antd';\nimport { Button, Modal, Typography } from 'antd';\nimport clsx from 'clsx';\nimport React from 'react';\nimport type { HandleProps } from 'reactflow';\nimport { Handle, Position } from 'reactflow';\nimport { P, match } from 'ts-pattern';\n\nimport { platform } from '../../../helpers/platform';\nimport { usePersistentState } from '../../../helpers/use-persistent-state';\nimport { SpacedText } from '../../spaced-text';\nimport { useDecisionGraphActions, useDecisionGraphState, useNodeDiff } from '../context/dg-store.context';\nimport type { DecisionNodeProps } from './decision-node';\nimport { DecisionNode } from './decision-node';\nimport type { MinimalNodeSpecification } from './specifications/specification-types';\n\nenum Details {\n  Settings,\n}\n\nexport type GraphNodeProps = {\n  id: string;\n  handleLeft?: boolean | Partial<HandleProps>;\n  handleRight?: boolean | Partial<HandleProps>;\n  className?: string;\n  specification: MinimalNodeSpecification;\n  displayError?: boolean;\n} & Partial<DecisionNodeProps>;\n\nexport const GraphNode = React.forwardRef<HTMLDivElement, GraphNodeProps>(\n  (\n    {\n      id,\n      handleLeft = true,\n      handleRight = true,\n      className,\n      specification,\n      name,\n      displayError,\n      helper,\n      actions,\n      ...decisionNodeProps\n    },\n    ref,\n  ) => {\n    const [currentDetails, setCurrentDetails] = usePersistentState<Details>(`node:details:${id}`, Details.Settings);\n    const [detailsOpen, setDetailsOpen] = usePersistentState<boolean>(`node:detailsOpen:${id}`, false);\n    const graphActions = useDecisionGraphActions();\n    const { nodeError, nodeTrace, disabled, compactMode } = useDecisionGraphState(\n      ({ simulate, disabled, compactMode }) => ({\n        disabled,\n        nodeTrace: match(simulate)\n          .with({ result: P._ }, ({ result }) => result?.trace?.[id])\n          .otherwise(() => null),\n        nodeError: match(simulate)\n          .with({ error: { data: { nodeId: id } } }, ({ error }) => error)\n          .otherwise(() => null),\n        compactMode,\n      }),\n    );\n\n    const { diff } = useNodeDiff(id);\n\n    const Settings = specification.renderSettings;\n\n    const menuItems = [\n      specification.documentationUrl\n        ? {\n            key: 'documentation',\n            label: <SpacedText left='Documentation' right={<BookOutlined />} />,\n            onClick: () => window.open(specification.documentationUrl, '_href'),\n          }\n        : null,\n      specification.documentationUrl ? { key: 'divider-1', type: 'divider' } : null,\n      !displayError && {\n        key: 'copy-clipboard',\n        label: <SpacedText left='Copy to clipboard' right={platform.shortcut('Ctrl + C')} />,\n        onClick: () => {},\n      },\n      !displayError && {\n        key: 'duplicate',\n        disabled,\n        label: <SpacedText left='Duplicate' right={platform.shortcut('Ctrl + D')} />,\n        onClick: () => graphActions.duplicateNodes([id]),\n      },\n      !displayError && { key: 'divider-2', type: 'divider' },\n      {\n        key: 'delete',\n        danger: true,\n        label: <SpacedText left='Delete' right={platform.shortcut('Backspace')} />,\n        disabled,\n        onClick: () =>\n          Modal.confirm({\n            icon: null,\n            title: 'Delete node',\n            content: (\n              <Typography.Text>\n                Are you sure you want to delete <Typography.Text strong>{name}</Typography.Text> node.\n              </Typography.Text>\n            ),\n            okButtonProps: { danger: true },\n            onOk: () => graphActions.removeNodes([id]),\n          }),\n      },\n    ].filter((i) => i !== false);\n\n    return (\n      <div\n        className={clsx('grl-graph-node', className)}\n        style={{ minWidth: 220, maxWidth: 220 }}\n        ref={ref}\n        onClick={(event) => {\n          const isToggle = match(navigator.platform.includes('Mac'))\n            .with(true, () => event.metaKey)\n            .otherwise(() => event.ctrlKey);\n\n          graphActions.triggerNodeSelect(id, isToggle ? 'toggle' : 'only');\n        }}\n      >\n        {handleLeft && (\n          <Handle\n            className={clsx('grl-graph-node__handle-left', compactMode && 'compact')}\n            type='target'\n            position={Position.Left}\n            {...(typeof handleLeft !== 'boolean' ? handleLeft : {})}\n          />\n        )}\n        <DecisionNode\n          menuItems={menuItems as MenuProps['items']}\n          {...decisionNodeProps}\n          disabled={disabled}\n          icon={specification.icon}\n          color={specification.color}\n          type={specification.displayName}\n          helper={helper}\n          name={name}\n          details={Settings ? <Settings id={id} /> : undefined}\n          detailsOpen={detailsOpen}\n          detailsTitle={match(currentDetails)\n            .with(Details.Settings, () => 'Settings')\n            .otherwise(() => undefined)}\n          onDetailsClose={() => setDetailsOpen(false)}\n          actions={\n            !Settings\n              ? actions\n              : [\n                  ...(actions ?? []),\n                  <Button\n                    key='settings'\n                    type='text'\n                    style={{ marginLeft: 'auto' }}\n                    onClick={() => {\n                      setDetailsOpen(currentDetails === Details.Settings ? !detailsOpen : true);\n                      setCurrentDetails(Details.Settings);\n                    }}\n                  >\n                    Settings\n                  </Button>,\n                ]\n          }\n          status={match([nodeTrace, nodeError, displayError])\n            .with([P._, P._, true], () => 'error' as const)\n            .with([P._, P.not(P.nullish), P._], () => 'error' as const)\n            .with([P.not(P.nullish), P._, P._], () => 'success' as const)\n            .otherwise(() => undefined)}\n          diffStatus={match([diff])\n            .with([{ status: 'added' }], () => 'added' as const)\n            .with([{ status: 'modified' }], () => 'modified' as const)\n            .with([{ status: 'removed' }], () => 'removed' as const)\n            .with([{ status: 'moved' }], () => 'moved' as const)\n            .otherwise(() => undefined)}\n          onNameChange={(name) => {\n            graphActions.updateNode(id, (draft) => {\n              draft.name = name;\n              return draft;\n            });\n          }}\n          compactMode={compactMode}\n        />\n        {handleRight && (\n          <Handle\n            className={clsx('grl-graph-node__handle-right', compactMode && 'compact')}\n            type='source'\n            position={Position.Right}\n            {...(typeof handleRight !== 'boolean' ? handleRight : {})}\n          />\n        )}\n      </div>\n    );\n  },\n);\n","import { type VariableType } from '@gorules/zen-engine-wasm';\nimport type { DragDropManager } from 'dnd-core';\nimport type React from 'react';\nimport type { NodeProps } from 'reactflow';\n\nimport type { DecisionNode } from '../../dg-types';\nimport type { DecisionNodeProps } from '../decision-node';\n\nexport enum NodeKind {\n  Input = 'inputNode',\n  Output = 'outputNode',\n  DecisionTable = 'decisionTableNode',\n  Function = 'functionNode',\n  Expression = 'expressionNode',\n  Switch = 'switchNode',\n}\n\nexport type MinimalNodeProps = Pick<NodeProps, 'id' | 'data' | 'selected'>;\nexport type MinimalNodeSpecification = Pick<\n  NodeSpecification,\n  'color' | 'icon' | 'displayName' | 'documentationUrl' | 'helper' | 'renderSettings'\n>;\n\ntype GenerateNodeParams = {\n  index: number;\n};\n\nexport type InferTypeData<T> = {\n  input: VariableType;\n  content: T;\n};\n\nexport type NodeSpecification<T = any> = {\n  icon?: React.ReactNode;\n  type: string;\n  color?: DecisionNodeProps['color'];\n  group?: string;\n  displayName: string | React.ReactNode;\n  documentationUrl?: string;\n  shortDescription?: string;\n  helper?: string | React.ReactNode;\n  renderTab?: (props: { id: string; manager?: DragDropManager }) => React.ReactNode;\n  getDiffContent?: (current: T, previous: T) => T;\n  generateNode: (params: GenerateNodeParams) => Omit<DecisionNode<T>, 'position' | 'id' | 'type'>;\n  renderNode: React.FC<MinimalNodeProps & { specification: MinimalNodeSpecification }>;\n  renderSettings?: React.FC<{ id: string }>;\n  inferTypes?: {\n    needsUpdate: (content: T, prevContent: T) => boolean;\n    determineOutputType: (state: InferTypeData<T>) => VariableType;\n  };\n\n  onNodeAdd?: (node: DecisionNode<T>) => Promise<DecisionNode<T>>;\n};\n","import { ArrowRightOutlined, SyncOutlined, TableOutlined } from '@ant-design/icons';\nimport { VariableType } from '@gorules/zen-engine-wasm';\nimport { Button, Form, Space } from 'antd';\nimport equal from 'fast-deep-equal/es6/react';\nimport { produce } from 'immer';\nimport _ from 'lodash';\nimport React from 'react';\nimport type { z } from 'zod';\n\nimport { useNodeType } from '../../../../helpers/node-type';\nimport type { decisionTableSchema } from '../../../../helpers/schema';\nimport { DiffInput, DiffRadio, DiffSwitch } from '../../../shared';\nimport { DiffCodeEditor } from '../../../shared/diff-ce';\nimport { useDecisionGraphActions, useDecisionGraphState, useNodeDiff } from '../../context/dg-store.context';\nimport { compareAndUnifyLists } from '../../dg-diff-util';\nimport type { Diff, DiffMetadata } from '../../dg-types';\nimport { TabDecisionTable } from '../../graph/tab-decision-table';\nimport { GraphNode } from '../graph-node';\nimport type { NodeSpecification } from './specification-types';\nimport { NodeKind } from './specification-types';\n\ntype InferredContent = z.infer<typeof decisionTableSchema>['content'];\n\nexport type NodeDecisionTableData = Omit<InferredContent, 'inputs' | 'outputs' | 'rules'> &\n  Diff & {\n    rules: (InferredContent['rules'][0] & Diff)[];\n    inputs: (InferredContent['inputs'][0] & Diff)[];\n    outputs: (InferredContent['outputs'][0] & Diff)[];\n  };\n\nexport const decisionTableSpecification: NodeSpecification<NodeDecisionTableData> = {\n  type: NodeKind.DecisionTable,\n  icon: <TableOutlined />,\n  displayName: 'Decision table',\n  documentationUrl: 'https://gorules.io/docs/user-manual/decision-modeling/decisions/decision-tables',\n  shortDescription: 'Rules spreadsheet',\n  renderTab: ({ id, manager }) => <TabDecisionTable id={id} manager={manager} />,\n  getDiffContent: (current, previous) => {\n    return produce(current, (draft) => {\n      const fields: DiffMetadata['fields'] = {};\n      if ((current.executionMode ?? 'single') !== (previous.executionMode ?? 'single')) {\n        _.set(fields, 'executionMode', {\n          status: 'modified',\n          previousValue: previous.executionMode,\n        });\n      }\n\n      if ((current.hitPolicy ?? 'first') !== (previous.hitPolicy ?? 'first')) {\n        _.set(fields, 'hitPolicy', {\n          status: 'modified',\n          previousValue: previous.hitPolicy,\n        });\n      }\n\n      if ((current.inputField ?? '') !== (previous.inputField ?? '')) {\n        _.set(fields, 'inputField', {\n          status: 'modified',\n          previousValue: previous.inputField,\n        });\n      }\n\n      if ((current.outputPath ?? '') !== (previous.outputPath ?? '')) {\n        _.set(fields, 'outputPath', {\n          status: 'modified',\n          previousValue: previous.outputPath,\n        });\n      }\n\n      if ((current.passThrough ?? false) !== (previous.passThrough ?? false)) {\n        _.set(fields, 'passThrough', {\n          status: 'modified',\n          previousValue: previous.passThrough,\n        });\n      }\n\n      const inputs = compareAndUnifyLists(current?.inputs || [], previous?.inputs || [], {\n        compareFields: (current, previous) => {\n          const hasNameChange = (current.name ?? '') !== (previous.name ?? '');\n          const hasFieldChange = (current.field ?? '') !== (previous.field ?? '');\n          const hasDefaultValueChange = (current.defaultValue ?? '') !== (previous.defaultValue ?? '');\n\n          return {\n            hasChanges: hasNameChange || hasFieldChange || hasDefaultValueChange,\n            fields: {\n              ...(hasNameChange && {\n                name: {\n                  status: 'modified',\n                  previousValue: previous.name,\n                },\n              }),\n              ...(hasFieldChange && {\n                field: {\n                  status: 'modified',\n                  previousValue: previous.field,\n                },\n              }),\n              ...(hasDefaultValueChange && {\n                defaultValue: {\n                  status: 'modified',\n                  previousValue: previous.defaultValue,\n                },\n              }),\n            },\n          };\n        },\n      });\n\n      const outputs = compareAndUnifyLists(current?.outputs || [], previous?.outputs || [], {\n        compareFields: (current, previous) => {\n          const hasNameChange = (current.name ?? '') !== (previous.name ?? '');\n          const hasFieldChange = (current.field ?? '') !== (previous.field ?? '');\n          const hasDefaultValueChange = (current.defaultValue ?? '') !== (previous.defaultValue ?? '');\n\n          return {\n            hasChanges: hasNameChange || hasFieldChange || hasDefaultValueChange,\n            fields: {\n              ...(hasNameChange && {\n                name: {\n                  status: 'modified',\n                  previousValue: previous.name,\n                },\n              }),\n              ...(hasFieldChange && {\n                field: {\n                  status: 'modified',\n                  previousValue: previous.field,\n                },\n              }),\n              ...(hasDefaultValueChange && {\n                defaultValue: {\n                  status: 'modified',\n                  previousValue: previous.defaultValue,\n                },\n              }),\n            },\n          };\n        },\n      });\n\n      const rules = compareAndUnifyLists(current?.rules || [], previous?.rules || [], {\n        idField: '_id',\n        compareFields: (current, previous) => {\n          const hasDescriptionChange = (current._description ?? '') !== (previous._description ?? '');\n\n          const inputChanges: any = {};\n          inputs.forEach((input) => {\n            if (input._diff?.status === 'added') {\n              inputChanges[input.id] = {\n                status: 'added',\n              };\n            } else if (input._diff?.status === 'removed') {\n              inputChanges[input.id] = {\n                status: 'removed',\n              };\n            } else if ((current?.[input.id] ?? '') !== (previous?.[input.id] ?? '')) {\n              inputChanges[input.id] = {\n                status: 'modified',\n                previousValue: previous?.[input.id],\n              };\n            }\n          });\n\n          const outputChanges: any = {};\n          outputs.forEach((output) => {\n            if (output?._diff?.status === 'added') {\n              outputChanges[output.id] = {\n                status: 'added',\n              };\n            } else if (output?._diff?.status === 'removed') {\n              outputChanges[output.id] = {\n                status: 'removed',\n              };\n            } else if ((current?.[output.id] ?? '') !== (previous?.[output.id] ?? '')) {\n              outputChanges[output.id] = {\n                status: 'modified',\n                previousValue: previous?.[output.id],\n              };\n            }\n          });\n\n          return {\n            hasChanges:\n              hasDescriptionChange || Object.keys(inputChanges).length > 0 || Object.keys(outputChanges).length > 0,\n            fields: {\n              ...(hasDescriptionChange && {\n                _description: {\n                  status: 'modified',\n                  previousValue: previous._description,\n                },\n              }),\n              ...inputChanges,\n              ...outputChanges,\n            },\n          };\n        },\n      });\n\n      draft.inputs = inputs;\n      draft.outputs = outputs;\n      draft.rules = rules;\n\n      if (\n        inputs.find(\n          (input) =>\n            input?._diff?.status === 'modified' ||\n            input?._diff?.status === 'added' ||\n            input?._diff?.status === 'removed',\n        )\n      ) {\n        _.set(fields, 'inputs', {\n          status: 'modified',\n        });\n      }\n\n      if (\n        outputs.find(\n          (output) =>\n            output?._diff?.status === 'modified' ||\n            output?._diff?.status === 'added' ||\n            output?._diff?.status === 'removed',\n        )\n      ) {\n        _.set(fields, 'outputs', {\n          status: 'modified',\n        });\n      }\n\n      if (\n        rules.find(\n          (rule) =>\n            rule?._diff?.status === 'modified' || rule?._diff?.status === 'added' || rule?._diff?.status === 'removed',\n        )\n      ) {\n        _.set(fields, 'rules', {\n          status: 'modified',\n        });\n      }\n\n      if (Object.keys(fields).length > 0) {\n        draft._diff = {\n          status: 'modified',\n          fields,\n        };\n      }\n\n      return draft;\n    });\n  },\n  inferTypes: {\n    needsUpdate: (content, prevContent) => !equal(content, prevContent),\n    determineOutputType: ({ content, input }) => {\n      let nodeInput = input.clone();\n      let determinedType = VariableType.fromJson({ Object: {} });\n      if (content.inputField) {\n        nodeInput = input.calculateType(content.inputField);\n      }\n\n      if (content.executionMode === 'loop') {\n        nodeInput = nodeInput.arrayItem();\n      }\n\n      const outputs = (content?.outputs || []).filter((output) => !!output.field);\n      outputs.forEach((output) => {\n        for (const rule of content.rules) {\n          if (!rule[output.id]) {\n            continue;\n          }\n\n          const calculatedType = nodeInput.calculateType(rule[output.id]);\n          const jsonType = calculatedType.toJson();\n          if (jsonType !== 'Any' && jsonType !== 'Null') {\n            determinedType.set(output.field, calculatedType);\n            return;\n          }\n        }\n\n        determinedType.setJson(output.field, 'Any');\n      });\n\n      if (content.hitPolicy === 'collect') {\n        determinedType = determinedType.toArray();\n      }\n\n      if (content.executionMode === 'loop') {\n        determinedType = determinedType.toArray();\n      }\n\n      if (content.outputPath) {\n        const newType = VariableType.fromJson({ Object: {} });\n        newType.set(content.outputPath, determinedType);\n        determinedType = newType;\n      }\n\n      if (content.passThrough) {\n        determinedType = input.merge(determinedType);\n      }\n\n      return determinedType;\n    },\n  },\n  generateNode: ({ index }) => ({\n    name: `decisionTable${index}`,\n    content: {\n      hitPolicy: 'first',\n      inputs: [\n        {\n          id: crypto.randomUUID(),\n          name: 'Input',\n        },\n      ],\n      outputs: [\n        {\n          id: crypto.randomUUID(),\n          field: 'output',\n          name: 'Output',\n        },\n      ],\n      rules: [],\n      inputField: null,\n      outputPath: null,\n      passThrough: true,\n      executionMode: 'single',\n    },\n  }),\n  renderNode: ({ id, data, selected, specification }) => {\n    const graphActions = useDecisionGraphActions();\n    const { passThrough, executionMode } = useDecisionGraphState(({ decisionGraph }) => {\n      const content = (decisionGraph?.nodes ?? []).find((node) => node.id === id)?.content as NodeDecisionTableData;\n      return {\n        passThrough: content?.passThrough || false,\n        executionMode: content?.executionMode,\n      };\n    });\n\n    return (\n      <GraphNode\n        id={id}\n        specification={specification}\n        name={data.name}\n        isSelected={selected}\n        helper={[executionMode === 'loop' && <SyncOutlined />, passThrough && <ArrowRightOutlined />]}\n        actions={[\n          <Button key='edit-table' type='text' onClick={() => graphActions.openTab(id)}>\n            Edit Table\n          </Button>,\n        ]}\n      />\n    );\n  },\n  renderSettings: ({ id }) => {\n    const graphActions = useDecisionGraphActions();\n    const inputType = useNodeType(id);\n    const { contentDiff } = useNodeDiff(id);\n\n    const { fields, disabled } = useDecisionGraphState(({ decisionGraph, disabled }) => {\n      const content = (decisionGraph?.nodes ?? []).find((node) => node.id === id)?.content as NodeDecisionTableData;\n      return {\n        disabled,\n        fields: {\n          passThrough: content?.passThrough || false,\n          inputField: content?.inputField,\n          outputPath: content?.outputPath,\n          executionMode: content?.executionMode || 'single',\n          hitPolicy: content?.hitPolicy || 'first',\n        },\n      };\n    });\n\n    const updateNode = (data: Partial<NodeDecisionTableData>) => {\n      graphActions.updateNode(id, (draft) => {\n        Object.assign(draft.content, data);\n        return draft;\n      });\n    };\n\n    return (\n      <div className={'settings-form'}>\n        <Form.Item label={'Hit Policy'}>\n          <Space direction={'vertical'} size={2}>\n            <DiffRadio\n              size={'small'}\n              previousValue={contentDiff?.fields?.hitPolicy?.previousValue}\n              displayDiff={contentDiff?.fields?.hitPolicy?.status === 'modified'}\n              disabled={disabled}\n              value={fields?.hitPolicy}\n              onChange={(e) => updateNode({ hitPolicy: e?.target?.value })}\n              options={[\n                {\n                  value: 'first',\n                  label: 'First',\n                },\n                {\n                  value: 'collect',\n                  label: 'Collect',\n                },\n              ]}\n            />\n          </Space>\n        </Form.Item>\n        <Form.Item label='Passthrough'>\n          <DiffSwitch\n            disabled={disabled}\n            size={'small'}\n            displayDiff={contentDiff?.fields?.passThrough?.status === 'modified'}\n            checked={fields?.passThrough}\n            previousChecked={contentDiff?.fields?.passThrough?.previousValue}\n            onChange={(e) => updateNode({ passThrough: e })}\n          />\n        </Form.Item>\n        <Form.Item label='Input field'>\n          <DiffCodeEditor\n            variableType={inputType}\n            disabled={disabled}\n            displayDiff={contentDiff?.fields?.inputField?.status === 'modified'}\n            previousValue={contentDiff?.fields?.inputField?.previousValue}\n            style={{ fontSize: 12, lineHeight: '20px', width: '100%' }}\n            expectedVariableType={fields?.executionMode === 'loop' ? { Array: 'Any' } : undefined}\n            maxRows={4}\n            value={fields?.inputField ?? ''}\n            onChange={(val) => updateNode({ inputField: val?.trim() || null })}\n          />\n        </Form.Item>\n        <Form.Item label='Output path'>\n          <DiffInput\n            size={'small'}\n            readOnly={disabled}\n            displayDiff={contentDiff?.fields?.outputPath?.status === 'modified'}\n            previousValue={contentDiff?.fields?.outputPath?.previousValue}\n            value={fields?.outputPath ?? ''}\n            onChange={(e) => updateNode({ outputPath: e?.target?.value?.trim() || null })}\n          />\n        </Form.Item>\n        <Form.Item label='Execution mode'>\n          <DiffRadio\n            size={'small'}\n            disabled={disabled}\n            displayDiff={contentDiff?.fields?.executionMode?.status === 'modified'}\n            previousValue={contentDiff?.fields?.executionMode?.previousValue}\n            value={fields?.executionMode}\n            onChange={(e) => updateNode({ executionMode: e?.target?.value })}\n            options={[\n              {\n                value: 'single',\n                label: 'Single',\n              },\n              {\n                value: 'loop',\n                label: 'Loop',\n              },\n            ]}\n          />\n        </Form.Item>\n      </div>\n    );\n  },\n};\n","import type { VariableType } from '@gorules/zen-engine-wasm';\nimport equal from 'fast-deep-equal/es6/react';\nimport { produce } from 'immer';\nimport React, { useMemo } from 'react';\nimport type { StoreApi, UseBoundStore } from 'zustand';\nimport { create } from 'zustand';\n\nimport type { SimulationTraceDataExpression } from '../../decision-graph';\nimport type { DiffMetadata } from '../../decision-graph/dg-types';\n\nconst ExpressionStoreContext = React.createContext<\n  UseBoundStore<StoreApi<ExpressionStore>> & {\n    setState: (partial: Partial<ExpressionStore>) => void;\n  }\n>({} as any);\n\nexport type ExpressionEntry = {\n  id: string;\n  key: string;\n  value: string;\n  _diff?: DiffMetadata;\n};\n\nexport type ExpressionStore = {\n  configurable: boolean;\n  disabled: boolean;\n  traceData?: SimulationTraceDataExpression;\n\n  addRowAbove: (index?: number, data?: Partial<ExpressionEntry>) => void;\n  addRowBelow: (index?: number, data?: Partial<ExpressionEntry>) => void;\n\n  expressions: ExpressionEntry[];\n  setExpressions: (expressions: ExpressionEntry[]) => void;\n\n  swapRows: (sourceIndex: number, targetIndex: number) => void;\n  updateRow: (index: number, update: Partial<Omit<ExpressionEntry, 'id'>>) => void;\n  removeRow: (index: number) => void;\n\n  inputVariableType?: VariableType;\n};\n\ntype ExpressionStoreProviderProps = {\n  //\n};\n\nexport const createExpression = (data: Partial<ExpressionEntry> = {}): ExpressionEntry => ({\n  id: crypto.randomUUID(),\n  key: '',\n  value: '',\n  ...data,\n});\n\nexport const ExpressionStoreProvider: React.FC<React.PropsWithChildren<ExpressionStoreProviderProps>> = ({\n  children,\n}) => {\n  const store = useMemo(\n    () =>\n      create<ExpressionStore>((set) => ({\n        configurable: true,\n        disabled: false,\n        addRowAbove: (index = 0) => {\n          set(\n            produce<ExpressionStore>((draft) => {\n              draft.expressions.splice(index, 0, createExpression());\n              return draft;\n            }),\n          );\n        },\n        addRowBelow: (index) => {\n          set(\n            produce<ExpressionStore>((draft) => {\n              index = index ?? draft.expressions.length - 1;\n              draft.expressions.splice(index + 1, 0, createExpression());\n\n              return draft;\n            }),\n          );\n        },\n        expressions: [],\n        setExpressions: (expressions) => {\n          set({ expressions });\n        },\n        swapRows: (sourceIndex, targetIndex) => {\n          set(\n            produce<ExpressionStore>((draft) => {\n              const [input] = draft.expressions.splice(sourceIndex, 1);\n              draft.expressions.splice(targetIndex, 0, input);\n\n              return draft;\n            }),\n          );\n        },\n        removeRow: (index) => {\n          set(\n            produce<ExpressionStore>((draft) => {\n              draft.expressions.splice(index, 1);\n              return draft;\n            }),\n          );\n        },\n        updateRow: (index, update) => {\n          set(\n            produce<ExpressionStore>((draft) => {\n              draft.expressions[index] = {\n                ...draft.expressions[index],\n                ...update,\n              };\n\n              return draft;\n            }),\n          );\n        },\n      })),\n    [],\n  );\n\n  return <ExpressionStoreContext.Provider value={store}>{children}</ExpressionStoreContext.Provider>;\n};\n\nexport function useExpressionStore<T>(\n  selector: (state: ExpressionStore) => T,\n  equals: (a: any, b: any) => boolean = equal,\n): T {\n  return React.useContext(ExpressionStoreContext)(selector, equals);\n}\n\nexport const useExpressionStoreRaw = () => React.useContext(ExpressionStoreContext);\n","import equal from 'fast-deep-equal/es6/react';\nimport type React from 'react';\nimport { useEffect, useRef } from 'react';\n\nimport type { ExpressionEntry } from './context/expression-store.context';\nimport { useExpressionStore, useExpressionStoreRaw } from './context/expression-store.context';\n\nexport type ExpressionControllerProps = {\n  configurable?: boolean;\n  disabled?: boolean;\n  defaultValue?: ExpressionEntry[];\n  value?: ExpressionEntry[];\n  onChange?: (value: ExpressionEntry[]) => void;\n};\n\nexport const ExpressionController: React.FC<ExpressionControllerProps> = ({\n  value,\n  onChange,\n  defaultValue = [],\n  configurable = true,\n  disabled = false,\n}) => {\n  const mounted = useRef<boolean>(false);\n  const store = useExpressionStoreRaw();\n  const { setExpressions, expressions } = useExpressionStore(({ setExpressions, expressions }) => ({\n    setExpressions,\n    expressions,\n  }));\n\n  useEffect(() => {\n    store.setState({\n      configurable,\n      disabled,\n    });\n  }, [configurable, disabled]);\n\n  useEffect(() => {\n    if (!onChange) {\n      return;\n    }\n\n    return store.subscribe((state, prevState) => {\n      if (!equal(state.expressions, prevState.expressions)) {\n        onChange?.(state.expressions);\n      }\n    });\n  }, [store, onChange]);\n\n  useEffect(() => {\n    if (mounted.current && value && !equal(value, expressions)) {\n      setExpressions(value);\n    }\n  }, [value]);\n\n  useEffect(() => {\n    if (value) {\n      setExpressions(value);\n    } else if (defaultValue) {\n      setExpressions(defaultValue);\n    }\n    mounted.current = true;\n  }, []);\n\n  return null;\n};\n","import { DeleteOutlined, MenuOutlined } from '@ant-design/icons';\nimport type { VariableType } from '@gorules/zen-engine-wasm';\nimport type { Row } from '@tanstack/react-table';\nimport { Button, Popconfirm, Typography } from 'antd';\nimport clsx from 'clsx';\nimport React, { useRef } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\n\nimport { DiffIcon } from '../diff-icon';\nimport { DiffCodeEditor } from '../shared/diff-ce';\nimport { DiffInput } from '../shared/diff-input';\nimport type { ExpressionEntry } from './context/expression-store.context';\nimport { useExpressionStore } from './context/expression-store.context';\n\nexport type ExpressionItemProps = {\n  expression: ExpressionEntry;\n  index: number;\n  variableType?: VariableType;\n};\n\nexport const ExpressionItem: React.FC<ExpressionItemProps> = ({ expression, index, variableType }) => {\n  const expressionRef = useRef<HTMLDivElement>(null);\n  const { updateRow, removeRow, swapRows, disabled, configurable } = useExpressionStore(\n    ({ updateRow, removeRow, swapRows, disabled, configurable }) => ({\n      updateRow,\n      removeRow,\n      swapRows,\n      disabled,\n      configurable,\n    }),\n  );\n\n  const onChange = (update: Partial<Omit<ExpressionEntry, 'id'>>) => {\n    updateRow(index, update);\n  };\n\n  const onRemove = () => {\n    removeRow(index);\n  };\n\n  const [{ isDropping, direction }, dropRef] = useDrop({\n    accept: 'row',\n    collect: (monitor) => ({\n      isDropping: monitor.isOver({ shallow: true }),\n      direction: (monitor.getDifferenceFromInitialOffset()?.y || 0) > 0 ? 'down' : 'up',\n    }),\n    drop: (draggedRow: Row<Record<string, string>>) => {\n      swapRows(draggedRow.index, index);\n    },\n  });\n\n  const [{ isDragging }, dragRef, previewRef] = useDrag({\n    canDrag: configurable && !disabled,\n    item: () => ({ ...expression, index }),\n    type: 'row',\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  previewRef(dropRef(expressionRef));\n\n  return (\n    <div\n      ref={expressionRef}\n      className={clsx(\n        'expression-list-item',\n        'expression-list__item',\n        isDropping && direction === 'down' && 'dropping-down',\n        isDropping && direction === 'up' && 'dropping-up',\n        expression?._diff?.status && `expression-list__item--${expression?._diff?.status}`,\n      )}\n      style={{ opacity: !isDragging ? 1 : 0.5 }}\n    >\n      <div ref={dragRef} className='expression-list-item__drag' aria-disabled={!configurable || disabled}>\n        {expression?._diff?.status ? (\n          <DiffIcon\n            status={expression?._diff?.status}\n            style={{\n              fontSize: 16,\n            }}\n          />\n        ) : (\n          <MenuOutlined />\n        )}\n      </div>\n      <div>\n        <DiffInput\n          placeholder='Key'\n          readOnly={!configurable || disabled}\n          displayDiff={expression?._diff?.fields?.key?.status === 'modified'}\n          previousValue={expression?._diff?.fields?.key?.previousValue}\n          value={expression?.key}\n          onChange={(e) => onChange({ key: e.target.value })}\n          autoComplete='off'\n        />\n      </div>\n      <div className='expression-list-item__code'>\n        <DiffCodeEditor\n          placeholder='Expression'\n          maxRows={9}\n          disabled={disabled}\n          value={expression?.value}\n          displayDiff={expression?._diff?.fields?.value?.status === 'modified'}\n          previousValue={expression?._diff?.fields?.value?.previousValue}\n          onChange={(value) => onChange({ value })}\n          variableType={variableType}\n        />\n        <ResultOverlay expression={expression} />\n      </div>\n      <div>\n        <Popconfirm\n          title='Remove selected row?'\n          okText='Remove'\n          onConfirm={onRemove}\n          disabled={!configurable || disabled}\n        >\n          <Button type='text' icon={<DeleteOutlined />} danger disabled={!configurable || disabled} />\n        </Popconfirm>\n      </div>\n    </div>\n  );\n};\n\nconst ResultOverlay: React.FC<{ expression: ExpressionEntry }> = ({ expression }) => {\n  const { trace } = useExpressionStore(({ traceData }) => ({\n    trace: traceData?.[expression.key]?.result,\n  }));\n  if (!trace) {\n    return null;\n  }\n\n  return (\n    <div className='expression-list-item__resultOverlay'>\n      <Typography.Text ellipsis={{ tooltip: trace }} style={{ maxWidth: 120 }}>\n        = {trace as string}\n      </Typography.Text>\n    </div>\n  );\n};\n","import { PlusCircleOutlined } from '@ant-design/icons';\nimport type { VariableType } from '@gorules/zen-engine-wasm';\nimport { Button, Typography } from 'antd';\nimport clsx from 'clsx';\nimport equal from 'fast-deep-equal/es6/react';\nimport React, { useEffect, useState } from 'react';\n\nimport { isWasmAvailable } from '../../helpers/wasm';\nimport { useExpressionStore } from './context/expression-store.context';\nimport { ExpressionItem } from './expression-item';\n\nexport type ExpressionListProps = {\n  //\n};\n\nexport const ExpressionList: React.FC<ExpressionListProps> = ({}) => {\n  const { expressions, addRowBelow, configurable, disabled, inputVariableType } = useExpressionStore(\n    ({ expressions, addRowBelow, configurable, disabled, inputVariableType }) => ({\n      expressions,\n      addRowBelow,\n      configurable,\n      disabled,\n      inputVariableType,\n    }),\n    equal,\n  );\n\n  const [variableType, setVariableType] = useState<VariableType>();\n\n  useEffect(() => {\n    if (!isWasmAvailable() || !inputVariableType) {\n      return;\n    }\n\n    const resultingVariableType = inputVariableType.clone();\n    expressions\n      .filter((e) => e.key.length > 0)\n      .forEach((expr) => {\n        const calculatedType = resultingVariableType.calculateType(expr.value);\n        resultingVariableType.set(`$.${expr.key}`, calculatedType);\n      });\n\n    setVariableType(resultingVariableType);\n  }, [expressions, inputVariableType]);\n\n  return (\n    <div className={'expression-list'}>\n      <div className={clsx('expression-list__item', 'expression-list__item--heading')}>\n        <div />\n        <Typography.Text type='secondary'>Key</Typography.Text>\n        <Typography.Text type='secondary'>Expression</Typography.Text>\n        <div />\n      </div>\n      {(expressions || []).map((expression, index) => (\n        <ExpressionItem key={expression.id} expression={expression} index={index} variableType={variableType} />\n      ))}\n      {configurable && !disabled && (\n        <div className={'expression-list__button-wrapper'}>\n          <Button\n            className='expression-list__button'\n            icon={<PlusCircleOutlined />}\n            type='link'\n            onClick={() => addRowBelow()}\n          >\n            Add row\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { createVariableType } from '@gorules/zen-engine-wasm';\nimport type { DragDropManager } from 'dnd-core';\nimport equal from 'fast-deep-equal/es6/react';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nimport { isWasmAvailable } from '../../helpers/wasm';\nimport type { SimulationTraceDataExpression } from '../decision-graph';\nimport { ExpressionStoreProvider, useExpressionStoreRaw } from './context/expression-store.context';\nimport type { ExpressionControllerProps } from './expression-controller';\nimport { ExpressionController } from './expression-controller';\nimport { ExpressionList } from './expression-list';\nimport './expression.scss';\n\nexport type ExpressionProps = {\n  manager?: DragDropManager;\n  traceData?: SimulationTraceDataExpression;\n  inputData?: unknown;\n} & ExpressionControllerProps;\n\nexport const Expression: React.FC<ExpressionProps> = ({ manager, traceData, inputData, ...props }) => {\n  const [_, setMounted] = useState(false);\n  const container = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  const dndProps = useMemo(() => {\n    if (manager) {\n      return {\n        manager,\n      };\n    }\n\n    return {\n      backend: HTML5Backend,\n      options: {\n        rootElement: container.current,\n      },\n    };\n  }, [container.current, manager]);\n\n  return (\n    <div ref={container}>\n      {container.current && (\n        <DndProvider {...dndProps}>\n          <ExpressionStoreProvider>\n            <ExpressionController {...props} />\n            <ExpressionList />\n            <SimulateDataSync traceData={traceData} inputData={inputData} />\n          </ExpressionStoreProvider>\n        </DndProvider>\n      )}\n    </div>\n  );\n};\n\nconst SimulateDataSync: React.FC<Pick<ExpressionProps, 'traceData' | 'inputData'>> = ({ traceData, inputData }) => {\n  const expressionStoreRaw = useExpressionStoreRaw();\n\n  useEffect(() => {\n    const currentState = expressionStoreRaw.getState();\n\n    if (equal(currentState, traceData)) {\n      return;\n    }\n\n    expressionStoreRaw.setState({ traceData });\n  }, [traceData]);\n\n  useEffect(() => {\n    if (!isWasmAvailable()) {\n      return;\n    }\n\n    expressionStoreRaw.setState({ inputVariableType: createVariableType(inputData) });\n  }, [inputData]);\n\n  return null;\n};\n","import type { DragDropManager } from 'dnd-core';\nimport React, { useMemo } from 'react';\nimport { P, match } from 'ts-pattern';\n\nimport { useNodeType } from '../../../helpers/node-type';\nimport { Expression } from '../../expression';\nimport { useDecisionGraphActions, useDecisionGraphState } from '../context/dg-store.context';\nimport type { NodeExpressionData } from '../nodes/specifications/expression.specification';\nimport type { SimulationTrace, SimulationTraceDataExpression } from '../simulator/simulation.types';\n\nexport type TabExpressionProps = {\n  id: string;\n  manager?: DragDropManager;\n};\n\nexport const TabExpression: React.FC<TabExpressionProps> = ({ id, manager }) => {\n  const graphActions = useDecisionGraphActions();\n  const nodeType = useNodeType(id, { attachGlobals: false });\n  const { disabled, configurable, content, trace, globalType } = useDecisionGraphState(\n    ({ disabled, configurable, decisionGraph, simulate, globalType }) => ({\n      disabled,\n      configurable,\n      content: (decisionGraph?.nodes ?? []).find((node) => node.id === id)?.content as NodeExpressionData,\n      trace:\n        simulate && 'result' in simulate\n          ? (simulate.result?.trace[id] as SimulationTrace<SimulationTraceDataExpression>)\n          : undefined,\n      globalType,\n    }),\n  );\n\n  const computedType = useMemo(() => {\n    if (!nodeType) {\n      return undefined;\n    }\n\n    const computedType = match(content?.inputField)\n      .with(P.string, (inputField) => nodeType.get(inputField))\n      .otherwise(() => nodeType);\n\n    const newType = content?.executionMode === 'loop' ? computedType.arrayItem() : computedType;\n\n    Object.entries(globalType).forEach(([k, v]) => newType.set(k, v));\n    return newType;\n  }, [nodeType, globalType, content?.inputField, content?.executionMode]);\n\n  return (\n    <div style={{ height: '100%', overflowY: 'auto', boxSizing: 'border-box' }}>\n      <Expression\n        traceData={trace?.traceData}\n        value={content?.expressions}\n        disabled={disabled}\n        configurable={configurable}\n        manager={manager}\n        inputData={computedType}\n        onChange={(val) => {\n          graphActions.updateNode(id, (draft) => {\n            draft.content.expressions = val;\n            return draft;\n          });\n        }}\n      />\n    </div>\n  );\n};\n","import { ArrowRightOutlined, NumberOutlined, SyncOutlined } from '@ant-design/icons';\nimport { VariableType } from '@gorules/zen-engine-wasm';\nimport { Button, Form } from 'antd';\nimport equal from 'fast-deep-equal/es6/react';\nimport { produce } from 'immer';\nimport _ from 'lodash';\nimport React from 'react';\nimport type { z } from 'zod';\n\nimport { useNodeType } from '../../../../helpers/node-type';\nimport type { expressionNodeSchema } from '../../../../helpers/schema';\nimport { DiffInput, DiffRadio, DiffSwitch } from '../../../shared';\nimport { DiffCodeEditor } from '../../../shared/diff-ce';\nimport { useDecisionGraphActions, useDecisionGraphState, useNodeDiff } from '../../context/dg-store.context';\nimport { compareAndUnifyLists, compareStringFields } from '../../dg-diff-util';\nimport { type Diff, type DiffMetadata } from '../../dg-types';\nimport { TabExpression } from '../../graph/tab-expression';\nimport { GraphNode } from '../graph-node';\nimport type { NodeDecisionTableData } from './decision-table.specification';\nimport type { NodeSpecification } from './specification-types';\nimport { NodeKind } from './specification-types';\n\nexport type Expression = {\n  id: string;\n  key?: string;\n  value?: string;\n};\n\ntype InferredContent = z.infer<typeof expressionNodeSchema>['content'];\n\nexport type NodeExpressionData = Omit<InferredContent, 'expressions'> &\n  Diff & {\n    expressions: (InferredContent['expressions'][0] & Diff)[];\n  };\n\nexport const expressionSpecification: NodeSpecification<NodeExpressionData> = {\n  type: NodeKind.Expression,\n  icon: <NumberOutlined />,\n  displayName: 'Expression',\n  documentationUrl: 'https://gorules.io/docs/user-manual/decision-modeling/decisions/expression',\n  shortDescription: 'Mapping utility',\n  renderTab: ({ id, manager }) => <TabExpression id={id} manager={manager} />,\n  getDiffContent: (current, previous) => {\n    const newContent = produce(current, (draft) => {\n      const fields: DiffMetadata['fields'] = {};\n\n      if ((current.executionMode || false) !== (previous.executionMode || false)) {\n        _.set(fields, 'executionMode', {\n          status: 'modified',\n          previousValue: previous.executionMode,\n        });\n      }\n\n      if (!compareStringFields(current.inputField, previous.inputField)) {\n        _.set(fields, 'inputField', {\n          status: 'modified',\n          previousValue: previous.inputField,\n        });\n      }\n\n      if (!compareStringFields(current.outputPath, previous.outputPath)) {\n        _.set(fields, 'outputPath', {\n          status: 'modified',\n          previousValue: previous.outputPath,\n        });\n      }\n\n      if ((current.passThrough || false) !== (previous.passThrough || false)) {\n        _.set(fields, 'passThrough', {\n          status: 'modified',\n          previousValue: previous.passThrough,\n        });\n      }\n\n      const expressions = compareAndUnifyLists(current?.expressions || [], previous?.expressions || [], {\n        compareFields: (current, previous) => {\n          const hasKeyChange = !compareStringFields(current.key, previous.key);\n          const hasValueChange = !compareStringFields(current.value, previous.value);\n\n          return {\n            hasChanges: hasKeyChange || hasValueChange,\n            fields: {\n              ...(hasKeyChange && {\n                key: {\n                  status: 'modified',\n                  previousValue: previous.key,\n                },\n              }),\n              ...(hasValueChange && {\n                value: {\n                  status: 'modified',\n                  previousValue: previous.value,\n                },\n              }),\n            },\n          };\n        },\n      });\n\n      draft.expressions = expressions;\n\n      if (\n        expressions.find(\n          (expr) =>\n            expr?._diff?.status === 'modified' || expr?._diff?.status === 'added' || expr?._diff?.status === 'removed',\n        )\n      ) {\n        _.set(fields, 'expressions', {\n          status: 'modified',\n        });\n      }\n\n      if (Object.keys(fields).length > 0) {\n        draft._diff = {\n          status: 'modified',\n          fields,\n        };\n      }\n\n      return draft;\n    });\n    return newContent;\n  },\n  inferTypes: {\n    needsUpdate: (content, prevContent) => !equal(content, prevContent),\n    determineOutputType: ({ input, content }) => {\n      let nodeInput = input.clone();\n      let determinedType = VariableType.fromJson({ Object: {} });\n      if (content.inputField) {\n        nodeInput = input.calculateType(content.inputField);\n      }\n\n      if (content.executionMode === 'loop') {\n        nodeInput = nodeInput.arrayItem();\n      }\n\n      (content.expressions || []).forEach((expression) => {\n        if (!expression.key || !expression.value) {\n          return;\n        }\n\n        const calculatedType = nodeInput.calculateType(expression.value);\n\n        nodeInput.set(`$.${expression.key}`, calculatedType);\n        determinedType.set(expression.key, calculatedType);\n      });\n\n      if (content.executionMode === 'loop') {\n        determinedType = determinedType.toArray();\n      }\n\n      if (content.outputPath) {\n        const newType = VariableType.fromJson({ Object: {} });\n        newType.set(content.outputPath, determinedType);\n        determinedType = newType;\n      }\n\n      if (content.passThrough) {\n        determinedType = input.merge(determinedType);\n      }\n\n      return determinedType;\n    },\n  },\n  generateNode: ({ index }) => ({\n    name: `expression${index}`,\n    content: {\n      inputField: null,\n      outputPath: null,\n      expressions: [],\n      passThrough: true,\n      executionMode: 'single',\n    },\n  }),\n  renderNode: ({ id, data, selected, specification }) => {\n    const graphActions = useDecisionGraphActions();\n    const { passThrough, executionMode } = useDecisionGraphState(({ decisionGraph }) => {\n      const content = (decisionGraph?.nodes ?? []).find((node) => node.id === id)?.content as NodeExpressionData;\n      return {\n        passThrough: content?.passThrough || false,\n        executionMode: content?.executionMode,\n      };\n    });\n\n    return (\n      <GraphNode\n        id={id}\n        specification={specification}\n        name={data.name}\n        isSelected={selected}\n        actions={[\n          <Button key='edit-table' type='text' onClick={() => graphActions.openTab(id)}>\n            Edit Expression\n          </Button>,\n        ]}\n        helper={[executionMode === 'loop' && <SyncOutlined />, passThrough && <ArrowRightOutlined />]}\n      />\n    );\n  },\n  renderSettings: ({ id }) => {\n    const graphActions = useDecisionGraphActions();\n    const inputType = useNodeType(id);\n    const { contentDiff } = useNodeDiff(id);\n    const { fields, disabled } = useDecisionGraphState(({ decisionGraph, disabled }) => {\n      const content = (decisionGraph?.nodes ?? []).find((node) => node.id === id)?.content as NodeDecisionTableData;\n      return {\n        disabled,\n        fields: {\n          passThrough: content?.passThrough || false,\n          inputField: content?.inputField,\n          outputPath: content?.outputPath,\n          executionMode: content?.executionMode || 'single',\n        },\n      };\n    });\n\n    const updateNode = (data: Partial<NodeExpressionData>) => {\n      graphActions.updateNode(id, (draft) => {\n        Object.assign(draft.content, data);\n        return draft;\n      });\n    };\n\n    return (\n      <div className={'settings-form'}>\n        <Form.Item label='Passthrough'>\n          <DiffSwitch\n            disabled={disabled}\n            size={'small'}\n            displayDiff={contentDiff?.fields?.passThrough?.status === 'modified'}\n            checked={fields?.passThrough}\n            previousChecked={contentDiff?.fields?.passThrough?.previousValue}\n            onChange={(e) => updateNode({ passThrough: e })}\n          />\n        </Form.Item>\n        <Form.Item label='Input field'>\n          <DiffCodeEditor\n            variableType={inputType}\n            disabled={disabled}\n            displayDiff={contentDiff?.fields?.inputField?.status === 'modified'}\n            previousValue={contentDiff?.fields?.inputField?.previousValue}\n            style={{ fontSize: 12, lineHeight: '20px', width: '100%' }}\n            expectedVariableType={fields?.executionMode === 'loop' ? { Array: 'Any' } : undefined}\n            maxRows={4}\n            value={fields?.inputField ?? ''}\n            onChange={(val) => {\n              updateNode({ inputField: val?.trim() || null });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label='Output path'>\n          <DiffInput\n            size={'small'}\n            readOnly={disabled}\n            displayDiff={contentDiff?.fields?.outputPath?.status === 'modified'}\n            previousValue={contentDiff?.fields?.outputPath?.previousValue}\n            value={fields?.outputPath ?? ''}\n            onChange={(e) => updateNode({ outputPath: e?.target?.value?.trim() || null })}\n          />\n        </Form.Item>\n        <Form.Item label='Execution mode'>\n          <DiffRadio\n            size={'small'}\n            disabled={disabled}\n            displayDiff={contentDiff?.fields?.executionMode?.status === 'modified'}\n            previousValue={contentDiff?.fields?.executionMode?.previousValue}\n            value={fields?.executionMode}\n            onChange={(e) => updateNode({ executionMode: e?.target?.value })}\n            options={[\n              {\n                value: 'single',\n                label: 'Single',\n              },\n              {\n                value: 'loop',\n                label: 'Loop',\n              },\n            ]}\n          />\n        </Form.Item>\n      </div>\n    );\n  },\n};\n","export default \"declare namespace Big {\\n    type BigSource = number | string | Big;\\n\\n    /**\\n     * GT = 1, EQ = 0, LT = -1\\n     */\\n    type Comparison = -1 | 0 | 1;\\n\\n    /**\\n     * RoundDown = 0, RoundHalfUp = 1, RoundHalfEven = 2, RoundUp = 3\\n     */\\n    type RoundingMode = 0 | 1 | 2 | 3;\\n\\n    interface BigConstructor {\\n        /**\\n         * Returns a new instance of a Big number object\\n         *\\n         * String values may be in exponential, as well as normal (non-exponential) notation.\\n         * There is no limit to the number of digits of a string value (other than that of Javascript's maximum array size), but the largest recommended exponent magnitude is 1e+6.\\n         * Infinity, NaN and hexadecimal literal strings, e.g. '0xff', are not valid.\\n         * String values in octal literal form will be interpreted as decimals, e.g. '011' is 11, not 9.\\n         *\\n         * @throws `NaN` on an invalid value.\\n         */\\n        new(value: BigSource): Big;\\n\\n        /**\\n         * Returns a new instance of a Big number object\\n         *\\n         * String values may be in exponential, as well as normal (non-exponential) notation.\\n         * There is no limit to the number of digits of a string value (other than that of Javascript's maximum array size), but the largest recommended exponent magnitude is 1e+6.\\n         * Infinity, NaN and hexadecimal literal strings, e.g. '0xff', are not valid.\\n         * String values in octal literal form will be interpreted as decimals, e.g. '011' is 11, not 9.\\n         *\\n         * @throws `NaN` on an invalid value.\\n         */\\n        (value: BigSource): Big;\\n\\n        /**\\n         * Create an additional Big number constructor\\n         *\\n         * Values created with the returned constructor will have a separate set of configuration values.\\n         * This can be used to create Big objects with different DP and RM values.\\n         * Big numbers created by different constructors can be used together in operations, and it is the DP and RM setting of the Big number that an operation is called upon that will apply.\\n         * In the interest of memory efficiency, all Big number constructors share the same prototype object,\\n         * so while the DP and RM (and any other own properties) of a constructor are isolated and untouchable by another, its prototype methods are not.\\n         */\\n        (): BigConstructor;\\n\\n        /**\\n         * The maximum number of decimal places of the results of operations involving division.\\n         * It is relevant only to the div and sqrt methods, and the pow method when the exponent is negative.\\n         *\\n         * 0 to 1e+6 inclusive\\n         * Default value: 20\\n         */\\n        DP: number;\\n        /**\\n         * The rounding mode used in the above operations and by round, toExponential, toFixed and toPrecision.\\n         * Default value: 1\\n         */\\n        RM: number;\\n        /**\\n         * The negative exponent value at and below which toString returns exponential notation.\\n         *\\n         * -1e+6 to 0 inclusive\\n         * Default value: -7\\n         */\\n        NE: number;\\n        /**\\n         * The positive exponent value at and above which toString returns exponential notation.\\n         *\\n         * 0 to 1e+6 inclusive\\n         * Default value: 21\\n         */\\n        PE: number;\\n        /**\\n         * When set to true, an error will be thrown if a primitive number is passed to the Big constructor,\\n         * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a primitive number without a loss of precision.\\n         *\\n         * true|false\\n         * Default value: false\\n         */\\n        strict: boolean;\\n\\n        /** Readonly rounding modes */\\n\\n        /**\\n         * Rounds towards zero.\\n         * I.e. truncate, no rounding.\\n         */\\n        readonly roundDown: 0;\\n        /**\\n         * Rounds towards nearest neighbour.\\n         * If equidistant, rounds away from zero.\\n         */\\n        readonly roundHalfUp: 1;\\n        /**\\n         * Rounds towards nearest neighbour.\\n         * If equidistant, rounds towards even neighbour.\\n         */\\n        readonly roundHalfEven: 2;\\n        /**\\n         * Rounds away from zero.\\n         */\\n        readonly roundUp: 3;\\n\\n        readonly Big: BigConstructor;\\n    }\\n\\n    interface Big {\\n        /** Returns a Big number whose value is the absolute value, i.e. the magnitude, of this Big number. */\\n        abs(): Big;\\n        /**\\n         * Returns a Big number whose value is the value of this Big number plus n - alias for .plus().\\n         *\\n         * @throws `NaN` if n is invalid.\\n         */\\n        add(n: BigSource): Big;\\n        /**\\n         * Compare the values.\\n         *\\n         * @throws `NaN` if n is invalid.\\n         */\\n        cmp(n: BigSource): Comparison;\\n        /**\\n         * Returns a Big number whose value is the value of this Big number divided by n.\\n         *\\n         * If the result has more fraction digits than is specified by Big.DP, it will be rounded to Big.DP decimal places using rounding mode Big.RM.\\n         *\\n         * @throws `NaN` if n is invalid.\\n         * @throws `±Infinity` on division by zero.\\n         * @throws `NaN` on division of zero by zero.\\n         */\\n        div(n: BigSource): Big;\\n        /**\\n         * Returns true if the value of this Big equals the value of n, otherwise returns false.\\n         *\\n         * @throws `NaN` if n is invalid.\\n         */\\n        eq(n: BigSource): boolean;\\n        /**\\n         * Returns true if the value of this Big is greater than the value of n, otherwise returns false.\\n         *\\n         * @throws `NaN` if n is invalid.\\n         */\\n        gt(n: BigSource): boolean;\\n        /**\\n         * Returns true if the value of this Big is greater than or equal to the value of n, otherwise returns false.\\n         *\\n         * @throws `NaN` if n is invalid.\\n         */\\n        gte(n: BigSource): boolean;\\n        /**\\n         * Returns true if the value of this Big is less than the value of n, otherwise returns false.\\n         *\\n         * @throws `NaN` if n is invalid.\\n         */\\n        lt(n: BigSource): boolean;\\n        /**\\n         * Returns true if the value of this Big is less than or equal to the value of n, otherwise returns false.\\n         *\\n         * @throws `NaN` if n is invalid.\\n         */\\n        lte(n: BigSource): boolean;\\n        /**\\n         * Returns a Big number whose value is the value of this Big number minus n.\\n         *\\n         * @throws `NaN` if n is invalid.\\n         */\\n        minus(n: BigSource): Big;\\n        /**\\n         * Returns a Big number whose value is the value of this Big number modulo n, i.e. the integer remainder of dividing this Big number by n.\\n         *\\n         * The result will have the same sign as this Big number, and it will match that of Javascript's % operator (within the limits of its precision) and BigDecimal's remainder method.\\n         *\\n         * @throws `NaN` if n is negative or otherwise invalid.\\n         */\\n        mod(n: BigSource): Big;\\n        /**\\n         * Returns a Big number whose value is the value of this Big number times n - alias for .times().\\n         *\\n         * @throws `NaN` if n is invalid.\\n         */\\n        mul(n: BigSource): Big;\\n        /**\\n         * Return a new Big whose value is the value of this Big negated.\\n         */\\n        neg(): Big;\\n        /**\\n         * Returns a Big number whose value is the value of this Big number plus n.\\n         *\\n         * @throws `NaN` if n is invalid.\\n         */\\n        plus(n: BigSource): Big;\\n        /**\\n         * Returns a Big number whose value is the value of this Big number raised to the power exp.\\n         *\\n         * If exp is negative and the result has more fraction digits than is specified by Big.DP, it will be rounded to Big.DP decimal places using rounding mode Big.RM.\\n         *\\n         * @param exp The power to raise the number to, -1e+6 to 1e+6 inclusive\\n         * @throws `!pow!` if exp is invalid.\\n         *\\n         * Note: High value exponents may cause this method to be slow to return.\\n         */\\n        pow(exp: number): Big;\\n        /**\\n         * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd\\n         * significant digits using rounding mode rm, or Big.RM if rm is not specified.\\n         *\\n         * @param sd Significant digits: integer, 1 to MAX_DP inclusive.\\n         * @param rm Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\\n         * @throws `!prec!` if sd is invalid.\\n         * @throws `!Big.RM!` if rm is invalid.\\n         */\\n        prec(sd: number, rm?: RoundingMode): Big;\\n        /**\\n         * Returns a Big number whose value is the value of this Big number rounded using rounding mode rm to a maximum of dp decimal places.\\n         *\\n         * @param dp Decimal places, 0 to 1e+6 inclusive\\n         * @param rm Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\\n         * @throws `!round!` if dp is invalid.\\n         * @throws `!Big.RM!` if rm is invalid.\\n         */\\n        round(dp?: number, rm?: RoundingMode): Big;\\n        /**\\n         * Returns a Big number whose value is the square root of this Big number.\\n         *\\n         * If the result has more fraction digits than is specified by Big.DP, it will be rounded to Big.DP decimal places using rounding mode Big.RM.\\n         *\\n         * @throws `NaN` if this Big number is negative.\\n         */\\n        sqrt(): Big;\\n        /**\\n         * Returns a Big number whose value is the value of this Big number minus n - alias for .minus().\\n         *\\n         * @throws `NaN` if n is invalid.\\n         */\\n        sub(n: BigSource): Big;\\n        /**\\n         * Returns a Big number whose value is the value of this Big number times n.\\n         *\\n         * @throws `NaN` if n is invalid.\\n         */\\n        times(n: BigSource): Big;\\n        /**\\n         * Returns a string representing the value of this Big number in exponential notation to a fixed number of decimal places dp.\\n         *\\n         * If the value of this Big number in exponential notation has more digits to the right of the decimal point than is specified by dp,\\n         * the return value will be rounded to dp decimal places using rounding mode Big.RM.\\n         *\\n         * If the value of this Big number in exponential notation has fewer digits to the right of the decimal point than is specified by dp, the return value will be appended with zeros accordingly.\\n         *\\n         * If dp is omitted, or is null or undefined, the number of digits after the decimal point defaults to the minimum number of digits necessary to represent the value exactly.\\n         *\\n         * @param dp Decimal places, 0 to 1e+6 inclusive\\n         * @param rm Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\\n         * @throws `!toFix!` if dp is invalid.\\n         */\\n        toExponential(dp?: number, rm?: RoundingMode): string;\\n        /**\\n         * Returns a string representing the value of this Big number in normal notation to a fixed number of decimal places dp.\\n         *\\n         * If the value of this Big number in normal notation has more digits to the right of the decimal point than is specified by dp,\\n         * the return value will be rounded to dp decimal places using rounding mode Big.RM.\\n         *\\n         * If the value of this Big number in normal notation has fewer fraction digits then is specified by dp, the return value will be appended with zeros accordingly.\\n         *\\n         * Unlike Number.prototype.toFixed, which returns exponential notation if a number is greater or equal to 1021, this method will always return normal notation.\\n         *\\n         * If dp is omitted, or is null or undefined, then the return value is simply the value in normal notation.\\n         * This is also unlike Number.prototype.toFixed, which returns the value to zero decimal places.\\n         *\\n         * @param dp Decimal places, 0 to 1e+6 inclusive\\n         * @param rm Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\\n         * @throws `!toFix!` if dp is invalid.\\n         */\\n        toFixed(dp?: number, rm?: RoundingMode): string;\\n        /**\\n         * Returns a string representing the value of this Big number to the specified number of significant digits sd.\\n         *\\n         * If the value of this Big number has more digits than is specified by sd, the return value will be rounded to sd significant digits using rounding mode Big.RM.\\n         *\\n         * If the value of this Big number has fewer digits than is specified by sd, the return value will be appended with zeros accordingly.\\n         *\\n         * If sd is less than the number of digits necessary to represent the integer part of the value in normal notation, then exponential notation is used.\\n         *\\n         * If sd is omitted, or is null or undefined, then the return value is the same as .toString().\\n         *\\n         * @param sd Significant digits, 1 to 1e+6 inclusive\\n         * @param rm Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\\n         * @throws `!toPre!` if sd is invalid.\\n         */\\n        toPrecision(sd?: number, rm?: RoundingMode): string;\\n        /**\\n         * Returns a string representing the value of this Big number.\\n         *\\n         * If this Big number has a positive exponent that is equal to or greater than 21, or a negative exponent equal to or less than -7, then exponential notation is returned.\\n         *\\n         * The point at which toString returns exponential rather than normal notation can be adjusted by changing\\n         * the value of Big.E_POS and Big.E_NEG. By default, Big numbers correspond to Javascript's number type in this regard.\\n         */\\n        toString(): string;\\n        /**\\n         * Returns a primitive number representing the value of this Big number.\\n         *\\n         * If Big.strict is true an error will be thrown if toNumber is called on a Big number which cannot be converted to a primitive number without a loss of precision.\\n         *\\n         * @since 6.0\\n         */\\n        toNumber(): number;\\n        /**\\n         * Returns a string representing the value of this Big number.\\n         *\\n         * If this Big number has a positive exponent that is equal to or greater than 21, or a negative exponent equal to or less than -7, then exponential notation is returned.\\n         *\\n         * The point at which toString returns exponential rather than normal notation can be adjusted by changing\\n         * the value of Big.E_POS and Big.E_NEG. By default, Big numbers correspond to Javascript's number type in this regard.\\n         */\\n        valueOf(): string;\\n        /**\\n         * Returns a string representing the value of this Big number.\\n         *\\n         * If this Big number has a positive exponent that is equal to or greater than 21, or a negative exponent equal to or less than -7, then exponential notation is returned.\\n         *\\n         * The point at which toString returns exponential rather than normal notation can be adjusted by changing\\n         * the value of Big.E_POS and Big.E_NEG. By default, Big numbers correspond to Javascript's number type in this regard.\\n         */\\n        toJSON(): string;\\n        /**\\n         * Returns an array of single digits\\n         */\\n        c: number[];\\n        /**\\n         * Returns the exponent, Integer, -1e+6 to 1e+6 inclusive\\n         */\\n        e: number;\\n        /**\\n         * Returns the sign, -1 or 1\\n         */\\n        s: number;\\n    }\\n}\\n\\n// We want the exported symbol 'Big' to represent two things:\\n// - The Big interface, when used in a type context.\\n// - The BigConstructor instance, when used in a value context.\\ndeclare const Big: Big.BigConstructor;\\ntype Big = Big.Big;\\n\\n// The export is the same as type/value combo symbol 'Big'.\\nexport = Big;\\nexport as namespace Big;\\n\"","export default \"/// <reference path=\\\"./locale/index.d.ts\\\" />\\n\\nexport = dayjs;\\n\\ndeclare function dayjs (date?: dayjs.ConfigType): dayjs.Dayjs\\n\\ndeclare function dayjs (date?: dayjs.ConfigType, format?: dayjs.OptionType, strict?: boolean): dayjs.Dayjs\\n\\ndeclare function dayjs (date?: dayjs.ConfigType, format?: dayjs.OptionType, locale?: string, strict?: boolean): dayjs.Dayjs\\n\\ndeclare namespace dayjs {\\n  interface ConfigTypeMap {\\n    default: string | number | Date | Dayjs | null | undefined\\n  }\\n\\n  export type ConfigType = ConfigTypeMap[keyof ConfigTypeMap]\\n\\n  export interface FormatObject { locale?: string, format?: string, utc?: boolean }\\n\\n  export type OptionType = FormatObject | string | string[]\\n\\n  export type UnitTypeShort = 'd' | 'D' | 'M' | 'y' | 'h' | 'm' | 's' | 'ms'\\n\\n  export type UnitTypeLong = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'month' | 'year' | 'date'\\n\\n  export type UnitTypeLongPlural = 'milliseconds' | 'seconds' | 'minutes' | 'hours' | 'days' | 'months' | 'years' | 'dates'\\n  \\n  export type UnitType = UnitTypeLong | UnitTypeLongPlural | UnitTypeShort;\\n\\n  export type OpUnitType = UnitType | \\\"week\\\" | \\\"weeks\\\" | 'w';\\n  export type QUnitType = UnitType | \\\"quarter\\\" | \\\"quarters\\\" | 'Q';\\n  export type ManipulateType = Exclude<OpUnitType, 'date' | 'dates'>;\\n  class Dayjs {\\n    constructor (config?: ConfigType)\\n    /**\\n     * All Day.js objects are immutable. Still, `dayjs#clone` can create a clone of the current object if you need one.\\n     * ```\\n     * dayjs().clone()// => Dayjs\\n     * dayjs(dayjs('2019-01-25')) // passing a Dayjs object to a constructor will also clone it\\n     * ```\\n     * Docs: https://day.js.org/docs/en/parse/dayjs-clone\\n     */\\n    clone(): Dayjs\\n    /**\\n     * This returns a `boolean` indicating whether the Day.js object contains a valid date or not.\\n     * ```\\n     * dayjs().isValid()// => boolean\\n     * ```\\n     * Docs: https://day.js.org/docs/en/parse/is-valid\\n     */\\n    isValid(): boolean\\n    /**\\n     * Get the year.\\n     * ```\\n     * dayjs().year()// => 2020\\n     * ```\\n     * Docs: https://day.js.org/docs/en/get-set/year\\n     */\\n    year(): number\\n    /**\\n     * Set the year.\\n     * ```\\n     * dayjs().year(2000)// => Dayjs\\n     * ```\\n     * Docs: https://day.js.org/docs/en/get-set/year\\n     */\\n    year(value: number): Dayjs\\n    /**\\n     * Get the month.\\n     *\\n     * Months are zero indexed, so January is month 0.\\n     * ```\\n     * dayjs().month()// => 0-11\\n     * ```\\n     * Docs: https://day.js.org/docs/en/get-set/month\\n     */\\n    month(): number\\n    /**\\n     * Set the month.\\n     *\\n     * Months are zero indexed, so January is month 0.\\n     *\\n     * Accepts numbers from 0 to 11. If the range is exceeded, it will bubble up to the next year.\\n     * ```\\n     * dayjs().month(0)// => Dayjs\\n     * ```\\n     * Docs: https://day.js.org/docs/en/get-set/month\\n     */\\n    month(value: number): Dayjs\\n    /**\\n     * Get the date of the month.\\n     * ```\\n     * dayjs().date()// => 1-31\\n     * ```\\n     * Docs: https://day.js.org/docs/en/get-set/date\\n     */\\n    date(): number\\n    /**\\n     * Set the date of the month.\\n     *\\n     * Accepts numbers from 1 to 31. If the range is exceeded, it will bubble up to the next months.\\n     * ```\\n     * dayjs().date(1)// => Dayjs\\n     * ```\\n     * Docs: https://day.js.org/docs/en/get-set/date\\n     */\\n    date(value: number): Dayjs\\n    /**\\n     * Get the day of the week.\\n     *\\n     * Returns numbers from 0 (Sunday) to 6 (Saturday).\\n     * ```\\n     * dayjs().day()// 0-6\\n     * ```\\n     * Docs: https://day.js.org/docs/en/get-set/day\\n     */\\n    day(): 0 | 1 | 2 | 3 | 4 | 5 | 6\\n    /**\\n     * Set the day of the week.\\n     *\\n     * Accepts numbers from 0 (Sunday) to 6 (Saturday). If the range is exceeded, it will bubble up to next weeks.\\n     * ```\\n     * dayjs().day(0)// => Dayjs\\n     * ```\\n     * Docs: https://day.js.org/docs/en/get-set/day\\n     */\\n    day(value: number): Dayjs\\n    /**\\n     * Get the hour.\\n     * ```\\n     * dayjs().hour()// => 0-23\\n     * ```\\n     * Docs: https://day.js.org/docs/en/get-set/hour\\n     */\\n    hour(): number\\n    /**\\n     * Set the hour.\\n     *\\n     * Accepts numbers from 0 to 23. If the range is exceeded, it will bubble up to the next day.\\n     * ```\\n     * dayjs().hour(12)// => Dayjs\\n     * ```\\n     * Docs: https://day.js.org/docs/en/get-set/hour\\n     */\\n    hour(value: number): Dayjs\\n    /**\\n     * Get the minutes.\\n     * ```\\n     * dayjs().minute()// => 0-59\\n     * ```\\n     * Docs: https://day.js.org/docs/en/get-set/minute\\n     */\\n    minute(): number\\n    /**\\n     * Set the minutes.\\n     *\\n     * Accepts numbers from 0 to 59. If the range is exceeded, it will bubble up to the next hour.\\n     * ```\\n     * dayjs().minute(59)// => Dayjs\\n     * ```\\n     * Docs: https://day.js.org/docs/en/get-set/minute\\n     */\\n    minute(value: number): Dayjs\\n    /**\\n     * Get the seconds.\\n     * ```\\n     * dayjs().second()// => 0-59\\n     * ```\\n     * Docs: https://day.js.org/docs/en/get-set/second\\n     */\\n    second(): number\\n    /**\\n     * Set the seconds.\\n     *\\n     * Accepts numbers from 0 to 59. If the range is exceeded, it will bubble up to the next minutes.\\n     * ```\\n     * dayjs().second(1)// Dayjs\\n     * ```\\n     */\\n    second(value: number): Dayjs\\n    /**\\n     * Get the milliseconds.\\n     * ```\\n     * dayjs().millisecond()// => 0-999\\n     * ```\\n     * Docs: https://day.js.org/docs/en/get-set/millisecond\\n     */\\n    millisecond(): number\\n    /**\\n     * Set the milliseconds.\\n     *\\n     * Accepts numbers from 0 to 999. If the range is exceeded, it will bubble up to the next seconds.\\n     * ```\\n     * dayjs().millisecond(1)// => Dayjs\\n     * ```\\n     * Docs: https://day.js.org/docs/en/get-set/millisecond\\n     */\\n    millisecond(value: number): Dayjs\\n    /**\\n     * Generic setter, accepting unit as first argument, and value as second, returns a new instance with the applied changes.\\n     *\\n     * In general:\\n     * ```\\n     * dayjs().set(unit, value) === dayjs()[unit](value)\\n     * ```\\n     * Units are case insensitive, and support plural and short forms.\\n     * ```\\n     * dayjs().set('date', 1)\\n     * dayjs().set('month', 3) // April\\n     * dayjs().set('second', 30)\\n     * ```\\n     * Docs: https://day.js.org/docs/en/get-set/set\\n     */\\n    set(unit: UnitType, value: number): Dayjs\\n    /**\\n     * String getter, returns the corresponding information getting from Day.js object.\\n     *\\n     * In general:\\n     * ```\\n     * dayjs().get(unit) === dayjs()[unit]()\\n     * ```\\n     * Units are case insensitive, and support plural and short forms.\\n     * ```\\n     * dayjs().get('year')\\n     * dayjs().get('month') // start 0\\n     * dayjs().get('date')\\n     * ```\\n     * Docs: https://day.js.org/docs/en/get-set/get\\n     */\\n    get(unit: UnitType): number\\n    /**\\n     * Returns a cloned Day.js object with a specified amount of time added.\\n     * ```\\n     * dayjs().add(7, 'day')// => Dayjs\\n     * ```\\n     * Units are case insensitive, and support plural and short forms.\\n     *\\n     * Docs: https://day.js.org/docs/en/manipulate/add\\n     */\\n    add(value: number, unit?: ManipulateType): Dayjs\\n    /**\\n     * Returns a cloned Day.js object with a specified amount of time subtracted.\\n     * ```\\n     * dayjs().subtract(7, 'year')// => Dayjs\\n     * ```\\n     * Units are case insensitive, and support plural and short forms.\\n     *\\n     * Docs: https://day.js.org/docs/en/manipulate/subtract\\n     */\\n    subtract(value: number, unit?: ManipulateType): Dayjs\\n    /**\\n     * Returns a cloned Day.js object and set it to the start of a unit of time.\\n     * ```\\n     * dayjs().startOf('year')// => Dayjs\\n     * ```\\n     * Units are case insensitive, and support plural and short forms.\\n     *\\n     * Docs: https://day.js.org/docs/en/manipulate/start-of\\n     */\\n    startOf(unit: OpUnitType): Dayjs\\n    /**\\n     * Returns a cloned Day.js object and set it to the end of a unit of time.\\n     * ```\\n     * dayjs().endOf('month')// => Dayjs\\n     * ```\\n     * Units are case insensitive, and support plural and short forms.\\n     *\\n     * Docs: https://day.js.org/docs/en/manipulate/end-of\\n     */\\n    endOf(unit: OpUnitType): Dayjs\\n    /**\\n     * Get the formatted date according to the string of tokens passed in.\\n     *\\n     * To escape characters, wrap them in square brackets (e.g. [MM]).\\n     * ```\\n     * dayjs().format()// => current date in ISO8601, without fraction seconds e.g. '2020-04-02T08:02:17-05:00'\\n     * dayjs('2019-01-25').format('[YYYYescape] YYYY-MM-DDTHH:mm:ssZ[Z]')// 'YYYYescape 2019-01-25T00:00:00-02:00Z'\\n     * dayjs('2019-01-25').format('DD/MM/YYYY') // '25/01/2019'\\n     * ```\\n     * Docs: https://day.js.org/docs/en/display/format\\n     */\\n    format(template?: string): string\\n    /**\\n     * This indicates the difference between two date-time in the specified unit.\\n     *\\n     * To get the difference in milliseconds, use `dayjs#diff`\\n     * ```\\n     * const date1 = dayjs('2019-01-25')\\n     * const date2 = dayjs('2018-06-05')\\n     * date1.diff(date2) // 20214000000 default milliseconds\\n     * date1.diff() // milliseconds to current time\\n     * ```\\n     *\\n     * To get the difference in another unit of measurement, pass that measurement as the second argument.\\n     * ```\\n     * const date1 = dayjs('2019-01-25')\\n     * date1.diff('2018-06-05', 'month') // 7\\n     * ```\\n     * Units are case insensitive, and support plural and short forms.\\n     *\\n     * Docs: https://day.js.org/docs/en/display/difference\\n     */\\n    diff(date?: ConfigType, unit?: QUnitType | OpUnitType, float?: boolean): number\\n    /**\\n     * This returns the number of **milliseconds** since the Unix Epoch of the Day.js object.\\n     * ```\\n     * dayjs('2019-01-25').valueOf() // 1548381600000\\n     * +dayjs(1548381600000) // 1548381600000\\n     * ```\\n     * To get a Unix timestamp (the number of seconds since the epoch) from a Day.js object, you should use Unix Timestamp `dayjs#unix()`.\\n     *\\n     * Docs: https://day.js.org/docs/en/display/unix-timestamp-milliseconds\\n     */\\n    valueOf(): number\\n    /**\\n     * This returns the Unix timestamp (the number of **seconds** since the Unix Epoch) of the Day.js object.\\n     * ```\\n     * dayjs('2019-01-25').unix() // 1548381600\\n     * ```\\n     * This value is floored to the nearest second, and does not include a milliseconds component.\\n     *\\n     * Docs: https://day.js.org/docs/en/display/unix-timestamp\\n     */\\n    unix(): number\\n    /**\\n     * Get the number of days in the current month.\\n     * ```\\n     * dayjs('2019-01-25').daysInMonth() // 31\\n     * ```\\n     * Docs: https://day.js.org/docs/en/display/days-in-month\\n     */\\n    daysInMonth(): number\\n    /**\\n     * To get a copy of the native `Date` object parsed from the Day.js object use `dayjs#toDate`.\\n     * ```\\n     * dayjs('2019-01-25').toDate()// => Date\\n     * ```\\n     */\\n    toDate(): Date\\n    /**\\n     * To serialize as an ISO 8601 string.\\n     * ```\\n     * dayjs('2019-01-25').toJSON() // '2019-01-25T02:00:00.000Z'\\n     * ```\\n     * Docs: https://day.js.org/docs/en/display/as-json\\n     */\\n    toJSON(): string\\n    /**\\n     * To format as an ISO 8601 string.\\n     * ```\\n     * dayjs('2019-01-25').toISOString() // '2019-01-25T02:00:00.000Z'\\n     * ```\\n     * Docs: https://day.js.org/docs/en/display/as-iso-string\\n     */\\n    toISOString(): string\\n    /**\\n     * Returns a string representation of the date.\\n     * ```\\n     * dayjs('2019-01-25').toString() // 'Fri, 25 Jan 2019 02:00:00 GMT'\\n     * ```\\n     * Docs: https://day.js.org/docs/en/display/as-string\\n     */\\n    toString(): string\\n    /**\\n     * Get the UTC offset in minutes.\\n     * ```\\n     * dayjs().utcOffset()\\n     * ```\\n     * Docs: https://day.js.org/docs/en/manipulate/utc-offset\\n     */\\n    utcOffset(): number\\n    /**\\n     * This indicates whether the Day.js object is before the other supplied date-time.\\n     * ```\\n     * dayjs().isBefore(dayjs('2011-01-01')) // default milliseconds\\n     * ```\\n     * If you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\\n     * ```\\n     * dayjs().isBefore('2011-01-01', 'year')// => boolean\\n     * ```\\n     * Units are case insensitive, and support plural and short forms.\\n     *\\n     * Docs: https://day.js.org/docs/en/query/is-before\\n     */\\n    isBefore(date?: ConfigType, unit?: OpUnitType): boolean\\n    /**\\n     * This indicates whether the Day.js object is the same as the other supplied date-time.\\n     * ```\\n     * dayjs().isSame(dayjs('2011-01-01')) // default milliseconds\\n     * ```\\n     * If you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\\n     * ```\\n     * dayjs().isSame('2011-01-01', 'year')// => boolean\\n     * ```\\n     * Docs: https://day.js.org/docs/en/query/is-same\\n     */\\n    isSame(date?: ConfigType, unit?: OpUnitType): boolean\\n    /**\\n     * This indicates whether the Day.js object is after the other supplied date-time.\\n     * ```\\n     * dayjs().isAfter(dayjs('2011-01-01')) // default milliseconds\\n     * ```\\n     * If you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\\n     * ```\\n     * dayjs().isAfter('2011-01-01', 'year')// => boolean\\n     * ```\\n     * Units are case insensitive, and support plural and short forms.\\n     *\\n     * Docs: https://day.js.org/docs/en/query/is-after\\n     */\\n    isAfter(date?: ConfigType, unit?: OpUnitType): boolean\\n\\n    locale(): string\\n\\n    locale(preset: string | ILocale, object?: Partial<ILocale>): Dayjs\\n  }\\n\\n  export type PluginFunc<T = unknown> = (option: T, c: typeof Dayjs, d: typeof dayjs) => void\\n\\n  export function extend<T = unknown>(plugin: PluginFunc<T>, option?: T): Dayjs\\n\\n  export function locale(preset?: string | ILocale, object?: Partial<ILocale>, isLocal?: boolean): string\\n\\n  export function isDayjs(d: any): d is Dayjs\\n\\n  export function unix(t: number): Dayjs\\n\\n  const Ls : { [key: string] :  ILocale }\\n}\\n\"","export default \"import zen from 'zen';\\n\\n/**\\n * @param {InputSchema & Object.<string, any>} input\\n * @returns {Promise<any>}\\n */\\nexport const handler = async (input) => {\\n  return input;\\n};\\n\"","export default \"declare namespace console {\\n  function log(...args: any[]): void;\\n  async function sleep(durationMs: number): Promise<void>;\\n}\\n\\ninterface Config {\\n  readonly maxDepth: number;\\n  readonly iteration: number;\\n  readonly trace: boolean;\\n}\\n\\ndeclare const config: Config;\\n\"","export default \"declare class HttpResponse {\\n  readonly data: any;\\n  readonly headers: Record<string, string>;\\n  readonly status: number;\\n}\\n\\ninterface HttpConfig {\\n  headers?: Record<string, string>;\\n  params?: Record<string, string>;\\n  data?: any;\\n}\\n\\nclass Http {\\n  head(url: string, config?: HttpConfig): Promise<HttpResponse>;\\n\\n  get(url: string, config?: HttpConfig): Promise<HttpResponse>;\\n\\n  delete(url: string, config?: HttpConfig): Promise<HttpResponse>;\\n\\n  post(url: string, data: any, config?: HttpConfig): Promise<HttpResponse>;\\n\\n  patch(url: string, data: any, config?: HttpConfig): Promise<HttpResponse>;\\n\\n  put(url: string, data: any, config?: HttpConfig): Promise<HttpResponse>;\\n}\\n\\nexport interface HttpStatic extends Http {}\\n\\ndeclare const http: HttpStatic;\\nexport default http;\\n\"","export default \"interface EvaluateOptions {\\n  trace?: boolean;\\n}\\n\\ninterface EvaluateResponse {\\n  performance: string;\\n  result: any;\\n  trace?: any;\\n}\\n\\ninterface ZenModule {\\n  /**\\n   * Evaluates ZEN expression\\n   * @param expression\\n   * @param context Must contain '$' key\\n   */\\n  evaluateExpression(expression: string, context: any): any;\\n\\n  /**\\n   * Evaluates ZEN unary expression\\n   * @param expression\\n   * @param context Must contain '$' key\\n   */\\n  evaluateUnaryExpression(expression: string, context: any): boolean;\\n\\n  /**\\n   * Evaluates ZEN unary expression\\n   * @param key File key to be evaluated through DecisionLoader\\n   * @param context\\n   * @param opts\\n   */\\n  evaluate(key: string, context: any, opts?: EvaluateOptions): Promise<EvaluateResponse>;\\n}\\n\\ndeclare const zenModule: ZenModule;\\n\\nexport default zenModule;\\n\"","export default \"declare type Primitive = string | number | symbol | bigint | boolean | null | undefined;\\ndeclare type Scalars = Primitive | Primitive[];\\n\\ndeclare namespace util {\\n  type AssertEqual<T, U> = (<V>() => V extends T ? 1 : 2) extends <V>() => V extends U ? 1 : 2 ? true : false;\\n  export type isAny<T> = 0 extends 1 & T ? true : false;\\n  export const assertEqual: <A, B>(val: AssertEqual<A, B>) => AssertEqual<A, B>;\\n  export function assertIs<T>(_arg: T): void;\\n  export function assertNever(_x: never): never;\\n  export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\\n  export type OmitKeys<T, K extends string> = Pick<T, Exclude<keyof T, K>>;\\n  export type MakePartial<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\\n  export type Exactly<T, X> = T & Record<Exclude<keyof X, keyof T>, never>;\\n  export const arrayToEnum: <T extends string, U extends [T, ...T[]]>(items: U) => { [k in U[number]]: k };\\n  export const getValidEnumValues: (obj: any) => any[];\\n  export const objectValues: (obj: any) => any[];\\n  export const objectKeys: ObjectConstructor['keys'];\\n  export const find: <T>(arr: T[], checker: (arg: T) => any) => T | undefined;\\n  export type identity<T> = objectUtil.identity<T>;\\n  export type flatten<T> = objectUtil.flatten<T>;\\n  export type noUndefined<T> = T extends undefined ? never : T;\\n  export const isInteger: NumberConstructor['isInteger'];\\n  export function joinValues<T extends any[]>(array: T, separator?: string): string;\\n  export const jsonStringifyReplacer: (_: string, value: any) => any;\\n  export {};\\n}\\ndeclare namespace objectUtil {\\n  export type MergeShapes<U, V> = {\\n    [k in Exclude<keyof U, keyof V>]: U[k];\\n  } & V;\\n  type optionalKeys<T extends object> = {\\n    [k in keyof T]: undefined extends T[k] ? k : never;\\n  }[keyof T];\\n  type requiredKeys<T extends object> = {\\n    [k in keyof T]: undefined extends T[k] ? never : k;\\n  }[keyof T];\\n  export type addQuestionMarks<T extends object, _O = any> = {\\n    [K in requiredKeys<T>]: T[K];\\n  } & {\\n    [K in optionalKeys<T>]?: T[K];\\n  } & {\\n    [k in keyof T]?: unknown;\\n  };\\n  export type identity<T> = T;\\n  export type flatten<T> = identity<{\\n    [k in keyof T]: T[k];\\n  }>;\\n  export type noNeverKeys<T> = {\\n    [k in keyof T]: [T[k]] extends [never] ? never : k;\\n  }[keyof T];\\n  export type noNever<T> = identity<{\\n    [k in noNeverKeys<T>]: k extends keyof T ? T[k] : never;\\n  }>;\\n  export const mergeShapes: <U, T>(first: U, second: T) => T & U;\\n  export type extendShape<A extends object, B extends object> = {\\n    [K in keyof A as K extends keyof B ? never : K]: A[K];\\n  } & {\\n    [K in keyof B]: B[K];\\n  };\\n  export {};\\n}\\ndeclare const ZodParsedType: {\\n  function: 'function';\\n  number: 'number';\\n  string: 'string';\\n  nan: 'nan';\\n  integer: 'integer';\\n  float: 'float';\\n  boolean: 'boolean';\\n  date: 'date';\\n  bigint: 'bigint';\\n  symbol: 'symbol';\\n  undefined: 'undefined';\\n  null: 'null';\\n  array: 'array';\\n  object: 'object';\\n  unknown: 'unknown';\\n  promise: 'promise';\\n  void: 'void';\\n  never: 'never';\\n  map: 'map';\\n  set: 'set';\\n};\\ndeclare type ZodParsedType = keyof typeof ZodParsedType;\\ndeclare const getParsedType: (data: any) => ZodParsedType;\\n\\ndeclare type allKeys<T> = T extends any ? keyof T : never;\\ndeclare type inferFlattenedErrors<T extends ZodType<any, any, any>, U = string> = typeToFlattenedError<TypeOf<T>, U>;\\ndeclare type typeToFlattenedError<T, U = string> = {\\n  formErrors: U[];\\n  fieldErrors: {\\n    [P in allKeys<T>]?: U[];\\n  };\\n};\\ndeclare const ZodIssueCode: {\\n  invalid_type: 'invalid_type';\\n  invalid_literal: 'invalid_literal';\\n  custom: 'custom';\\n  invalid_union: 'invalid_union';\\n  invalid_union_discriminator: 'invalid_union_discriminator';\\n  invalid_enum_value: 'invalid_enum_value';\\n  unrecognized_keys: 'unrecognized_keys';\\n  invalid_arguments: 'invalid_arguments';\\n  invalid_return_type: 'invalid_return_type';\\n  invalid_date: 'invalid_date';\\n  invalid_string: 'invalid_string';\\n  too_small: 'too_small';\\n  too_big: 'too_big';\\n  invalid_intersection_types: 'invalid_intersection_types';\\n  not_multiple_of: 'not_multiple_of';\\n  not_finite: 'not_finite';\\n};\\ndeclare type ZodIssueCode = keyof typeof ZodIssueCode;\\ndeclare type ZodIssueBase = {\\n  path: (string | number)[];\\n  message?: string;\\n};\\ninterface ZodInvalidTypeIssue extends ZodIssueBase {\\n  code: typeof ZodIssueCode.invalid_type;\\n  expected: ZodParsedType;\\n  received: ZodParsedType;\\n}\\ninterface ZodInvalidLiteralIssue extends ZodIssueBase {\\n  code: typeof ZodIssueCode.invalid_literal;\\n  expected: unknown;\\n  received: unknown;\\n}\\ninterface ZodUnrecognizedKeysIssue extends ZodIssueBase {\\n  code: typeof ZodIssueCode.unrecognized_keys;\\n  keys: string[];\\n}\\ninterface ZodInvalidUnionIssue extends ZodIssueBase {\\n  code: typeof ZodIssueCode.invalid_union;\\n  unionErrors: ZodError[];\\n}\\ninterface ZodInvalidUnionDiscriminatorIssue extends ZodIssueBase {\\n  code: typeof ZodIssueCode.invalid_union_discriminator;\\n  options: Primitive[];\\n}\\ninterface ZodInvalidEnumValueIssue extends ZodIssueBase {\\n  received: string | number;\\n  code: typeof ZodIssueCode.invalid_enum_value;\\n  options: (string | number)[];\\n}\\ninterface ZodInvalidArgumentsIssue extends ZodIssueBase {\\n  code: typeof ZodIssueCode.invalid_arguments;\\n  argumentsError: ZodError;\\n}\\ninterface ZodInvalidReturnTypeIssue extends ZodIssueBase {\\n  code: typeof ZodIssueCode.invalid_return_type;\\n  returnTypeError: ZodError;\\n}\\ninterface ZodInvalidDateIssue extends ZodIssueBase {\\n  code: typeof ZodIssueCode.invalid_date;\\n}\\ndeclare type StringValidation =\\n  | 'email'\\n  | 'url'\\n  | 'emoji'\\n  | 'uuid'\\n  | 'nanoid'\\n  | 'regex'\\n  | 'cuid'\\n  | 'cuid2'\\n  | 'ulid'\\n  | 'datetime'\\n  | 'date'\\n  | 'time'\\n  | 'duration'\\n  | 'ip'\\n  | 'base64'\\n  | {\\n      includes: string;\\n      position?: number;\\n    }\\n  | {\\n      startsWith: string;\\n    }\\n  | {\\n      endsWith: string;\\n    };\\ninterface ZodInvalidStringIssue extends ZodIssueBase {\\n  code: typeof ZodIssueCode.invalid_string;\\n  validation: StringValidation;\\n}\\ninterface ZodTooSmallIssue extends ZodIssueBase {\\n  code: typeof ZodIssueCode.too_small;\\n  minimum: number | bigint;\\n  inclusive: boolean;\\n  exact?: boolean;\\n  type: 'array' | 'string' | 'number' | 'set' | 'date' | 'bigint';\\n}\\ninterface ZodTooBigIssue extends ZodIssueBase {\\n  code: typeof ZodIssueCode.too_big;\\n  maximum: number | bigint;\\n  inclusive: boolean;\\n  exact?: boolean;\\n  type: 'array' | 'string' | 'number' | 'set' | 'date' | 'bigint';\\n}\\ninterface ZodInvalidIntersectionTypesIssue extends ZodIssueBase {\\n  code: typeof ZodIssueCode.invalid_intersection_types;\\n}\\ninterface ZodNotMultipleOfIssue extends ZodIssueBase {\\n  code: typeof ZodIssueCode.not_multiple_of;\\n  multipleOf: number | bigint;\\n}\\ninterface ZodNotFiniteIssue extends ZodIssueBase {\\n  code: typeof ZodIssueCode.not_finite;\\n}\\ninterface ZodCustomIssue extends ZodIssueBase {\\n  code: typeof ZodIssueCode.custom;\\n  params?: {\\n    [k: string]: any;\\n  };\\n}\\ndeclare type DenormalizedError = {\\n  [k: string]: DenormalizedError | string[];\\n};\\ndeclare type ZodIssueOptionalMessage =\\n  | ZodInvalidTypeIssue\\n  | ZodInvalidLiteralIssue\\n  | ZodUnrecognizedKeysIssue\\n  | ZodInvalidUnionIssue\\n  | ZodInvalidUnionDiscriminatorIssue\\n  | ZodInvalidEnumValueIssue\\n  | ZodInvalidArgumentsIssue\\n  | ZodInvalidReturnTypeIssue\\n  | ZodInvalidDateIssue\\n  | ZodInvalidStringIssue\\n  | ZodTooSmallIssue\\n  | ZodTooBigIssue\\n  | ZodInvalidIntersectionTypesIssue\\n  | ZodNotMultipleOfIssue\\n  | ZodNotFiniteIssue\\n  | ZodCustomIssue;\\ndeclare type ZodIssue = ZodIssueOptionalMessage & {\\n  fatal?: boolean;\\n  message: string;\\n};\\ndeclare const quotelessJson: (obj: any) => string;\\ndeclare type recursiveZodFormattedError<T> = T extends [any, ...any[]]\\n  ? {\\n      [K in keyof T]?: ZodFormattedError<T[K]>;\\n    }\\n  : T extends any[]\\n    ? {\\n        [k: number]: ZodFormattedError<T[number]>;\\n      }\\n    : T extends object\\n      ? {\\n          [K in keyof T]?: ZodFormattedError<T[K]>;\\n        }\\n      : unknown;\\ndeclare type ZodFormattedError<T, U = string> = {\\n  _errors: U[];\\n} & recursiveZodFormattedError<NonNullable<T>>;\\ndeclare type inferFormattedError<T extends ZodType<any, any, any>, U = string> = ZodFormattedError<TypeOf<T>, U>;\\ndeclare class ZodError<T = any> extends Error {\\n  issues: ZodIssue[];\\n  get errors(): ZodIssue[];\\n  constructor(issues: ZodIssue[]);\\n  format(): ZodFormattedError<T>;\\n  format<U>(mapper: (issue: ZodIssue) => U): ZodFormattedError<T, U>;\\n  static create: (issues: ZodIssue[]) => ZodError<any>;\\n  static assert(value: unknown): asserts value is ZodError;\\n  toString(): string;\\n  get message(): string;\\n  get isEmpty(): boolean;\\n  addIssue: (sub: ZodIssue) => void;\\n  addIssues: (subs?: ZodIssue[]) => void;\\n  flatten(): typeToFlattenedError<T>;\\n  flatten<U>(mapper?: (issue: ZodIssue) => U): typeToFlattenedError<T, U>;\\n  get formErrors(): typeToFlattenedError<T, string>;\\n}\\ndeclare type stripPath<T extends object> = T extends any ? util.OmitKeys<T, 'path'> : never;\\ndeclare type IssueData = stripPath<ZodIssueOptionalMessage> & {\\n  path?: (string | number)[];\\n  fatal?: boolean;\\n};\\ndeclare type ErrorMapCtx = {\\n  defaultError: string;\\n  data: any;\\n};\\ndeclare type ZodErrorMap = (\\n  issue: ZodIssueOptionalMessage,\\n  _ctx: ErrorMapCtx,\\n) => {\\n  message: string;\\n};\\n\\ndeclare const errorMap: ZodErrorMap;\\n//# sourceMappingURL=en.d.ts.map\\n\\ndeclare function setErrorMap(map: ZodErrorMap): void;\\ndeclare function getErrorMap(): ZodErrorMap;\\n\\ndeclare const makeIssue: (params: {\\n  data: any;\\n  path: (string | number)[];\\n  errorMaps: ZodErrorMap[];\\n  issueData: IssueData;\\n}) => ZodIssue;\\ndeclare type ParseParams = {\\n  path: (string | number)[];\\n  errorMap: ZodErrorMap;\\n  async: boolean;\\n};\\ndeclare type ParsePathComponent = string | number;\\ndeclare type ParsePath = ParsePathComponent[];\\ndeclare const EMPTY_PATH: ParsePath;\\ninterface ParseContext {\\n  readonly common: {\\n    readonly issues: ZodIssue[];\\n    readonly contextualErrorMap?: ZodErrorMap;\\n    readonly async: boolean;\\n  };\\n  readonly path: ParsePath;\\n  readonly schemaErrorMap?: ZodErrorMap;\\n  readonly parent: ParseContext | null;\\n  readonly data: any;\\n  readonly parsedType: ZodParsedType;\\n}\\ndeclare type ParseInput = {\\n  data: any;\\n  path: (string | number)[];\\n  parent: ParseContext;\\n};\\ndeclare function addIssueToContext(ctx: ParseContext, issueData: IssueData): void;\\ndeclare type ObjectPair = {\\n  key: SyncParseReturnType<any>;\\n  value: SyncParseReturnType<any>;\\n};\\ndeclare class ParseStatus {\\n  value: 'aborted' | 'dirty' | 'valid';\\n  dirty(): void;\\n  abort(): void;\\n  static mergeArray(status: ParseStatus, results: SyncParseReturnType<any>[]): SyncParseReturnType;\\n  static mergeObjectAsync(\\n    status: ParseStatus,\\n    pairs: {\\n      key: ParseReturnType<any>;\\n      value: ParseReturnType<any>;\\n    }[],\\n  ): Promise<SyncParseReturnType<any>>;\\n  static mergeObjectSync(\\n    status: ParseStatus,\\n    pairs: {\\n      key: SyncParseReturnType<any>;\\n      value: SyncParseReturnType<any>;\\n      alwaysSet?: boolean;\\n    }[],\\n  ): SyncParseReturnType;\\n}\\ninterface ParseResult {\\n  status: 'aborted' | 'dirty' | 'valid';\\n  data: any;\\n}\\ndeclare type INVALID = {\\n  status: 'aborted';\\n};\\ndeclare const INVALID: INVALID;\\ndeclare type DIRTY<T> = {\\n  status: 'dirty';\\n  value: T;\\n};\\ndeclare const DIRTY: <T>(value: T) => DIRTY<T>;\\ndeclare type OK<T> = {\\n  status: 'valid';\\n  value: T;\\n};\\ndeclare const OK: <T>(value: T) => OK<T>;\\ndeclare type SyncParseReturnType<T = any> = OK<T> | DIRTY<T> | INVALID;\\ndeclare type AsyncParseReturnType<T> = Promise<SyncParseReturnType<T>>;\\ndeclare type ParseReturnType<T> = SyncParseReturnType<T> | AsyncParseReturnType<T>;\\ndeclare const isAborted: (x: ParseReturnType<any>) => x is INVALID;\\ndeclare const isDirty: <T>(x: ParseReturnType<T>) => x is OK<T> | DIRTY<T>;\\ndeclare const isValid: <T>(x: ParseReturnType<T>) => x is OK<T>;\\ndeclare const isAsync: <T>(x: ParseReturnType<T>) => x is AsyncParseReturnType<T>;\\n\\ndeclare namespace enumUtil {\\n  type UnionToIntersectionFn<T> = (T extends unknown ? (k: () => T) => void : never) extends (\\n    k: infer Intersection,\\n  ) => void\\n    ? Intersection\\n    : never;\\n  type GetUnionLast<T> = UnionToIntersectionFn<T> extends () => infer Last ? Last : never;\\n  type UnionToTuple<T, Tuple extends unknown[] = []> = [T] extends [never]\\n    ? Tuple\\n    : UnionToTuple<Exclude<T, GetUnionLast<T>>, [GetUnionLast<T>, ...Tuple]>;\\n  type CastToStringTuple<T> = T extends [string, ...string[]] ? T : never;\\n  export type UnionToTupleString<T> = CastToStringTuple<UnionToTuple<T>>;\\n  export {};\\n}\\n\\ndeclare namespace errorUtil {\\n  type ErrMessage =\\n    | string\\n    | {\\n        message?: string;\\n      };\\n  const errToObj: (message?: ErrMessage | undefined) => {\\n    message?: string | undefined;\\n  };\\n  const toString: (message?: ErrMessage | undefined) => string | undefined;\\n}\\n\\ndeclare namespace partialUtil {\\n  type DeepPartial<T extends ZodTypeAny> =\\n    T extends ZodObject<ZodRawShape>\\n      ? ZodObject<\\n          {\\n            [k in keyof T['shape']]: ZodOptional<DeepPartial<T['shape'][k]>>;\\n          },\\n          T['_def']['unknownKeys'],\\n          T['_def']['catchall']\\n        >\\n      : T extends ZodArray<infer Type, infer Card>\\n        ? ZodArray<DeepPartial<Type>, Card>\\n        : T extends ZodOptional<infer Type>\\n          ? ZodOptional<DeepPartial<Type>>\\n          : T extends ZodNullable<infer Type>\\n            ? ZodNullable<DeepPartial<Type>>\\n            : T extends ZodTuple<infer Items>\\n              ? {\\n                  [k in keyof Items]: Items[k] extends ZodTypeAny ? DeepPartial<Items[k]> : never;\\n                } extends infer PI\\n                ? PI extends ZodTupleItems\\n                  ? ZodTuple<PI>\\n                  : never\\n                : never\\n              : T;\\n}\\n\\ninterface RefinementCtx {\\n  addIssue: (arg: IssueData) => void;\\n  path: (string | number)[];\\n}\\ndeclare type ZodRawShape = {\\n  [k: string]: ZodTypeAny;\\n};\\ndeclare type ZodTypeAny = ZodType<any, any, any>;\\ndeclare type TypeOf<T extends ZodType<any, any, any>> = T['_output'];\\ndeclare type input<T extends ZodType<any, any, any>> = T['_input'];\\ndeclare type output<T extends ZodType<any, any, any>> = T['_output'];\\n\\ndeclare type CustomErrorParams = Partial<util.Omit<ZodCustomIssue, 'code'>>;\\ninterface ZodTypeDef {\\n  errorMap?: ZodErrorMap;\\n  description?: string;\\n}\\ndeclare type RawCreateParams =\\n  | {\\n      errorMap?: ZodErrorMap;\\n      invalid_type_error?: string;\\n      required_error?: string;\\n      message?: string;\\n      description?: string;\\n    }\\n  | undefined;\\ndeclare type ProcessedCreateParams = {\\n  errorMap?: ZodErrorMap;\\n  description?: string;\\n};\\ndeclare type SafeParseSuccess<Output> = {\\n  success: true;\\n  data: Output;\\n  error?: never;\\n};\\ndeclare type SafeParseError<Input> = {\\n  success: false;\\n  error: ZodError<Input>;\\n  data?: never;\\n};\\ndeclare type SafeParseReturnType<Input, Output> = SafeParseSuccess<Output> | SafeParseError<Input>;\\ndeclare abstract class ZodType<Output = any, Def extends ZodTypeDef = ZodTypeDef, Input = Output> {\\n  readonly _type: Output;\\n  readonly _output: Output;\\n  readonly _input: Input;\\n  readonly _def: Def;\\n  get description(): string | undefined;\\n  abstract _parse(input: ParseInput): ParseReturnType<Output>;\\n  _getType(input: ParseInput): string;\\n  _getOrReturnCtx(input: ParseInput, ctx?: ParseContext | undefined): ParseContext;\\n  _processInputParams(input: ParseInput): {\\n    status: ParseStatus;\\n    ctx: ParseContext;\\n  };\\n  _parseSync(input: ParseInput): SyncParseReturnType<Output>;\\n  _parseAsync(input: ParseInput): AsyncParseReturnType<Output>;\\n  parse(data: unknown, params?: Partial<ParseParams>): Output;\\n  safeParse(data: unknown, params?: Partial<ParseParams>): SafeParseReturnType<Input, Output>;\\n  parseAsync(data: unknown, params?: Partial<ParseParams>): Promise<Output>;\\n  safeParseAsync(data: unknown, params?: Partial<ParseParams>): Promise<SafeParseReturnType<Input, Output>>;\\n  /** Alias of safeParseAsync */\\n  spa: (data: unknown, params?: Partial<ParseParams> | undefined) => Promise<SafeParseReturnType<Input, Output>>;\\n  refine<RefinedOutput extends Output>(\\n    check: (arg: Output) => arg is RefinedOutput,\\n    message?: string | CustomErrorParams | ((arg: Output) => CustomErrorParams),\\n  ): ZodEffects<this, RefinedOutput, Input>;\\n  refine(\\n    check: (arg: Output) => unknown | Promise<unknown>,\\n    message?: string | CustomErrorParams | ((arg: Output) => CustomErrorParams),\\n  ): ZodEffects<this, Output, Input>;\\n  refinement<RefinedOutput extends Output>(\\n    check: (arg: Output) => arg is RefinedOutput,\\n    refinementData: IssueData | ((arg: Output, ctx: RefinementCtx) => IssueData),\\n  ): ZodEffects<this, RefinedOutput, Input>;\\n  refinement(\\n    check: (arg: Output) => boolean,\\n    refinementData: IssueData | ((arg: Output, ctx: RefinementCtx) => IssueData),\\n  ): ZodEffects<this, Output, Input>;\\n  _refinement(refinement: RefinementEffect<Output>['refinement']): ZodEffects<this, Output, Input>;\\n  superRefine<RefinedOutput extends Output>(\\n    refinement: (arg: Output, ctx: RefinementCtx) => arg is RefinedOutput,\\n  ): ZodEffects<this, RefinedOutput, Input>;\\n  superRefine(refinement: (arg: Output, ctx: RefinementCtx) => void): ZodEffects<this, Output, Input>;\\n  superRefine(refinement: (arg: Output, ctx: RefinementCtx) => Promise<void>): ZodEffects<this, Output, Input>;\\n  constructor(def: Def);\\n  optional(): ZodOptional<this>;\\n  nullable(): ZodNullable<this>;\\n  nullish(): ZodOptional<ZodNullable<this>>;\\n  array(): ZodArray<this>;\\n  promise(): ZodPromise<this>;\\n  or<T extends ZodTypeAny>(option: T): ZodUnion<[this, T]>;\\n  and<T extends ZodTypeAny>(incoming: T): ZodIntersection<this, T>;\\n  transform<NewOut>(transform: (arg: Output, ctx: RefinementCtx) => NewOut | Promise<NewOut>): ZodEffects<this, NewOut>;\\n  default(def: util.noUndefined<Input>): ZodDefault<this>;\\n  default(def: () => util.noUndefined<Input>): ZodDefault<this>;\\n  brand<B extends string | number | symbol>(brand?: B): ZodBranded<this, B>;\\n  catch(def: Output): ZodCatch<this>;\\n  catch(def: (ctx: { error: ZodError; input: Input }) => Output): ZodCatch<this>;\\n  describe(description: string): this;\\n  pipe<T extends ZodTypeAny>(target: T): ZodPipeline<this, T>;\\n  readonly(): ZodReadonly<this>;\\n  isOptional(): boolean;\\n  isNullable(): boolean;\\n}\\ndeclare type IpVersion = 'v4' | 'v6';\\ndeclare type ZodStringCheck =\\n  | {\\n      kind: 'min';\\n      value: number;\\n      message?: string;\\n    }\\n  | {\\n      kind: 'max';\\n      value: number;\\n      message?: string;\\n    }\\n  | {\\n      kind: 'length';\\n      value: number;\\n      message?: string;\\n    }\\n  | {\\n      kind: 'email';\\n      message?: string;\\n    }\\n  | {\\n      kind: 'url';\\n      message?: string;\\n    }\\n  | {\\n      kind: 'emoji';\\n      message?: string;\\n    }\\n  | {\\n      kind: 'uuid';\\n      message?: string;\\n    }\\n  | {\\n      kind: 'nanoid';\\n      message?: string;\\n    }\\n  | {\\n      kind: 'cuid';\\n      message?: string;\\n    }\\n  | {\\n      kind: 'includes';\\n      value: string;\\n      position?: number;\\n      message?: string;\\n    }\\n  | {\\n      kind: 'cuid2';\\n      message?: string;\\n    }\\n  | {\\n      kind: 'ulid';\\n      message?: string;\\n    }\\n  | {\\n      kind: 'startsWith';\\n      value: string;\\n      message?: string;\\n    }\\n  | {\\n      kind: 'endsWith';\\n      value: string;\\n      message?: string;\\n    }\\n  | {\\n      kind: 'regex';\\n      regex: RegExp;\\n      message?: string;\\n    }\\n  | {\\n      kind: 'trim';\\n      message?: string;\\n    }\\n  | {\\n      kind: 'toLowerCase';\\n      message?: string;\\n    }\\n  | {\\n      kind: 'toUpperCase';\\n      message?: string;\\n    }\\n  | {\\n      kind: 'datetime';\\n      offset: boolean;\\n      local: boolean;\\n      precision: number | null;\\n      message?: string;\\n    }\\n  | {\\n      kind: 'date';\\n      message?: string;\\n    }\\n  | {\\n      kind: 'time';\\n      precision: number | null;\\n      message?: string;\\n    }\\n  | {\\n      kind: 'duration';\\n      message?: string;\\n    }\\n  | {\\n      kind: 'ip';\\n      version?: IpVersion;\\n      message?: string;\\n    }\\n  | {\\n      kind: 'base64';\\n      message?: string;\\n    };\\ninterface ZodStringDef extends ZodTypeDef {\\n  checks: ZodStringCheck[];\\n  typeName: ZodFirstPartyTypeKind.ZodString;\\n  coerce: boolean;\\n}\\ndeclare function datetimeRegex(args: { precision?: number | null; offset?: boolean; local?: boolean }): RegExp;\\ndeclare class ZodString extends ZodType<string, ZodStringDef, string> {\\n  _parse(input: ParseInput): ParseReturnType<string>;\\n  protected _regex(\\n    regex: RegExp,\\n    validation: StringValidation,\\n    message?: errorUtil.ErrMessage,\\n  ): ZodEffects<this, string, string>;\\n  _addCheck(check: ZodStringCheck): ZodString;\\n  email(message?: errorUtil.ErrMessage): ZodString;\\n  url(message?: errorUtil.ErrMessage): ZodString;\\n  emoji(message?: errorUtil.ErrMessage): ZodString;\\n  uuid(message?: errorUtil.ErrMessage): ZodString;\\n  nanoid(message?: errorUtil.ErrMessage): ZodString;\\n  cuid(message?: errorUtil.ErrMessage): ZodString;\\n  cuid2(message?: errorUtil.ErrMessage): ZodString;\\n  ulid(message?: errorUtil.ErrMessage): ZodString;\\n  base64(message?: errorUtil.ErrMessage): ZodString;\\n  ip(\\n    options?:\\n      | string\\n      | {\\n          version?: 'v4' | 'v6';\\n          message?: string;\\n        },\\n  ): ZodString;\\n  datetime(\\n    options?:\\n      | string\\n      | {\\n          message?: string | undefined;\\n          precision?: number | null;\\n          offset?: boolean;\\n          local?: boolean;\\n        },\\n  ): ZodString;\\n  date(message?: string): ZodString;\\n  time(\\n    options?:\\n      | string\\n      | {\\n          message?: string | undefined;\\n          precision?: number | null;\\n        },\\n  ): ZodString;\\n  duration(message?: errorUtil.ErrMessage): ZodString;\\n  regex(regex: RegExp, message?: errorUtil.ErrMessage): ZodString;\\n  includes(\\n    value: string,\\n    options?: {\\n      message?: string;\\n      position?: number;\\n    },\\n  ): ZodString;\\n  startsWith(value: string, message?: errorUtil.ErrMessage): ZodString;\\n  endsWith(value: string, message?: errorUtil.ErrMessage): ZodString;\\n  min(minLength: number, message?: errorUtil.ErrMessage): ZodString;\\n  max(maxLength: number, message?: errorUtil.ErrMessage): ZodString;\\n  length(len: number, message?: errorUtil.ErrMessage): ZodString;\\n  /**\\n   * @deprecated Use z.string().min(1) instead.\\n   * @see {@link ZodString.min}\\n   */\\n  nonempty(message?: errorUtil.ErrMessage): ZodString;\\n  trim(): ZodString;\\n  toLowerCase(): ZodString;\\n  toUpperCase(): ZodString;\\n  get isDatetime(): boolean;\\n  get isDate(): boolean;\\n  get isTime(): boolean;\\n  get isDuration(): boolean;\\n  get isEmail(): boolean;\\n  get isURL(): boolean;\\n  get isEmoji(): boolean;\\n  get isUUID(): boolean;\\n  get isNANOID(): boolean;\\n  get isCUID(): boolean;\\n  get isCUID2(): boolean;\\n  get isULID(): boolean;\\n  get isIP(): boolean;\\n  get isBase64(): boolean;\\n  get minLength(): number | null;\\n  get maxLength(): number | null;\\n  static create: (\\n    params?:\\n      | ({\\n          errorMap?: ZodErrorMap | undefined;\\n          invalid_type_error?: string | undefined;\\n          required_error?: string | undefined;\\n          message?: string | undefined;\\n          description?: string | undefined;\\n        } & {\\n          coerce?: true | undefined;\\n        })\\n      | undefined,\\n  ) => ZodString;\\n}\\ndeclare type ZodNumberCheck =\\n  | {\\n      kind: 'min';\\n      value: number;\\n      inclusive: boolean;\\n      message?: string;\\n    }\\n  | {\\n      kind: 'max';\\n      value: number;\\n      inclusive: boolean;\\n      message?: string;\\n    }\\n  | {\\n      kind: 'int';\\n      message?: string;\\n    }\\n  | {\\n      kind: 'multipleOf';\\n      value: number;\\n      message?: string;\\n    }\\n  | {\\n      kind: 'finite';\\n      message?: string;\\n    };\\ninterface ZodNumberDef extends ZodTypeDef {\\n  checks: ZodNumberCheck[];\\n  typeName: ZodFirstPartyTypeKind.ZodNumber;\\n  coerce: boolean;\\n}\\ndeclare class ZodNumber extends ZodType<number, ZodNumberDef, number> {\\n  _parse(input: ParseInput): ParseReturnType<number>;\\n  static create: (\\n    params?:\\n      | ({\\n          errorMap?: ZodErrorMap | undefined;\\n          invalid_type_error?: string | undefined;\\n          required_error?: string | undefined;\\n          message?: string | undefined;\\n          description?: string | undefined;\\n        } & {\\n          coerce?: boolean | undefined;\\n        })\\n      | undefined,\\n  ) => ZodNumber;\\n  gte(value: number, message?: errorUtil.ErrMessage): ZodNumber;\\n  min: (value: number, message?: errorUtil.ErrMessage | undefined) => ZodNumber;\\n  gt(value: number, message?: errorUtil.ErrMessage): ZodNumber;\\n  lte(value: number, message?: errorUtil.ErrMessage): ZodNumber;\\n  max: (value: number, message?: errorUtil.ErrMessage | undefined) => ZodNumber;\\n  lt(value: number, message?: errorUtil.ErrMessage): ZodNumber;\\n  protected setLimit(kind: 'min' | 'max', value: number, inclusive: boolean, message?: string): ZodNumber;\\n  _addCheck(check: ZodNumberCheck): ZodNumber;\\n  int(message?: errorUtil.ErrMessage): ZodNumber;\\n  positive(message?: errorUtil.ErrMessage): ZodNumber;\\n  negative(message?: errorUtil.ErrMessage): ZodNumber;\\n  nonpositive(message?: errorUtil.ErrMessage): ZodNumber;\\n  nonnegative(message?: errorUtil.ErrMessage): ZodNumber;\\n  multipleOf(value: number, message?: errorUtil.ErrMessage): ZodNumber;\\n  step: (value: number, message?: errorUtil.ErrMessage | undefined) => ZodNumber;\\n  finite(message?: errorUtil.ErrMessage): ZodNumber;\\n  safe(message?: errorUtil.ErrMessage): ZodNumber;\\n  get minValue(): number | null;\\n  get maxValue(): number | null;\\n  get isInt(): boolean;\\n  get isFinite(): boolean;\\n}\\ndeclare type ZodBigIntCheck =\\n  | {\\n      kind: 'min';\\n      value: bigint;\\n      inclusive: boolean;\\n      message?: string;\\n    }\\n  | {\\n      kind: 'max';\\n      value: bigint;\\n      inclusive: boolean;\\n      message?: string;\\n    }\\n  | {\\n      kind: 'multipleOf';\\n      value: bigint;\\n      message?: string;\\n    };\\ninterface ZodBigIntDef extends ZodTypeDef {\\n  checks: ZodBigIntCheck[];\\n  typeName: ZodFirstPartyTypeKind.ZodBigInt;\\n  coerce: boolean;\\n}\\ndeclare class ZodBigInt extends ZodType<bigint, ZodBigIntDef, bigint> {\\n  _parse(input: ParseInput): ParseReturnType<bigint>;\\n  static create: (\\n    params?:\\n      | ({\\n          errorMap?: ZodErrorMap | undefined;\\n          invalid_type_error?: string | undefined;\\n          required_error?: string | undefined;\\n          message?: string | undefined;\\n          description?: string | undefined;\\n        } & {\\n          coerce?: boolean | undefined;\\n        })\\n      | undefined,\\n  ) => ZodBigInt;\\n  gte(value: bigint, message?: errorUtil.ErrMessage): ZodBigInt;\\n  min: (value: bigint, message?: errorUtil.ErrMessage | undefined) => ZodBigInt;\\n  gt(value: bigint, message?: errorUtil.ErrMessage): ZodBigInt;\\n  lte(value: bigint, message?: errorUtil.ErrMessage): ZodBigInt;\\n  max: (value: bigint, message?: errorUtil.ErrMessage | undefined) => ZodBigInt;\\n  lt(value: bigint, message?: errorUtil.ErrMessage): ZodBigInt;\\n  protected setLimit(kind: 'min' | 'max', value: bigint, inclusive: boolean, message?: string): ZodBigInt;\\n  _addCheck(check: ZodBigIntCheck): ZodBigInt;\\n  positive(message?: errorUtil.ErrMessage): ZodBigInt;\\n  negative(message?: errorUtil.ErrMessage): ZodBigInt;\\n  nonpositive(message?: errorUtil.ErrMessage): ZodBigInt;\\n  nonnegative(message?: errorUtil.ErrMessage): ZodBigInt;\\n  multipleOf(value: bigint, message?: errorUtil.ErrMessage): ZodBigInt;\\n  get minValue(): bigint | null;\\n  get maxValue(): bigint | null;\\n}\\ninterface ZodBooleanDef extends ZodTypeDef {\\n  typeName: ZodFirstPartyTypeKind.ZodBoolean;\\n  coerce: boolean;\\n}\\ndeclare class ZodBoolean extends ZodType<boolean, ZodBooleanDef, boolean> {\\n  _parse(input: ParseInput): ParseReturnType<boolean>;\\n  static create: (\\n    params?:\\n      | ({\\n          errorMap?: ZodErrorMap | undefined;\\n          invalid_type_error?: string | undefined;\\n          required_error?: string | undefined;\\n          message?: string | undefined;\\n          description?: string | undefined;\\n        } & {\\n          coerce?: boolean | undefined;\\n        })\\n      | undefined,\\n  ) => ZodBoolean;\\n}\\ndeclare type ZodDateCheck =\\n  | {\\n      kind: 'min';\\n      value: number;\\n      message?: string;\\n    }\\n  | {\\n      kind: 'max';\\n      value: number;\\n      message?: string;\\n    };\\ninterface ZodDateDef extends ZodTypeDef {\\n  checks: ZodDateCheck[];\\n  coerce: boolean;\\n  typeName: ZodFirstPartyTypeKind.ZodDate;\\n}\\ndeclare class ZodDate extends ZodType<Date, ZodDateDef, Date> {\\n  _parse(input: ParseInput): ParseReturnType<this['_output']>;\\n  _addCheck(check: ZodDateCheck): ZodDate;\\n  min(minDate: Date, message?: errorUtil.ErrMessage): ZodDate;\\n  max(maxDate: Date, message?: errorUtil.ErrMessage): ZodDate;\\n  get minDate(): Date | null;\\n  get maxDate(): Date | null;\\n  static create: (\\n    params?:\\n      | ({\\n          errorMap?: ZodErrorMap | undefined;\\n          invalid_type_error?: string | undefined;\\n          required_error?: string | undefined;\\n          message?: string | undefined;\\n          description?: string | undefined;\\n        } & {\\n          coerce?: boolean | undefined;\\n        })\\n      | undefined,\\n  ) => ZodDate;\\n}\\ninterface ZodSymbolDef extends ZodTypeDef {\\n  typeName: ZodFirstPartyTypeKind.ZodSymbol;\\n}\\ndeclare class ZodSymbol extends ZodType<symbol, ZodSymbolDef, symbol> {\\n  _parse(input: ParseInput): ParseReturnType<this['_output']>;\\n  static create: (params?: RawCreateParams) => ZodSymbol;\\n}\\ninterface ZodUndefinedDef extends ZodTypeDef {\\n  typeName: ZodFirstPartyTypeKind.ZodUndefined;\\n}\\ndeclare class ZodUndefined extends ZodType<undefined, ZodUndefinedDef, undefined> {\\n  _parse(input: ParseInput): ParseReturnType<this['_output']>;\\n  params?: RawCreateParams;\\n  static create: (params?: RawCreateParams) => ZodUndefined;\\n}\\ninterface ZodNullDef extends ZodTypeDef {\\n  typeName: ZodFirstPartyTypeKind.ZodNull;\\n}\\ndeclare class ZodNull extends ZodType<null, ZodNullDef, null> {\\n  _parse(input: ParseInput): ParseReturnType<this['_output']>;\\n  static create: (params?: RawCreateParams) => ZodNull;\\n}\\ninterface ZodAnyDef extends ZodTypeDef {\\n  typeName: ZodFirstPartyTypeKind.ZodAny;\\n}\\ndeclare class ZodAny extends ZodType<any, ZodAnyDef, any> {\\n  _any: true;\\n  _parse(input: ParseInput): ParseReturnType<this['_output']>;\\n  static create: (params?: RawCreateParams) => ZodAny;\\n}\\ninterface ZodUnknownDef extends ZodTypeDef {\\n  typeName: ZodFirstPartyTypeKind.ZodUnknown;\\n}\\ndeclare class ZodUnknown extends ZodType<unknown, ZodUnknownDef, unknown> {\\n  _unknown: true;\\n  _parse(input: ParseInput): ParseReturnType<this['_output']>;\\n  static create: (params?: RawCreateParams) => ZodUnknown;\\n}\\ninterface ZodNeverDef extends ZodTypeDef {\\n  typeName: ZodFirstPartyTypeKind.ZodNever;\\n}\\ndeclare class ZodNever extends ZodType<never, ZodNeverDef, never> {\\n  _parse(input: ParseInput): ParseReturnType<this['_output']>;\\n  static create: (params?: RawCreateParams) => ZodNever;\\n}\\ninterface ZodVoidDef extends ZodTypeDef {\\n  typeName: ZodFirstPartyTypeKind.ZodVoid;\\n}\\ndeclare class ZodVoid extends ZodType<void, ZodVoidDef, void> {\\n  _parse(input: ParseInput): ParseReturnType<this['_output']>;\\n  static create: (params?: RawCreateParams) => ZodVoid;\\n}\\ninterface ZodArrayDef<T extends ZodTypeAny = ZodTypeAny> extends ZodTypeDef {\\n  type: T;\\n  typeName: ZodFirstPartyTypeKind.ZodArray;\\n  exactLength: {\\n    value: number;\\n    message?: string;\\n  } | null;\\n  minLength: {\\n    value: number;\\n    message?: string;\\n  } | null;\\n  maxLength: {\\n    value: number;\\n    message?: string;\\n  } | null;\\n}\\ndeclare type ArrayCardinality = 'many' | 'atleastone';\\ndeclare type arrayOutputType<\\n  T extends ZodTypeAny,\\n  Cardinality extends ArrayCardinality = 'many',\\n> = Cardinality extends 'atleastone' ? [T['_output'], ...T['_output'][]] : T['_output'][];\\ndeclare class ZodArray<T extends ZodTypeAny, Cardinality extends ArrayCardinality = 'many'> extends ZodType<\\n  arrayOutputType<T, Cardinality>,\\n  ZodArrayDef<T>,\\n  Cardinality extends 'atleastone' ? [T['_input'], ...T['_input'][]] : T['_input'][]\\n> {\\n  _parse(input: ParseInput): ParseReturnType<this['_output']>;\\n  get element(): T;\\n  min(minLength: number, message?: errorUtil.ErrMessage): this;\\n  max(maxLength: number, message?: errorUtil.ErrMessage): this;\\n  length(len: number, message?: errorUtil.ErrMessage): this;\\n  nonempty(message?: errorUtil.ErrMessage): ZodArray<T, 'atleastone'>;\\n  static create: <T_1 extends ZodTypeAny>(schema: T_1, params?: RawCreateParams) => ZodArray<T_1, 'many'>;\\n}\\ndeclare type ZodNonEmptyArray<T extends ZodTypeAny> = ZodArray<T, 'atleastone'>;\\ndeclare type UnknownKeysParam = 'passthrough' | 'strict' | 'strip';\\ninterface ZodObjectDef<\\n  T extends ZodRawShape = ZodRawShape,\\n  UnknownKeys extends UnknownKeysParam = UnknownKeysParam,\\n  Catchall extends ZodTypeAny = ZodTypeAny,\\n> extends ZodTypeDef {\\n  typeName: ZodFirstPartyTypeKind.ZodObject;\\n  shape: () => T;\\n  catchall: Catchall;\\n  unknownKeys: UnknownKeys;\\n}\\ndeclare type mergeTypes<A, B> = {\\n  [k in keyof A | keyof B]: k extends keyof B ? B[k] : k extends keyof A ? A[k] : never;\\n};\\ndeclare type objectOutputType<\\n  Shape extends ZodRawShape,\\n  Catchall extends ZodTypeAny,\\n  UnknownKeys extends UnknownKeysParam = UnknownKeysParam,\\n> = objectUtil.flatten<objectUtil.addQuestionMarks<baseObjectOutputType<Shape>>> &\\n  CatchallOutput<Catchall> &\\n  PassthroughType<UnknownKeys>;\\ndeclare type baseObjectOutputType<Shape extends ZodRawShape> = {\\n  [k in keyof Shape]: Shape[k]['_output'];\\n};\\ndeclare type objectInputType<\\n  Shape extends ZodRawShape,\\n  Catchall extends ZodTypeAny,\\n  UnknownKeys extends UnknownKeysParam = UnknownKeysParam,\\n> = objectUtil.flatten<baseObjectInputType<Shape>> & CatchallInput<Catchall> & PassthroughType<UnknownKeys>;\\ndeclare type baseObjectInputType<Shape extends ZodRawShape> = objectUtil.addQuestionMarks<{\\n  [k in keyof Shape]: Shape[k]['_input'];\\n}>;\\ndeclare type CatchallOutput<T extends ZodType> = ZodType extends T\\n  ? unknown\\n  : {\\n      [k: string]: T['_output'];\\n    };\\ndeclare type CatchallInput<T extends ZodType> = ZodType extends T\\n  ? unknown\\n  : {\\n      [k: string]: T['_input'];\\n    };\\ndeclare type PassthroughType<T extends UnknownKeysParam> = T extends 'passthrough'\\n  ? {\\n      [k: string]: unknown;\\n    }\\n  : unknown;\\ndeclare type deoptional<T extends ZodTypeAny> =\\n  T extends ZodOptional<infer U> ? deoptional<U> : T extends ZodNullable<infer U> ? ZodNullable<deoptional<U>> : T;\\ndeclare type SomeZodObject = ZodObject<ZodRawShape, UnknownKeysParam, ZodTypeAny>;\\ndeclare type noUnrecognized<Obj extends object, Shape extends object> = {\\n  [k in keyof Obj]: k extends keyof Shape ? Obj[k] : never;\\n};\\ndeclare class ZodObject<\\n  T extends ZodRawShape,\\n  UnknownKeys extends UnknownKeysParam = UnknownKeysParam,\\n  Catchall extends ZodTypeAny = ZodTypeAny,\\n  Output = objectOutputType<T, Catchall, UnknownKeys>,\\n  Input = objectInputType<T, Catchall, UnknownKeys>,\\n> extends ZodType<Output, ZodObjectDef<T, UnknownKeys, Catchall>, Input> {\\n  private _cached;\\n  _getCached(): {\\n    shape: T;\\n    keys: string[];\\n  };\\n  _parse(input: ParseInput): ParseReturnType<this['_output']>;\\n  get shape(): T;\\n  strict(message?: errorUtil.ErrMessage): ZodObject<T, 'strict', Catchall>;\\n  strip(): ZodObject<T, 'strip', Catchall>;\\n  passthrough(): ZodObject<T, 'passthrough', Catchall>;\\n  /**\\n   * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\\n   * If you want to pass through unknown properties, use `.passthrough()` instead.\\n   */\\n  nonstrict: () => ZodObject<T, 'passthrough', Catchall>;\\n  extend<Augmentation extends ZodRawShape>(\\n    augmentation: Augmentation,\\n  ): ZodObject<objectUtil.extendShape<T, Augmentation>, UnknownKeys, Catchall>;\\n  /**\\n   * @deprecated Use `.extend` instead\\n   *  */\\n  augment: <Augmentation extends ZodRawShape>(\\n    augmentation: Augmentation,\\n  ) => ZodObject<\\n    objectUtil.extendShape<T, Augmentation>,\\n    UnknownKeys,\\n    Catchall,\\n    objectOutputType<objectUtil.extendShape<T, Augmentation>, Catchall, UnknownKeys>,\\n    objectInputType<objectUtil.extendShape<T, Augmentation>, Catchall, UnknownKeys>\\n  >;\\n  /**\\n   * Prior to zod@1.0.12 there was a bug in the\\n   * inferred type of merged objects. Please\\n   * upgrade if you are experiencing issues.\\n   */\\n  merge<Incoming extends AnyZodObject, Augmentation extends Incoming['shape']>(\\n    merging: Incoming,\\n  ): ZodObject<objectUtil.extendShape<T, Augmentation>, Incoming['_def']['unknownKeys'], Incoming['_def']['catchall']>;\\n  setKey<Key extends string, Schema extends ZodTypeAny>(\\n    key: Key,\\n    schema: Schema,\\n  ): ZodObject<\\n    T & {\\n      [k in Key]: Schema;\\n    },\\n    UnknownKeys,\\n    Catchall\\n  >;\\n  catchall<Index extends ZodTypeAny>(index: Index): ZodObject<T, UnknownKeys, Index>;\\n  pick<\\n    Mask extends util.Exactly<\\n      {\\n        [k in keyof T]?: true;\\n      },\\n      Mask\\n    >,\\n  >(mask: Mask): ZodObject<Pick<T, Extract<keyof T, keyof Mask>>, UnknownKeys, Catchall>;\\n  omit<\\n    Mask extends util.Exactly<\\n      {\\n        [k in keyof T]?: true;\\n      },\\n      Mask\\n    >,\\n  >(mask: Mask): ZodObject<Omit<T, keyof Mask>, UnknownKeys, Catchall>;\\n  /**\\n   * @deprecated\\n   */\\n  deepPartial(): partialUtil.DeepPartial<this>;\\n  partial(): ZodObject<\\n    {\\n      [k in keyof T]: ZodOptional<T[k]>;\\n    },\\n    UnknownKeys,\\n    Catchall\\n  >;\\n  partial<\\n    Mask extends util.Exactly<\\n      {\\n        [k in keyof T]?: true;\\n      },\\n      Mask\\n    >,\\n  >(\\n    mask: Mask,\\n  ): ZodObject<\\n    objectUtil.noNever<{\\n      [k in keyof T]: k extends keyof Mask ? ZodOptional<T[k]> : T[k];\\n    }>,\\n    UnknownKeys,\\n    Catchall\\n  >;\\n  required(): ZodObject<\\n    {\\n      [k in keyof T]: deoptional<T[k]>;\\n    },\\n    UnknownKeys,\\n    Catchall\\n  >;\\n  required<\\n    Mask extends util.Exactly<\\n      {\\n        [k in keyof T]?: true;\\n      },\\n      Mask\\n    >,\\n  >(\\n    mask: Mask,\\n  ): ZodObject<\\n    objectUtil.noNever<{\\n      [k in keyof T]: k extends keyof Mask ? deoptional<T[k]> : T[k];\\n    }>,\\n    UnknownKeys,\\n    Catchall\\n  >;\\n  keyof(): ZodEnum<enumUtil.UnionToTupleString<keyof T>>;\\n  static create: <T_1 extends ZodRawShape>(\\n    shape: T_1,\\n    params?: RawCreateParams,\\n  ) => ZodObject<\\n    T_1,\\n    'strip',\\n    ZodTypeAny,\\n    {\\n      [k in keyof objectUtil.addQuestionMarks<baseObjectOutputType<T_1>, any>]: objectUtil.addQuestionMarks<\\n        baseObjectOutputType<T_1>,\\n        any\\n      >[k];\\n    },\\n    { [k_1 in keyof baseObjectInputType<T_1>]: baseObjectInputType<T_1>[k_1] }\\n  >;\\n  static strictCreate: <T_1 extends ZodRawShape>(\\n    shape: T_1,\\n    params?: RawCreateParams,\\n  ) => ZodObject<\\n    T_1,\\n    'strict',\\n    ZodTypeAny,\\n    {\\n      [k in keyof objectUtil.addQuestionMarks<baseObjectOutputType<T_1>, any>]: objectUtil.addQuestionMarks<\\n        baseObjectOutputType<T_1>,\\n        any\\n      >[k];\\n    },\\n    { [k_1 in keyof baseObjectInputType<T_1>]: baseObjectInputType<T_1>[k_1] }\\n  >;\\n  static lazycreate: <T_1 extends ZodRawShape>(\\n    shape: () => T_1,\\n    params?: RawCreateParams,\\n  ) => ZodObject<\\n    T_1,\\n    'strip',\\n    ZodTypeAny,\\n    {\\n      [k in keyof objectUtil.addQuestionMarks<baseObjectOutputType<T_1>, any>]: objectUtil.addQuestionMarks<\\n        baseObjectOutputType<T_1>,\\n        any\\n      >[k];\\n    },\\n    { [k_1 in keyof baseObjectInputType<T_1>]: baseObjectInputType<T_1>[k_1] }\\n  >;\\n}\\ndeclare type AnyZodObject = ZodObject<any, any, any>;\\ndeclare type ZodUnionOptions = Readonly<[ZodTypeAny, ...ZodTypeAny[]]>;\\ninterface ZodUnionDef<T extends ZodUnionOptions = Readonly<[ZodTypeAny, ZodTypeAny, ...ZodTypeAny[]]>>\\n  extends ZodTypeDef {\\n  options: T;\\n  typeName: ZodFirstPartyTypeKind.ZodUnion;\\n}\\ndeclare class ZodUnion<T extends ZodUnionOptions> extends ZodType<\\n  T[number]['_output'],\\n  ZodUnionDef<T>,\\n  T[number]['_input']\\n> {\\n  _parse(input: ParseInput): ParseReturnType<this['_output']>;\\n  get options(): T;\\n  static create: <T_1 extends readonly [ZodTypeAny, ZodTypeAny, ...ZodTypeAny[]]>(\\n    types: T_1,\\n    params?: RawCreateParams,\\n  ) => ZodUnion<T_1>;\\n}\\ndeclare type ZodDiscriminatedUnionOption<Discriminator extends string> = ZodObject<\\n  {\\n    [key in Discriminator]: ZodTypeAny;\\n  } & ZodRawShape,\\n  UnknownKeysParam,\\n  ZodTypeAny\\n>;\\ninterface ZodDiscriminatedUnionDef<\\n  Discriminator extends string,\\n  Options extends ZodDiscriminatedUnionOption<string>[] = ZodDiscriminatedUnionOption<string>[],\\n> extends ZodTypeDef {\\n  discriminator: Discriminator;\\n  options: Options;\\n  optionsMap: Map<Primitive, ZodDiscriminatedUnionOption<any>>;\\n  typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion;\\n}\\ndeclare class ZodDiscriminatedUnion<\\n  Discriminator extends string,\\n  Options extends ZodDiscriminatedUnionOption<Discriminator>[],\\n> extends ZodType<output<Options[number]>, ZodDiscriminatedUnionDef<Discriminator, Options>, input<Options[number]>> {\\n  _parse(input: ParseInput): ParseReturnType<this['_output']>;\\n  get discriminator(): Discriminator;\\n  get options(): Options;\\n  get optionsMap(): Map<Primitive, ZodDiscriminatedUnionOption<any>>;\\n  /**\\n   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\\n   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\\n   * have a different value for each object in the union.\\n   * @param discriminator the name of the discriminator property\\n   * @param types an array of object schemas\\n   * @param params\\n   */\\n  static create<\\n    Discriminator extends string,\\n    Types extends [ZodDiscriminatedUnionOption<Discriminator>, ...ZodDiscriminatedUnionOption<Discriminator>[]],\\n  >(\\n    discriminator: Discriminator,\\n    options: Types,\\n    params?: RawCreateParams,\\n  ): ZodDiscriminatedUnion<Discriminator, Types>;\\n}\\ninterface ZodIntersectionDef<T extends ZodTypeAny = ZodTypeAny, U extends ZodTypeAny = ZodTypeAny> extends ZodTypeDef {\\n  left: T;\\n  right: U;\\n  typeName: ZodFirstPartyTypeKind.ZodIntersection;\\n}\\ndeclare class ZodIntersection<T extends ZodTypeAny, U extends ZodTypeAny> extends ZodType<\\n  T['_output'] & U['_output'],\\n  ZodIntersectionDef<T, U>,\\n  T['_input'] & U['_input']\\n> {\\n  _parse(input: ParseInput): ParseReturnType<this['_output']>;\\n  static create: <T_1 extends ZodTypeAny, U_1 extends ZodTypeAny>(\\n    left: T_1,\\n    right: U_1,\\n    params?: RawCreateParams,\\n  ) => ZodIntersection<T_1, U_1>;\\n}\\ndeclare type ZodTupleItems = [ZodTypeAny, ...ZodTypeAny[]];\\ndeclare type AssertArray<T> = T extends any[] ? T : never;\\ndeclare type OutputTypeOfTuple<T extends ZodTupleItems | []> = AssertArray<{\\n  [k in keyof T]: T[k] extends ZodType<any, any, any> ? T[k]['_output'] : never;\\n}>;\\ndeclare type OutputTypeOfTupleWithRest<\\n  T extends ZodTupleItems | [],\\n  Rest extends ZodTypeAny | null = null,\\n> = Rest extends ZodTypeAny ? [...OutputTypeOfTuple<T>, ...Rest['_output'][]] : OutputTypeOfTuple<T>;\\ndeclare type InputTypeOfTuple<T extends ZodTupleItems | []> = AssertArray<{\\n  [k in keyof T]: T[k] extends ZodType<any, any, any> ? T[k]['_input'] : never;\\n}>;\\ndeclare type InputTypeOfTupleWithRest<\\n  T extends ZodTupleItems | [],\\n  Rest extends ZodTypeAny | null = null,\\n> = Rest extends ZodTypeAny ? [...InputTypeOfTuple<T>, ...Rest['_input'][]] : InputTypeOfTuple<T>;\\ninterface ZodTupleDef<T extends ZodTupleItems | [] = ZodTupleItems, Rest extends ZodTypeAny | null = null>\\n  extends ZodTypeDef {\\n  items: T;\\n  rest: Rest;\\n  typeName: ZodFirstPartyTypeKind.ZodTuple;\\n}\\ndeclare type AnyZodTuple = ZodTuple<[ZodTypeAny, ...ZodTypeAny[]] | [], ZodTypeAny | null>;\\ndeclare class ZodTuple<\\n  T extends [ZodTypeAny, ...ZodTypeAny[]] | [] = [ZodTypeAny, ...ZodTypeAny[]],\\n  Rest extends ZodTypeAny | null = null,\\n> extends ZodType<OutputTypeOfTupleWithRest<T, Rest>, ZodTupleDef<T, Rest>, InputTypeOfTupleWithRest<T, Rest>> {\\n  _parse(input: ParseInput): ParseReturnType<this['_output']>;\\n  get items(): T;\\n  rest<Rest extends ZodTypeAny>(rest: Rest): ZodTuple<T, Rest>;\\n  static create: <T_1 extends [] | [ZodTypeAny, ...ZodTypeAny[]]>(\\n    schemas: T_1,\\n    params?: RawCreateParams,\\n  ) => ZodTuple<T_1, null>;\\n}\\ninterface ZodRecordDef<Key extends KeySchema = ZodString, Value extends ZodTypeAny = ZodTypeAny> extends ZodTypeDef {\\n  valueType: Value;\\n  keyType: Key;\\n  typeName: ZodFirstPartyTypeKind.ZodRecord;\\n}\\ndeclare type KeySchema = ZodType<string | number | symbol, any, any>;\\ndeclare type RecordType<K extends string | number | symbol, V> = [string] extends [K]\\n  ? Record<K, V>\\n  : [number] extends [K]\\n    ? Record<K, V>\\n    : [symbol] extends [K]\\n      ? Record<K, V>\\n      : [BRAND<string | number | symbol>] extends [K]\\n        ? Record<K, V>\\n        : Partial<Record<K, V>>;\\ndeclare class ZodRecord<Key extends KeySchema = ZodString, Value extends ZodTypeAny = ZodTypeAny> extends ZodType<\\n  RecordType<Key['_output'], Value['_output']>,\\n  ZodRecordDef<Key, Value>,\\n  RecordType<Key['_input'], Value['_input']>\\n> {\\n  get keySchema(): Key;\\n  get valueSchema(): Value;\\n  _parse(input: ParseInput): ParseReturnType<this['_output']>;\\n  get element(): Value;\\n  static create<Value extends ZodTypeAny>(valueType: Value, params?: RawCreateParams): ZodRecord<ZodString, Value>;\\n  static create<Keys extends KeySchema, Value extends ZodTypeAny>(\\n    keySchema: Keys,\\n    valueType: Value,\\n    params?: RawCreateParams,\\n  ): ZodRecord<Keys, Value>;\\n}\\ninterface ZodMapDef<Key extends ZodTypeAny = ZodTypeAny, Value extends ZodTypeAny = ZodTypeAny> extends ZodTypeDef {\\n  valueType: Value;\\n  keyType: Key;\\n  typeName: ZodFirstPartyTypeKind.ZodMap;\\n}\\ndeclare class ZodMap<Key extends ZodTypeAny = ZodTypeAny, Value extends ZodTypeAny = ZodTypeAny> extends ZodType<\\n  Map<Key['_output'], Value['_output']>,\\n  ZodMapDef<Key, Value>,\\n  Map<Key['_input'], Value['_input']>\\n> {\\n  get keySchema(): Key;\\n  get valueSchema(): Value;\\n  _parse(input: ParseInput): ParseReturnType<this['_output']>;\\n  static create: <Key_1 extends ZodTypeAny = ZodTypeAny, Value_1 extends ZodTypeAny = ZodTypeAny>(\\n    keyType: Key_1,\\n    valueType: Value_1,\\n    params?: RawCreateParams,\\n  ) => ZodMap<Key_1, Value_1>;\\n}\\ninterface ZodSetDef<Value extends ZodTypeAny = ZodTypeAny> extends ZodTypeDef {\\n  valueType: Value;\\n  typeName: ZodFirstPartyTypeKind.ZodSet;\\n  minSize: {\\n    value: number;\\n    message?: string;\\n  } | null;\\n  maxSize: {\\n    value: number;\\n    message?: string;\\n  } | null;\\n}\\ndeclare class ZodSet<Value extends ZodTypeAny = ZodTypeAny> extends ZodType<\\n  Set<Value['_output']>,\\n  ZodSetDef<Value>,\\n  Set<Value['_input']>\\n> {\\n  _parse(input: ParseInput): ParseReturnType<this['_output']>;\\n  min(minSize: number, message?: errorUtil.ErrMessage): this;\\n  max(maxSize: number, message?: errorUtil.ErrMessage): this;\\n  size(size: number, message?: errorUtil.ErrMessage): this;\\n  nonempty(message?: errorUtil.ErrMessage): ZodSet<Value>;\\n  static create: <Value_1 extends ZodTypeAny = ZodTypeAny>(\\n    valueType: Value_1,\\n    params?: RawCreateParams,\\n  ) => ZodSet<Value_1>;\\n}\\ninterface ZodFunctionDef<Args extends ZodTuple<any, any> = ZodTuple<any, any>, Returns extends ZodTypeAny = ZodTypeAny>\\n  extends ZodTypeDef {\\n  args: Args;\\n  returns: Returns;\\n  typeName: ZodFirstPartyTypeKind.ZodFunction;\\n}\\ndeclare type OuterTypeOfFunction<Args extends ZodTuple<any, any>, Returns extends ZodTypeAny> =\\n  Args['_input'] extends Array<any> ? (...args: Args['_input']) => Returns['_output'] : never;\\ndeclare type InnerTypeOfFunction<Args extends ZodTuple<any, any>, Returns extends ZodTypeAny> =\\n  Args['_output'] extends Array<any> ? (...args: Args['_output']) => Returns['_input'] : never;\\ndeclare class ZodFunction<Args extends ZodTuple<any, any>, Returns extends ZodTypeAny> extends ZodType<\\n  OuterTypeOfFunction<Args, Returns>,\\n  ZodFunctionDef<Args, Returns>,\\n  InnerTypeOfFunction<Args, Returns>\\n> {\\n  _parse(input: ParseInput): ParseReturnType<any>;\\n  parameters(): Args;\\n  returnType(): Returns;\\n  args<Items extends Parameters<(typeof ZodTuple)['create']>[0]>(\\n    ...items: Items\\n  ): ZodFunction<ZodTuple<Items, ZodUnknown>, Returns>;\\n  returns<NewReturnType extends ZodType<any, any, any>>(returnType: NewReturnType): ZodFunction<Args, NewReturnType>;\\n  implement<F extends InnerTypeOfFunction<Args, Returns>>(\\n    func: F,\\n  ): ReturnType<F> extends Returns['_output']\\n    ? (...args: Args['_input']) => ReturnType<F>\\n    : OuterTypeOfFunction<Args, Returns>;\\n  strictImplement(func: InnerTypeOfFunction<Args, Returns>): InnerTypeOfFunction<Args, Returns>;\\n  validate: <F extends InnerTypeOfFunction<Args, Returns>>(\\n    func: F,\\n  ) => ReturnType<F> extends Returns['_output']\\n    ? (...args: Args['_input']) => ReturnType<F>\\n    : OuterTypeOfFunction<Args, Returns>;\\n  static create(): ZodFunction<ZodTuple<[], ZodUnknown>, ZodUnknown>;\\n  static create<T extends AnyZodTuple = ZodTuple<[], ZodUnknown>>(args: T): ZodFunction<T, ZodUnknown>;\\n  static create<T extends AnyZodTuple, U extends ZodTypeAny>(args: T, returns: U): ZodFunction<T, U>;\\n  static create<T extends AnyZodTuple = ZodTuple<[], ZodUnknown>, U extends ZodTypeAny = ZodUnknown>(\\n    args: T,\\n    returns: U,\\n    params?: RawCreateParams,\\n  ): ZodFunction<T, U>;\\n}\\ninterface ZodLazyDef<T extends ZodTypeAny = ZodTypeAny> extends ZodTypeDef {\\n  getter: () => T;\\n  typeName: ZodFirstPartyTypeKind.ZodLazy;\\n}\\ndeclare class ZodLazy<T extends ZodTypeAny> extends ZodType<output<T>, ZodLazyDef<T>, input<T>> {\\n  get schema(): T;\\n  _parse(input: ParseInput): ParseReturnType<this['_output']>;\\n  static create: <T_1 extends ZodTypeAny>(getter: () => T_1, params?: RawCreateParams) => ZodLazy<T_1>;\\n}\\ninterface ZodLiteralDef<T = any> extends ZodTypeDef {\\n  value: T;\\n  typeName: ZodFirstPartyTypeKind.ZodLiteral;\\n}\\ndeclare class ZodLiteral<T> extends ZodType<T, ZodLiteralDef<T>, T> {\\n  _parse(input: ParseInput): ParseReturnType<this['_output']>;\\n  get value(): T;\\n  static create: <T_1 extends Primitive>(value: T_1, params?: RawCreateParams) => ZodLiteral<T_1>;\\n}\\ndeclare type ArrayKeys = keyof any[];\\ndeclare type Indices<T> = Exclude<keyof T, ArrayKeys>;\\ndeclare type EnumValues<T extends string = string> = readonly [T, ...T[]];\\ndeclare type Values<T extends EnumValues> = {\\n  [k in T[number]]: k;\\n};\\ninterface ZodEnumDef<T extends EnumValues = EnumValues> extends ZodTypeDef {\\n  values: T;\\n  typeName: ZodFirstPartyTypeKind.ZodEnum;\\n}\\ndeclare type Writeable<T> = {\\n  -readonly [P in keyof T]: T[P];\\n};\\ndeclare type FilterEnum<Values, ToExclude> = Values extends []\\n  ? []\\n  : Values extends [infer Head, ...infer Rest]\\n    ? Head extends ToExclude\\n      ? FilterEnum<Rest, ToExclude>\\n      : [Head, ...FilterEnum<Rest, ToExclude>]\\n    : never;\\ndeclare type typecast<A, T> = A extends T ? A : never;\\ndeclare function createZodEnum<U extends string, T extends Readonly<[U, ...U[]]>>(\\n  values: T,\\n  params?: RawCreateParams,\\n): ZodEnum<Writeable<T>>;\\ndeclare function createZodEnum<U extends string, T extends [U, ...U[]]>(\\n  values: T,\\n  params?: RawCreateParams,\\n): ZodEnum<T>;\\ndeclare class ZodEnum<T extends [string, ...string[]]> extends ZodType<T[number], ZodEnumDef<T>, T[number]> {\\n  #private;\\n  _parse(input: ParseInput): ParseReturnType<this['_output']>;\\n  get options(): T;\\n  get enum(): Values<T>;\\n  get Values(): Values<T>;\\n  get Enum(): Values<T>;\\n  extract<ToExtract extends readonly [T[number], ...T[number][]]>(\\n    values: ToExtract,\\n    newDef?: RawCreateParams,\\n  ): ZodEnum<Writeable<ToExtract>>;\\n  exclude<ToExclude extends readonly [T[number], ...T[number][]]>(\\n    values: ToExclude,\\n    newDef?: RawCreateParams,\\n  ): ZodEnum<typecast<Writeable<FilterEnum<T, ToExclude[number]>>, [string, ...string[]]>>;\\n  static create: typeof createZodEnum;\\n}\\ninterface ZodNativeEnumDef<T extends EnumLike = EnumLike> extends ZodTypeDef {\\n  values: T;\\n  typeName: ZodFirstPartyTypeKind.ZodNativeEnum;\\n}\\ndeclare type EnumLike = {\\n  [k: string]: string | number;\\n  [nu: number]: string;\\n};\\ndeclare class ZodNativeEnum<T extends EnumLike> extends ZodType<T[keyof T], ZodNativeEnumDef<T>, T[keyof T]> {\\n  #private;\\n  _parse(input: ParseInput): ParseReturnType<T[keyof T]>;\\n  get enum(): T;\\n  static create: <T_1 extends EnumLike>(values: T_1, params?: RawCreateParams) => ZodNativeEnum<T_1>;\\n}\\ninterface ZodPromiseDef<T extends ZodTypeAny = ZodTypeAny> extends ZodTypeDef {\\n  type: T;\\n  typeName: ZodFirstPartyTypeKind.ZodPromise;\\n}\\ndeclare class ZodPromise<T extends ZodTypeAny> extends ZodType<\\n  Promise<T['_output']>,\\n  ZodPromiseDef<T>,\\n  Promise<T['_input']>\\n> {\\n  unwrap(): T;\\n  _parse(input: ParseInput): ParseReturnType<this['_output']>;\\n  static create: <T_1 extends ZodTypeAny>(schema: T_1, params?: RawCreateParams) => ZodPromise<T_1>;\\n}\\ndeclare type Refinement<T> = (arg: T, ctx: RefinementCtx) => any;\\ndeclare type SuperRefinement<T> = (arg: T, ctx: RefinementCtx) => void | Promise<void>;\\ndeclare type RefinementEffect<T> = {\\n  type: 'refinement';\\n  refinement: (arg: T, ctx: RefinementCtx) => any;\\n};\\ndeclare type TransformEffect<T> = {\\n  type: 'transform';\\n  transform: (arg: T, ctx: RefinementCtx) => any;\\n};\\ndeclare type PreprocessEffect<T> = {\\n  type: 'preprocess';\\n  transform: (arg: T, ctx: RefinementCtx) => any;\\n};\\ndeclare type Effect<T> = RefinementEffect<T> | TransformEffect<T> | PreprocessEffect<T>;\\ninterface ZodEffectsDef<T extends ZodTypeAny = ZodTypeAny> extends ZodTypeDef {\\n  schema: T;\\n  typeName: ZodFirstPartyTypeKind.ZodEffects;\\n  effect: Effect<any>;\\n}\\ndeclare class ZodEffects<T extends ZodTypeAny, Output = output<T>, Input = input<T>> extends ZodType<\\n  Output,\\n  ZodEffectsDef<T>,\\n  Input\\n> {\\n  innerType(): T;\\n  sourceType(): T;\\n  _parse(input: ParseInput): ParseReturnType<this['_output']>;\\n  static create: <I extends ZodTypeAny>(\\n    schema: I,\\n    effect: Effect<I['_output']>,\\n    params?: RawCreateParams,\\n  ) => ZodEffects<I, I['_output'], input<I>>;\\n  static createWithPreprocess: <I extends ZodTypeAny>(\\n    preprocess: (arg: unknown, ctx: RefinementCtx) => unknown,\\n    schema: I,\\n    params?: RawCreateParams,\\n  ) => ZodEffects<I, I['_output'], unknown>;\\n}\\n\\ninterface ZodOptionalDef<T extends ZodTypeAny = ZodTypeAny> extends ZodTypeDef {\\n  innerType: T;\\n  typeName: ZodFirstPartyTypeKind.ZodOptional;\\n}\\ndeclare type ZodOptionalType<T extends ZodTypeAny> = ZodOptional<T>;\\ndeclare class ZodOptional<T extends ZodTypeAny> extends ZodType<\\n  T['_output'] | undefined,\\n  ZodOptionalDef<T>,\\n  T['_input'] | undefined\\n> {\\n  _parse(input: ParseInput): ParseReturnType<this['_output']>;\\n  unwrap(): T;\\n  static create: <T_1 extends ZodTypeAny>(type: T_1, params?: RawCreateParams) => ZodOptional<T_1>;\\n}\\ninterface ZodNullableDef<T extends ZodTypeAny = ZodTypeAny> extends ZodTypeDef {\\n  innerType: T;\\n  typeName: ZodFirstPartyTypeKind.ZodNullable;\\n}\\ndeclare type ZodNullableType<T extends ZodTypeAny> = ZodNullable<T>;\\ndeclare class ZodNullable<T extends ZodTypeAny> extends ZodType<\\n  T['_output'] | null,\\n  ZodNullableDef<T>,\\n  T['_input'] | null\\n> {\\n  _parse(input: ParseInput): ParseReturnType<this['_output']>;\\n  unwrap(): T;\\n  static create: <T_1 extends ZodTypeAny>(type: T_1, params?: RawCreateParams) => ZodNullable<T_1>;\\n}\\ninterface ZodDefaultDef<T extends ZodTypeAny = ZodTypeAny> extends ZodTypeDef {\\n  innerType: T;\\n  defaultValue: () => util.noUndefined<T['_input']>;\\n  typeName: ZodFirstPartyTypeKind.ZodDefault;\\n}\\ndeclare class ZodDefault<T extends ZodTypeAny> extends ZodType<\\n  util.noUndefined<T['_output']>,\\n  ZodDefaultDef<T>,\\n  T['_input'] | undefined\\n> {\\n  _parse(input: ParseInput): ParseReturnType<this['_output']>;\\n  removeDefault(): T;\\n  static create: <T_1 extends ZodTypeAny>(\\n    type: T_1,\\n    params: {\\n      errorMap?: ZodErrorMap | undefined;\\n      invalid_type_error?: string | undefined;\\n      required_error?: string | undefined;\\n      message?: string | undefined;\\n      description?: string | undefined;\\n    } & {\\n      default: T_1['_input'] | (() => util.noUndefined<T_1['_input']>);\\n    },\\n  ) => ZodDefault<T_1>;\\n}\\ninterface ZodCatchDef<T extends ZodTypeAny = ZodTypeAny> extends ZodTypeDef {\\n  innerType: T;\\n  catchValue: (ctx: { error: ZodError; input: unknown }) => T['_input'];\\n  typeName: ZodFirstPartyTypeKind.ZodCatch;\\n}\\ndeclare class ZodCatch<T extends ZodTypeAny> extends ZodType<T['_output'], ZodCatchDef<T>, unknown> {\\n  _parse(input: ParseInput): ParseReturnType<this['_output']>;\\n  removeCatch(): T;\\n  static create: <T_1 extends ZodTypeAny>(\\n    type: T_1,\\n    params: {\\n      errorMap?: ZodErrorMap | undefined;\\n      invalid_type_error?: string | undefined;\\n      required_error?: string | undefined;\\n      message?: string | undefined;\\n      description?: string | undefined;\\n    } & {\\n      catch: T_1['_output'] | (() => T_1['_output']);\\n    },\\n  ) => ZodCatch<T_1>;\\n}\\ninterface ZodNaNDef extends ZodTypeDef {\\n  typeName: ZodFirstPartyTypeKind.ZodNaN;\\n}\\ndeclare class ZodNaN extends ZodType<number, ZodNaNDef, number> {\\n  _parse(input: ParseInput): ParseReturnType<any>;\\n  static create: (params?: RawCreateParams) => ZodNaN;\\n}\\ninterface ZodBrandedDef<T extends ZodTypeAny> extends ZodTypeDef {\\n  type: T;\\n  typeName: ZodFirstPartyTypeKind.ZodBranded;\\n}\\ndeclare const BRAND: unique symbol;\\ndeclare type BRAND<T extends string | number | symbol> = {\\n  [BRAND]: {\\n    [k in T]: true;\\n  };\\n};\\ndeclare class ZodBranded<T extends ZodTypeAny, B extends string | number | symbol> extends ZodType<\\n  T['_output'] & BRAND<B>,\\n  ZodBrandedDef<T>,\\n  T['_input']\\n> {\\n  _parse(input: ParseInput): ParseReturnType<any>;\\n  unwrap(): T;\\n}\\ninterface ZodPipelineDef<A extends ZodTypeAny, B extends ZodTypeAny> extends ZodTypeDef {\\n  in: A;\\n  out: B;\\n  typeName: ZodFirstPartyTypeKind.ZodPipeline;\\n}\\ndeclare class ZodPipeline<A extends ZodTypeAny, B extends ZodTypeAny> extends ZodType<\\n  B['_output'],\\n  ZodPipelineDef<A, B>,\\n  A['_input']\\n> {\\n  _parse(input: ParseInput): ParseReturnType<any>;\\n  static create<A extends ZodTypeAny, B extends ZodTypeAny>(a: A, b: B): ZodPipeline<A, B>;\\n}\\ndeclare type BuiltIn =\\n  | (((...args: any[]) => any) | (new (...args: any[]) => any))\\n  | {\\n      readonly [Symbol.toStringTag]: string;\\n    }\\n  | Date\\n  | Error\\n  | Generator\\n  | Promise<unknown>\\n  | RegExp;\\ndeclare type MakeReadonly<T> =\\n  T extends Map<infer K, infer V>\\n    ? ReadonlyMap<K, V>\\n    : T extends Set<infer V>\\n      ? ReadonlySet<V>\\n      : T extends [infer Head, ...infer Tail]\\n        ? readonly [Head, ...Tail]\\n        : T extends Array<infer V>\\n          ? ReadonlyArray<V>\\n          : T extends BuiltIn\\n            ? T\\n            : Readonly<T>;\\ninterface ZodReadonlyDef<T extends ZodTypeAny = ZodTypeAny> extends ZodTypeDef {\\n  innerType: T;\\n  typeName: ZodFirstPartyTypeKind.ZodReadonly;\\n}\\ndeclare class ZodReadonly<T extends ZodTypeAny> extends ZodType<\\n  MakeReadonly<T['_output']>,\\n  ZodReadonlyDef<T>,\\n  MakeReadonly<T['_input']>\\n> {\\n  _parse(input: ParseInput): ParseReturnType<this['_output']>;\\n  static create: <T_1 extends ZodTypeAny>(type: T_1, params?: RawCreateParams) => ZodReadonly<T_1>;\\n  unwrap(): T;\\n}\\ndeclare type CustomParams = CustomErrorParams & {\\n  fatal?: boolean;\\n};\\ndeclare function custom<T>(\\n  check?: (data: any) => any,\\n  params?: string | CustomParams | ((input: any) => CustomParams),\\n  /**\\n   * @deprecated\\n   *\\n   * Pass `fatal` into the params object instead:\\n   *\\n   * ```ts\\n   * z.string().custom((val) => val.length > 5, { fatal: false })\\n   * ```\\n   *\\n   */\\n  fatal?: boolean,\\n): ZodType<T, ZodTypeDef, T>;\\n\\ndeclare const late: {\\n  object: <T extends ZodRawShape>(\\n    shape: () => T,\\n    params?: RawCreateParams,\\n  ) => ZodObject<\\n    T,\\n    'strip',\\n    ZodTypeAny,\\n    {\\n      [k in keyof objectUtil.addQuestionMarks<baseObjectOutputType<T>, any>]: objectUtil.addQuestionMarks<\\n        baseObjectOutputType<T>,\\n        any\\n      >[k];\\n    },\\n    { [k_1 in keyof baseObjectInputType<T>]: baseObjectInputType<T>[k_1] }\\n  >;\\n};\\ndeclare enum ZodFirstPartyTypeKind {\\n  ZodString = 'ZodString',\\n  ZodNumber = 'ZodNumber',\\n  ZodNaN = 'ZodNaN',\\n  ZodBigInt = 'ZodBigInt',\\n  ZodBoolean = 'ZodBoolean',\\n  ZodDate = 'ZodDate',\\n  ZodSymbol = 'ZodSymbol',\\n  ZodUndefined = 'ZodUndefined',\\n  ZodNull = 'ZodNull',\\n  ZodAny = 'ZodAny',\\n  ZodUnknown = 'ZodUnknown',\\n  ZodNever = 'ZodNever',\\n  ZodVoid = 'ZodVoid',\\n  ZodArray = 'ZodArray',\\n  ZodObject = 'ZodObject',\\n  ZodUnion = 'ZodUnion',\\n  ZodDiscriminatedUnion = 'ZodDiscriminatedUnion',\\n  ZodIntersection = 'ZodIntersection',\\n  ZodTuple = 'ZodTuple',\\n  ZodRecord = 'ZodRecord',\\n  ZodMap = 'ZodMap',\\n  ZodSet = 'ZodSet',\\n  ZodFunction = 'ZodFunction',\\n  ZodLazy = 'ZodLazy',\\n  ZodLiteral = 'ZodLiteral',\\n  ZodEnum = 'ZodEnum',\\n  ZodEffects = 'ZodEffects',\\n  ZodNativeEnum = 'ZodNativeEnum',\\n  ZodOptional = 'ZodOptional',\\n  ZodNullable = 'ZodNullable',\\n  ZodDefault = 'ZodDefault',\\n  ZodCatch = 'ZodCatch',\\n  ZodPromise = 'ZodPromise',\\n  ZodBranded = 'ZodBranded',\\n  ZodPipeline = 'ZodPipeline',\\n  ZodReadonly = 'ZodReadonly',\\n}\\ndeclare type ZodFirstPartySchemaTypes =\\n  | ZodString\\n  | ZodNumber\\n  | ZodNaN\\n  | ZodBigInt\\n  | ZodBoolean\\n  | ZodDate\\n  | ZodUndefined\\n  | ZodNull\\n  | ZodAny\\n  | ZodUnknown\\n  | ZodNever\\n  | ZodVoid\\n  | ZodArray<any, any>\\n  | ZodObject<any, any, any>\\n  | ZodUnion<any>\\n  | ZodDiscriminatedUnion<any, any>\\n  | ZodIntersection<any, any>\\n  | ZodTuple<any, any>\\n  | ZodRecord<any, any>\\n  | ZodMap<any>\\n  | ZodSet<any>\\n  | ZodFunction<any, any>\\n  | ZodLazy<any>\\n  | ZodLiteral<any>\\n  | ZodEnum<any>\\n  | ZodEffects<any, any, any>\\n  | ZodNativeEnum<any>\\n  | ZodOptional<any>\\n  | ZodNullable<any>\\n  | ZodDefault<any>\\n  | ZodCatch<any>\\n  | ZodPromise<any>\\n  | ZodBranded<any, any>\\n  | ZodPipeline<any, any>\\n  | ZodReadonly<any>\\n  | ZodSymbol;\\ndeclare abstract class Class {\\n  constructor(..._: any[]);\\n}\\ndeclare const instanceOfType: <T extends typeof Class>(\\n  cls: T,\\n  params?: CustomParams,\\n) => ZodType<InstanceType<T>, ZodTypeDef, InstanceType<T>>;\\ndeclare const stringType: (\\n  params?:\\n    | ({\\n        errorMap?: ZodErrorMap | undefined;\\n        invalid_type_error?: string | undefined;\\n        required_error?: string | undefined;\\n        message?: string | undefined;\\n        description?: string | undefined;\\n      } & {\\n        coerce?: true | undefined;\\n      })\\n    | undefined,\\n) => ZodString;\\ndeclare const numberType: (\\n  params?:\\n    | ({\\n        errorMap?: ZodErrorMap | undefined;\\n        invalid_type_error?: string | undefined;\\n        required_error?: string | undefined;\\n        message?: string | undefined;\\n        description?: string | undefined;\\n      } & {\\n        coerce?: boolean | undefined;\\n      })\\n    | undefined,\\n) => ZodNumber;\\ndeclare const nanType: (params?: RawCreateParams) => ZodNaN;\\ndeclare const bigIntType: (\\n  params?:\\n    | ({\\n        errorMap?: ZodErrorMap | undefined;\\n        invalid_type_error?: string | undefined;\\n        required_error?: string | undefined;\\n        message?: string | undefined;\\n        description?: string | undefined;\\n      } & {\\n        coerce?: boolean | undefined;\\n      })\\n    | undefined,\\n) => ZodBigInt;\\ndeclare const booleanType: (\\n  params?:\\n    | ({\\n        errorMap?: ZodErrorMap | undefined;\\n        invalid_type_error?: string | undefined;\\n        required_error?: string | undefined;\\n        message?: string | undefined;\\n        description?: string | undefined;\\n      } & {\\n        coerce?: boolean | undefined;\\n      })\\n    | undefined,\\n) => ZodBoolean;\\ndeclare const dateType: (\\n  params?:\\n    | ({\\n        errorMap?: ZodErrorMap | undefined;\\n        invalid_type_error?: string | undefined;\\n        required_error?: string | undefined;\\n        message?: string | undefined;\\n        description?: string | undefined;\\n      } & {\\n        coerce?: boolean | undefined;\\n      })\\n    | undefined,\\n) => ZodDate;\\ndeclare const symbolType: (params?: RawCreateParams) => ZodSymbol;\\ndeclare const undefinedType: (params?: RawCreateParams) => ZodUndefined;\\ndeclare const nullType: (params?: RawCreateParams) => ZodNull;\\ndeclare const anyType: (params?: RawCreateParams) => ZodAny;\\ndeclare const unknownType: (params?: RawCreateParams) => ZodUnknown;\\ndeclare const neverType: (params?: RawCreateParams) => ZodNever;\\ndeclare const voidType: (params?: RawCreateParams) => ZodVoid;\\ndeclare const arrayType: <T extends ZodTypeAny>(schema: T, params?: RawCreateParams) => ZodArray<T, 'many'>;\\ndeclare const objectType: <T extends ZodRawShape>(\\n  shape: T,\\n  params?: RawCreateParams,\\n) => ZodObject<\\n  T,\\n  'strip',\\n  ZodTypeAny,\\n  {\\n    [k in keyof objectUtil.addQuestionMarks<baseObjectOutputType<T>, any>]: objectUtil.addQuestionMarks<\\n      baseObjectOutputType<T>,\\n      any\\n    >[k];\\n  },\\n  { [k_1 in keyof baseObjectInputType<T>]: baseObjectInputType<T>[k_1] }\\n>;\\ndeclare const strictObjectType: <T extends ZodRawShape>(\\n  shape: T,\\n  params?: RawCreateParams,\\n) => ZodObject<\\n  T,\\n  'strict',\\n  ZodTypeAny,\\n  {\\n    [k in keyof objectUtil.addQuestionMarks<baseObjectOutputType<T>, any>]: objectUtil.addQuestionMarks<\\n      baseObjectOutputType<T>,\\n      any\\n    >[k];\\n  },\\n  { [k_1 in keyof baseObjectInputType<T>]: baseObjectInputType<T>[k_1] }\\n>;\\ndeclare const unionType: <T extends readonly [ZodTypeAny, ZodTypeAny, ...ZodTypeAny[]]>(\\n  types: T,\\n  params?: RawCreateParams,\\n) => ZodUnion<T>;\\ndeclare const discriminatedUnionType: typeof ZodDiscriminatedUnion.create;\\ndeclare const intersectionType: <T extends ZodTypeAny, U extends ZodTypeAny>(\\n  left: T,\\n  right: U,\\n  params?: RawCreateParams,\\n) => ZodIntersection<T, U>;\\ndeclare const tupleType: <T extends [] | [ZodTypeAny, ...ZodTypeAny[]]>(\\n  schemas: T,\\n  params?: RawCreateParams,\\n) => ZodTuple<T, null>;\\ndeclare const recordType: typeof ZodRecord.create;\\ndeclare const mapType: <Key extends ZodTypeAny = ZodTypeAny, Value extends ZodTypeAny = ZodTypeAny>(\\n  keyType: Key,\\n  valueType: Value,\\n  params?: RawCreateParams,\\n) => ZodMap<Key, Value>;\\ndeclare const setType: <Value extends ZodTypeAny = ZodTypeAny>(\\n  valueType: Value,\\n  params?: RawCreateParams,\\n) => ZodSet<Value>;\\ndeclare const functionType: typeof ZodFunction.create;\\ndeclare const lazyType: <T extends ZodTypeAny>(getter: () => T, params?: RawCreateParams) => ZodLazy<T>;\\ndeclare const literalType: <T extends Primitive>(value: T, params?: RawCreateParams) => ZodLiteral<T>;\\ndeclare const enumType: typeof createZodEnum;\\ndeclare const nativeEnumType: <T extends EnumLike>(values: T, params?: RawCreateParams) => ZodNativeEnum<T>;\\ndeclare const promiseType: <T extends ZodTypeAny>(schema: T, params?: RawCreateParams) => ZodPromise<T>;\\ndeclare const effectsType: <I extends ZodTypeAny>(\\n  schema: I,\\n  effect: Effect<I['_output']>,\\n  params?: RawCreateParams,\\n) => ZodEffects<I, I['_output'], input<I>>;\\ndeclare const optionalType: <T extends ZodTypeAny>(type: T, params?: RawCreateParams) => ZodOptional<T>;\\ndeclare const nullableType: <T extends ZodTypeAny>(type: T, params?: RawCreateParams) => ZodNullable<T>;\\ndeclare const preprocessType: <I extends ZodTypeAny>(\\n  preprocess: (arg: unknown, ctx: RefinementCtx) => unknown,\\n  schema: I,\\n  params?: RawCreateParams,\\n) => ZodEffects<I, I['_output'], unknown>;\\ndeclare const pipelineType: typeof ZodPipeline.create;\\ndeclare const ostring: () => ZodOptional<ZodString>;\\ndeclare const onumber: () => ZodOptional<ZodNumber>;\\ndeclare const oboolean: () => ZodOptional<ZodBoolean>;\\ndeclare const coerce: {\\n  string: (\\n    params?:\\n      | ({\\n          errorMap?: ZodErrorMap | undefined;\\n          invalid_type_error?: string | undefined;\\n          required_error?: string | undefined;\\n          message?: string | undefined;\\n          description?: string | undefined;\\n        } & {\\n          coerce?: true | undefined;\\n        })\\n      | undefined,\\n  ) => ZodString;\\n  number: (\\n    params?:\\n      | ({\\n          errorMap?: ZodErrorMap | undefined;\\n          invalid_type_error?: string | undefined;\\n          required_error?: string | undefined;\\n          message?: string | undefined;\\n          description?: string | undefined;\\n        } & {\\n          coerce?: boolean | undefined;\\n        })\\n      | undefined,\\n  ) => ZodNumber;\\n  boolean: (\\n    params?:\\n      | ({\\n          errorMap?: ZodErrorMap | undefined;\\n          invalid_type_error?: string | undefined;\\n          required_error?: string | undefined;\\n          message?: string | undefined;\\n          description?: string | undefined;\\n        } & {\\n          coerce?: boolean | undefined;\\n        })\\n      | undefined,\\n  ) => ZodBoolean;\\n  bigint: (\\n    params?:\\n      | ({\\n          errorMap?: ZodErrorMap | undefined;\\n          invalid_type_error?: string | undefined;\\n          required_error?: string | undefined;\\n          message?: string | undefined;\\n          description?: string | undefined;\\n        } & {\\n          coerce?: boolean | undefined;\\n        })\\n      | undefined,\\n  ) => ZodBigInt;\\n  date: (\\n    params?:\\n      | ({\\n          errorMap?: ZodErrorMap | undefined;\\n          invalid_type_error?: string | undefined;\\n          required_error?: string | undefined;\\n          message?: string | undefined;\\n          description?: string | undefined;\\n        } & {\\n          coerce?: boolean | undefined;\\n        })\\n      | undefined,\\n  ) => ZodDate;\\n};\\n\\ndeclare const NEVER: never;\\n\\n//# sourceMappingURL=external.d.ts.map\\n\\ndeclare const z_setErrorMap: typeof setErrorMap;\\ndeclare const z_getErrorMap: typeof getErrorMap;\\ndeclare const z_makeIssue: typeof makeIssue;\\ntype z_ParseParams = ParseParams;\\ntype z_ParsePathComponent = ParsePathComponent;\\ntype z_ParsePath = ParsePath;\\ndeclare const z_EMPTY_PATH: typeof EMPTY_PATH;\\ntype z_ParseContext = ParseContext;\\ntype z_ParseInput = ParseInput;\\ndeclare const z_addIssueToContext: typeof addIssueToContext;\\ntype z_ObjectPair = ObjectPair;\\ntype z_ParseStatus = ParseStatus;\\ndeclare const z_ParseStatus: typeof ParseStatus;\\ntype z_ParseResult = ParseResult;\\ndeclare const z_INVALID: typeof INVALID;\\ndeclare const z_DIRTY: typeof DIRTY;\\ndeclare const z_OK: typeof OK;\\ntype z_SyncParseReturnType<T = any> = SyncParseReturnType<T>;\\ntype z_AsyncParseReturnType<T> = AsyncParseReturnType<T>;\\ntype z_ParseReturnType<T> = ParseReturnType<T>;\\ndeclare const z_isAborted: typeof isAborted;\\ndeclare const z_isDirty: typeof isDirty;\\ndeclare const z_isValid: typeof isValid;\\ndeclare const z_isAsync: typeof isAsync;\\ntype z_Primitive = Primitive;\\ntype z_Scalars = Scalars;\\ndeclare const z_util: typeof util;\\ndeclare const z_objectUtil: typeof objectUtil;\\ntype z_ZodParsedType = ZodParsedType;\\ndeclare const z_getParsedType: typeof getParsedType;\\ndeclare const z_oboolean: typeof oboolean;\\ndeclare const z_onumber: typeof onumber;\\ndeclare const z_ostring: typeof ostring;\\ntype z_RefinementCtx = RefinementCtx;\\ntype z_ZodRawShape = ZodRawShape;\\ntype z_ZodTypeAny = ZodTypeAny;\\ntype z_TypeOf<T extends ZodType<any, any, any>> = TypeOf<T>;\\ntype z_input<T extends ZodType<any, any, any>> = input<T>;\\ntype z_output<T extends ZodType<any, any, any>> = output<T>;\\ntype z_CustomErrorParams = CustomErrorParams;\\ntype z_ZodTypeDef = ZodTypeDef;\\ntype z_RawCreateParams = RawCreateParams;\\ntype z_ProcessedCreateParams = ProcessedCreateParams;\\ntype z_SafeParseSuccess<Output> = SafeParseSuccess<Output>;\\ntype z_SafeParseError<Input> = SafeParseError<Input>;\\ntype z_SafeParseReturnType<Input, Output> = SafeParseReturnType<Input, Output>;\\ntype z_ZodType<Output = any, Def extends ZodTypeDef = ZodTypeDef, Input = Output> = ZodType<Output, Def, Input>;\\ndeclare const z_ZodType: typeof ZodType;\\ntype z_IpVersion = IpVersion;\\ntype z_ZodStringCheck = ZodStringCheck;\\ntype z_ZodStringDef = ZodStringDef;\\ndeclare const z_datetimeRegex: typeof datetimeRegex;\\ntype z_ZodString = ZodString;\\ndeclare const z_ZodString: typeof ZodString;\\ntype z_ZodNumberCheck = ZodNumberCheck;\\ntype z_ZodNumberDef = ZodNumberDef;\\ntype z_ZodNumber = ZodNumber;\\ndeclare const z_ZodNumber: typeof ZodNumber;\\ntype z_ZodBigIntCheck = ZodBigIntCheck;\\ntype z_ZodBigIntDef = ZodBigIntDef;\\ntype z_ZodBigInt = ZodBigInt;\\ndeclare const z_ZodBigInt: typeof ZodBigInt;\\ntype z_ZodBooleanDef = ZodBooleanDef;\\ntype z_ZodBoolean = ZodBoolean;\\ndeclare const z_ZodBoolean: typeof ZodBoolean;\\ntype z_ZodDateCheck = ZodDateCheck;\\ntype z_ZodDateDef = ZodDateDef;\\ntype z_ZodDate = ZodDate;\\ndeclare const z_ZodDate: typeof ZodDate;\\ntype z_ZodSymbolDef = ZodSymbolDef;\\ntype z_ZodSymbol = ZodSymbol;\\ndeclare const z_ZodSymbol: typeof ZodSymbol;\\ntype z_ZodUndefinedDef = ZodUndefinedDef;\\ntype z_ZodUndefined = ZodUndefined;\\ndeclare const z_ZodUndefined: typeof ZodUndefined;\\ntype z_ZodNullDef = ZodNullDef;\\ntype z_ZodNull = ZodNull;\\ndeclare const z_ZodNull: typeof ZodNull;\\ntype z_ZodAnyDef = ZodAnyDef;\\ntype z_ZodAny = ZodAny;\\ndeclare const z_ZodAny: typeof ZodAny;\\ntype z_ZodUnknownDef = ZodUnknownDef;\\ntype z_ZodUnknown = ZodUnknown;\\ndeclare const z_ZodUnknown: typeof ZodUnknown;\\ntype z_ZodNeverDef = ZodNeverDef;\\ntype z_ZodNever = ZodNever;\\ndeclare const z_ZodNever: typeof ZodNever;\\ntype z_ZodVoidDef = ZodVoidDef;\\ntype z_ZodVoid = ZodVoid;\\ndeclare const z_ZodVoid: typeof ZodVoid;\\ntype z_ZodArrayDef<T extends ZodTypeAny = ZodTypeAny> = ZodArrayDef<T>;\\ntype z_ArrayCardinality = ArrayCardinality;\\ntype z_arrayOutputType<T extends ZodTypeAny, Cardinality extends ArrayCardinality = 'many'> = arrayOutputType<\\n  T,\\n  Cardinality\\n>;\\ntype z_ZodArray<T extends ZodTypeAny, Cardinality extends ArrayCardinality = 'many'> = ZodArray<T, Cardinality>;\\ndeclare const z_ZodArray: typeof ZodArray;\\ntype z_ZodNonEmptyArray<T extends ZodTypeAny> = ZodNonEmptyArray<T>;\\ntype z_UnknownKeysParam = UnknownKeysParam;\\ntype z_ZodObjectDef<\\n  T extends ZodRawShape = ZodRawShape,\\n  UnknownKeys extends UnknownKeysParam = UnknownKeysParam,\\n  Catchall extends ZodTypeAny = ZodTypeAny,\\n> = ZodObjectDef<T, UnknownKeys, Catchall>;\\ntype z_mergeTypes<A, B> = mergeTypes<A, B>;\\ntype z_objectOutputType<\\n  Shape extends ZodRawShape,\\n  Catchall extends ZodTypeAny,\\n  UnknownKeys extends UnknownKeysParam = UnknownKeysParam,\\n> = objectOutputType<Shape, Catchall, UnknownKeys>;\\ntype z_baseObjectOutputType<Shape extends ZodRawShape> = baseObjectOutputType<Shape>;\\ntype z_objectInputType<\\n  Shape extends ZodRawShape,\\n  Catchall extends ZodTypeAny,\\n  UnknownKeys extends UnknownKeysParam = UnknownKeysParam,\\n> = objectInputType<Shape, Catchall, UnknownKeys>;\\ntype z_baseObjectInputType<Shape extends ZodRawShape> = baseObjectInputType<Shape>;\\ntype z_CatchallOutput<T extends ZodType> = CatchallOutput<T>;\\ntype z_CatchallInput<T extends ZodType> = CatchallInput<T>;\\ntype z_PassthroughType<T extends UnknownKeysParam> = PassthroughType<T>;\\ntype z_deoptional<T extends ZodTypeAny> = deoptional<T>;\\ntype z_SomeZodObject = SomeZodObject;\\ntype z_noUnrecognized<Obj extends object, Shape extends object> = noUnrecognized<Obj, Shape>;\\ntype z_ZodObject<\\n  T extends ZodRawShape,\\n  UnknownKeys extends UnknownKeysParam = UnknownKeysParam,\\n  Catchall extends ZodTypeAny = ZodTypeAny,\\n  Output = objectOutputType<T, Catchall, UnknownKeys>,\\n  Input = objectInputType<T, Catchall, UnknownKeys>,\\n> = ZodObject<T, UnknownKeys, Catchall, Output, Input>;\\ndeclare const z_ZodObject: typeof ZodObject;\\ntype z_AnyZodObject = AnyZodObject;\\ntype z_ZodUnionOptions = ZodUnionOptions;\\ntype z_ZodUnionDef<T extends ZodUnionOptions = Readonly<[ZodTypeAny, ZodTypeAny, ...ZodTypeAny[]]>> = ZodUnionDef<T>;\\ntype z_ZodUnion<T extends ZodUnionOptions> = ZodUnion<T>;\\ndeclare const z_ZodUnion: typeof ZodUnion;\\ntype z_ZodDiscriminatedUnionOption<Discriminator extends string> = ZodDiscriminatedUnionOption<Discriminator>;\\ntype z_ZodDiscriminatedUnionDef<\\n  Discriminator extends string,\\n  Options extends ZodDiscriminatedUnionOption<string>[] = ZodDiscriminatedUnionOption<string>[],\\n> = ZodDiscriminatedUnionDef<Discriminator, Options>;\\ntype z_ZodDiscriminatedUnion<\\n  Discriminator extends string,\\n  Options extends ZodDiscriminatedUnionOption<Discriminator>[],\\n> = ZodDiscriminatedUnion<Discriminator, Options>;\\ndeclare const z_ZodDiscriminatedUnion: typeof ZodDiscriminatedUnion;\\ntype z_ZodIntersectionDef<T extends ZodTypeAny = ZodTypeAny, U extends ZodTypeAny = ZodTypeAny> = ZodIntersectionDef<\\n  T,\\n  U\\n>;\\ntype z_ZodIntersection<T extends ZodTypeAny, U extends ZodTypeAny> = ZodIntersection<T, U>;\\ndeclare const z_ZodIntersection: typeof ZodIntersection;\\ntype z_ZodTupleItems = ZodTupleItems;\\ntype z_AssertArray<T> = AssertArray<T>;\\ntype z_OutputTypeOfTuple<T extends ZodTupleItems | []> = OutputTypeOfTuple<T>;\\ntype z_OutputTypeOfTupleWithRest<\\n  T extends ZodTupleItems | [],\\n  Rest extends ZodTypeAny | null = null,\\n> = OutputTypeOfTupleWithRest<T, Rest>;\\ntype z_InputTypeOfTuple<T extends ZodTupleItems | []> = InputTypeOfTuple<T>;\\ntype z_InputTypeOfTupleWithRest<\\n  T extends ZodTupleItems | [],\\n  Rest extends ZodTypeAny | null = null,\\n> = InputTypeOfTupleWithRest<T, Rest>;\\ntype z_ZodTupleDef<T extends ZodTupleItems | [] = ZodTupleItems, Rest extends ZodTypeAny | null = null> = ZodTupleDef<\\n  T,\\n  Rest\\n>;\\ntype z_AnyZodTuple = AnyZodTuple;\\ntype z_ZodTuple<\\n  T extends [ZodTypeAny, ...ZodTypeAny[]] | [] = [ZodTypeAny, ...ZodTypeAny[]],\\n  Rest extends ZodTypeAny | null = null,\\n> = ZodTuple<T, Rest>;\\ndeclare const z_ZodTuple: typeof ZodTuple;\\ntype z_ZodRecordDef<Key extends KeySchema = ZodString, Value extends ZodTypeAny = ZodTypeAny> = ZodRecordDef<\\n  Key,\\n  Value\\n>;\\ntype z_KeySchema = KeySchema;\\ntype z_RecordType<K extends string | number | symbol, V> = RecordType<K, V>;\\ntype z_ZodRecord<Key extends KeySchema = ZodString, Value extends ZodTypeAny = ZodTypeAny> = ZodRecord<Key, Value>;\\ndeclare const z_ZodRecord: typeof ZodRecord;\\ntype z_ZodMapDef<Key extends ZodTypeAny = ZodTypeAny, Value extends ZodTypeAny = ZodTypeAny> = ZodMapDef<Key, Value>;\\ntype z_ZodMap<Key extends ZodTypeAny = ZodTypeAny, Value extends ZodTypeAny = ZodTypeAny> = ZodMap<Key, Value>;\\ndeclare const z_ZodMap: typeof ZodMap;\\ntype z_ZodSetDef<Value extends ZodTypeAny = ZodTypeAny> = ZodSetDef<Value>;\\ntype z_ZodSet<Value extends ZodTypeAny = ZodTypeAny> = ZodSet<Value>;\\ndeclare const z_ZodSet: typeof ZodSet;\\ntype z_ZodFunctionDef<\\n  Args extends ZodTuple<any, any> = ZodTuple<any, any>,\\n  Returns extends ZodTypeAny = ZodTypeAny,\\n> = ZodFunctionDef<Args, Returns>;\\ntype z_OuterTypeOfFunction<Args extends ZodTuple<any, any>, Returns extends ZodTypeAny> = OuterTypeOfFunction<\\n  Args,\\n  Returns\\n>;\\ntype z_InnerTypeOfFunction<Args extends ZodTuple<any, any>, Returns extends ZodTypeAny> = InnerTypeOfFunction<\\n  Args,\\n  Returns\\n>;\\ntype z_ZodFunction<Args extends ZodTuple<any, any>, Returns extends ZodTypeAny> = ZodFunction<Args, Returns>;\\ndeclare const z_ZodFunction: typeof ZodFunction;\\ntype z_ZodLazyDef<T extends ZodTypeAny = ZodTypeAny> = ZodLazyDef<T>;\\ntype z_ZodLazy<T extends ZodTypeAny> = ZodLazy<T>;\\ndeclare const z_ZodLazy: typeof ZodLazy;\\ntype z_ZodLiteralDef<T = any> = ZodLiteralDef<T>;\\ntype z_ZodLiteral<T> = ZodLiteral<T>;\\ndeclare const z_ZodLiteral: typeof ZodLiteral;\\ntype z_ArrayKeys = ArrayKeys;\\ntype z_Indices<T> = Indices<T>;\\ntype z_EnumValues<T extends string = string> = EnumValues<T>;\\ntype z_Values<T extends EnumValues> = Values<T>;\\ntype z_ZodEnumDef<T extends EnumValues = EnumValues> = ZodEnumDef<T>;\\ntype z_Writeable<T> = Writeable<T>;\\ntype z_FilterEnum<Values, ToExclude> = FilterEnum<Values, ToExclude>;\\ntype z_typecast<A, T> = typecast<A, T>;\\ntype z_ZodEnum<T extends [string, ...string[]]> = ZodEnum<T>;\\ndeclare const z_ZodEnum: typeof ZodEnum;\\ntype z_ZodNativeEnumDef<T extends EnumLike = EnumLike> = ZodNativeEnumDef<T>;\\ntype z_EnumLike = EnumLike;\\ntype z_ZodNativeEnum<T extends EnumLike> = ZodNativeEnum<T>;\\ndeclare const z_ZodNativeEnum: typeof ZodNativeEnum;\\ntype z_ZodPromiseDef<T extends ZodTypeAny = ZodTypeAny> = ZodPromiseDef<T>;\\ntype z_ZodPromise<T extends ZodTypeAny> = ZodPromise<T>;\\ndeclare const z_ZodPromise: typeof ZodPromise;\\ntype z_Refinement<T> = Refinement<T>;\\ntype z_SuperRefinement<T> = SuperRefinement<T>;\\ntype z_RefinementEffect<T> = RefinementEffect<T>;\\ntype z_TransformEffect<T> = TransformEffect<T>;\\ntype z_PreprocessEffect<T> = PreprocessEffect<T>;\\ntype z_Effect<T> = Effect<T>;\\ntype z_ZodEffectsDef<T extends ZodTypeAny = ZodTypeAny> = ZodEffectsDef<T>;\\ntype z_ZodEffects<T extends ZodTypeAny, Output = output<T>, Input = input<T>> = ZodEffects<T, Output, Input>;\\ndeclare const z_ZodEffects: typeof ZodEffects;\\ntype z_ZodOptionalDef<T extends ZodTypeAny = ZodTypeAny> = ZodOptionalDef<T>;\\ntype z_ZodOptionalType<T extends ZodTypeAny> = ZodOptionalType<T>;\\ntype z_ZodOptional<T extends ZodTypeAny> = ZodOptional<T>;\\ndeclare const z_ZodOptional: typeof ZodOptional;\\ntype z_ZodNullableDef<T extends ZodTypeAny = ZodTypeAny> = ZodNullableDef<T>;\\ntype z_ZodNullableType<T extends ZodTypeAny> = ZodNullableType<T>;\\ntype z_ZodNullable<T extends ZodTypeAny> = ZodNullable<T>;\\ndeclare const z_ZodNullable: typeof ZodNullable;\\ntype z_ZodDefaultDef<T extends ZodTypeAny = ZodTypeAny> = ZodDefaultDef<T>;\\ntype z_ZodDefault<T extends ZodTypeAny> = ZodDefault<T>;\\ndeclare const z_ZodDefault: typeof ZodDefault;\\ntype z_ZodCatchDef<T extends ZodTypeAny = ZodTypeAny> = ZodCatchDef<T>;\\ntype z_ZodCatch<T extends ZodTypeAny> = ZodCatch<T>;\\ndeclare const z_ZodCatch: typeof ZodCatch;\\ntype z_ZodNaNDef = ZodNaNDef;\\ntype z_ZodNaN = ZodNaN;\\ndeclare const z_ZodNaN: typeof ZodNaN;\\ntype z_ZodBrandedDef<T extends ZodTypeAny> = ZodBrandedDef<T>;\\ntype z_BRAND<T extends string | number | symbol> = BRAND<T>;\\ntype z_ZodBranded<T extends ZodTypeAny, B extends string | number | symbol> = ZodBranded<T, B>;\\ndeclare const z_ZodBranded: typeof ZodBranded;\\ntype z_ZodPipelineDef<A extends ZodTypeAny, B extends ZodTypeAny> = ZodPipelineDef<A, B>;\\ntype z_ZodPipeline<A extends ZodTypeAny, B extends ZodTypeAny> = ZodPipeline<A, B>;\\ndeclare const z_ZodPipeline: typeof ZodPipeline;\\ntype z_ZodReadonlyDef<T extends ZodTypeAny = ZodTypeAny> = ZodReadonlyDef<T>;\\ntype z_ZodReadonly<T extends ZodTypeAny> = ZodReadonly<T>;\\ndeclare const z_ZodReadonly: typeof ZodReadonly;\\ndeclare const z_custom: typeof custom;\\ndeclare const z_late: typeof late;\\ntype z_ZodFirstPartyTypeKind = ZodFirstPartyTypeKind;\\ndeclare const z_ZodFirstPartyTypeKind: typeof ZodFirstPartyTypeKind;\\ntype z_ZodFirstPartySchemaTypes = ZodFirstPartySchemaTypes;\\ndeclare const z_coerce: typeof coerce;\\ndeclare const z_NEVER: typeof NEVER;\\ntype z_inferFlattenedErrors<T extends ZodType<any, any, any>, U = string> = inferFlattenedErrors<T, U>;\\ntype z_typeToFlattenedError<T, U = string> = typeToFlattenedError<T, U>;\\ntype z_ZodIssueCode = ZodIssueCode;\\ntype z_ZodIssueBase = ZodIssueBase;\\ntype z_ZodInvalidTypeIssue = ZodInvalidTypeIssue;\\ntype z_ZodInvalidLiteralIssue = ZodInvalidLiteralIssue;\\ntype z_ZodUnrecognizedKeysIssue = ZodUnrecognizedKeysIssue;\\ntype z_ZodInvalidUnionIssue = ZodInvalidUnionIssue;\\ntype z_ZodInvalidUnionDiscriminatorIssue = ZodInvalidUnionDiscriminatorIssue;\\ntype z_ZodInvalidEnumValueIssue = ZodInvalidEnumValueIssue;\\ntype z_ZodInvalidArgumentsIssue = ZodInvalidArgumentsIssue;\\ntype z_ZodInvalidReturnTypeIssue = ZodInvalidReturnTypeIssue;\\ntype z_ZodInvalidDateIssue = ZodInvalidDateIssue;\\ntype z_StringValidation = StringValidation;\\ntype z_ZodInvalidStringIssue = ZodInvalidStringIssue;\\ntype z_ZodTooSmallIssue = ZodTooSmallIssue;\\ntype z_ZodTooBigIssue = ZodTooBigIssue;\\ntype z_ZodInvalidIntersectionTypesIssue = ZodInvalidIntersectionTypesIssue;\\ntype z_ZodNotMultipleOfIssue = ZodNotMultipleOfIssue;\\ntype z_ZodNotFiniteIssue = ZodNotFiniteIssue;\\ntype z_ZodCustomIssue = ZodCustomIssue;\\ntype z_DenormalizedError = DenormalizedError;\\ntype z_ZodIssueOptionalMessage = ZodIssueOptionalMessage;\\ntype z_ZodIssue = ZodIssue;\\ndeclare const z_quotelessJson: typeof quotelessJson;\\ntype z_ZodFormattedError<T, U = string> = ZodFormattedError<T, U>;\\ntype z_inferFormattedError<T extends ZodType<any, any, any>, U = string> = inferFormattedError<T, U>;\\ntype z_ZodError<T = any> = ZodError<T>;\\ndeclare const z_ZodError: typeof ZodError;\\ntype z_IssueData = IssueData;\\ntype z_ErrorMapCtx = ErrorMapCtx;\\ntype z_ZodErrorMap = ZodErrorMap;\\ndeclare namespace z {\\n  export {\\n    errorMap as defaultErrorMap,\\n    z_setErrorMap as setErrorMap,\\n    z_getErrorMap as getErrorMap,\\n    z_makeIssue as makeIssue,\\n    type z_ParseParams as ParseParams,\\n    type z_ParsePathComponent as ParsePathComponent,\\n    type z_ParsePath as ParsePath,\\n    z_EMPTY_PATH as EMPTY_PATH,\\n    type z_ParseContext as ParseContext,\\n    type z_ParseInput as ParseInput,\\n    z_addIssueToContext as addIssueToContext,\\n    type z_ObjectPair as ObjectPair,\\n    z_ParseStatus as ParseStatus,\\n    type z_ParseResult as ParseResult,\\n    z_INVALID as INVALID,\\n    z_DIRTY as DIRTY,\\n    z_OK as OK,\\n    type z_SyncParseReturnType as SyncParseReturnType,\\n    type z_AsyncParseReturnType as AsyncParseReturnType,\\n    type z_ParseReturnType as ParseReturnType,\\n    z_isAborted as isAborted,\\n    z_isDirty as isDirty,\\n    z_isValid as isValid,\\n    z_isAsync as isAsync,\\n    type z_Primitive as Primitive,\\n    type z_Scalars as Scalars,\\n    z_util as util,\\n    z_objectUtil as objectUtil,\\n    type z_ZodParsedType as ZodParsedType,\\n    z_getParsedType as getParsedType,\\n    type TypeOf as infer,\\n    ZodEffects as ZodTransformer,\\n    ZodType as Schema,\\n    ZodType as ZodSchema,\\n    anyType as any,\\n    arrayType as array,\\n    bigIntType as bigint,\\n    booleanType as boolean,\\n    dateType as date,\\n    discriminatedUnionType as discriminatedUnion,\\n    effectsType as effect,\\n    enumType as enum,\\n    functionType as function,\\n    instanceOfType as instanceof,\\n    intersectionType as intersection,\\n    lazyType as lazy,\\n    literalType as literal,\\n    mapType as map,\\n    nanType as nan,\\n    nativeEnumType as nativeEnum,\\n    neverType as never,\\n    nullType as null,\\n    nullableType as nullable,\\n    numberType as number,\\n    objectType as object,\\n    z_oboolean as oboolean,\\n    z_onumber as onumber,\\n    optionalType as optional,\\n    z_ostring as ostring,\\n    pipelineType as pipeline,\\n    preprocessType as preprocess,\\n    promiseType as promise,\\n    recordType as record,\\n    setType as set,\\n    strictObjectType as strictObject,\\n    stringType as string,\\n    symbolType as symbol,\\n    effectsType as transformer,\\n    tupleType as tuple,\\n    undefinedType as undefined,\\n    unionType as union,\\n    unknownType as unknown,\\n    voidType as void,\\n    type z_RefinementCtx as RefinementCtx,\\n    type z_ZodRawShape as ZodRawShape,\\n    type z_ZodTypeAny as ZodTypeAny,\\n    type z_TypeOf as TypeOf,\\n    type z_input as input,\\n    type z_output as output,\\n    type z_CustomErrorParams as CustomErrorParams,\\n    type z_ZodTypeDef as ZodTypeDef,\\n    type z_RawCreateParams as RawCreateParams,\\n    type z_ProcessedCreateParams as ProcessedCreateParams,\\n    type z_SafeParseSuccess as SafeParseSuccess,\\n    type z_SafeParseError as SafeParseError,\\n    type z_SafeParseReturnType as SafeParseReturnType,\\n    z_ZodType as ZodType,\\n    type z_IpVersion as IpVersion,\\n    type z_ZodStringCheck as ZodStringCheck,\\n    type z_ZodStringDef as ZodStringDef,\\n    z_datetimeRegex as datetimeRegex,\\n    z_ZodString as ZodString,\\n    type z_ZodNumberCheck as ZodNumberCheck,\\n    type z_ZodNumberDef as ZodNumberDef,\\n    z_ZodNumber as ZodNumber,\\n    type z_ZodBigIntCheck as ZodBigIntCheck,\\n    type z_ZodBigIntDef as ZodBigIntDef,\\n    z_ZodBigInt as ZodBigInt,\\n    type z_ZodBooleanDef as ZodBooleanDef,\\n    z_ZodBoolean as ZodBoolean,\\n    type z_ZodDateCheck as ZodDateCheck,\\n    type z_ZodDateDef as ZodDateDef,\\n    z_ZodDate as ZodDate,\\n    type z_ZodSymbolDef as ZodSymbolDef,\\n    z_ZodSymbol as ZodSymbol,\\n    type z_ZodUndefinedDef as ZodUndefinedDef,\\n    z_ZodUndefined as ZodUndefined,\\n    type z_ZodNullDef as ZodNullDef,\\n    z_ZodNull as ZodNull,\\n    type z_ZodAnyDef as ZodAnyDef,\\n    z_ZodAny as ZodAny,\\n    type z_ZodUnknownDef as ZodUnknownDef,\\n    z_ZodUnknown as ZodUnknown,\\n    type z_ZodNeverDef as ZodNeverDef,\\n    z_ZodNever as ZodNever,\\n    type z_ZodVoidDef as ZodVoidDef,\\n    z_ZodVoid as ZodVoid,\\n    type z_ZodArrayDef as ZodArrayDef,\\n    type z_ArrayCardinality as ArrayCardinality,\\n    type z_arrayOutputType as arrayOutputType,\\n    z_ZodArray as ZodArray,\\n    type z_ZodNonEmptyArray as ZodNonEmptyArray,\\n    type z_UnknownKeysParam as UnknownKeysParam,\\n    type z_ZodObjectDef as ZodObjectDef,\\n    type z_mergeTypes as mergeTypes,\\n    type z_objectOutputType as objectOutputType,\\n    type z_baseObjectOutputType as baseObjectOutputType,\\n    type z_objectInputType as objectInputType,\\n    type z_baseObjectInputType as baseObjectInputType,\\n    type z_CatchallOutput as CatchallOutput,\\n    type z_CatchallInput as CatchallInput,\\n    type z_PassthroughType as PassthroughType,\\n    type z_deoptional as deoptional,\\n    type z_SomeZodObject as SomeZodObject,\\n    type z_noUnrecognized as noUnrecognized,\\n    z_ZodObject as ZodObject,\\n    type z_AnyZodObject as AnyZodObject,\\n    type z_ZodUnionOptions as ZodUnionOptions,\\n    type z_ZodUnionDef as ZodUnionDef,\\n    z_ZodUnion as ZodUnion,\\n    type z_ZodDiscriminatedUnionOption as ZodDiscriminatedUnionOption,\\n    type z_ZodDiscriminatedUnionDef as ZodDiscriminatedUnionDef,\\n    z_ZodDiscriminatedUnion as ZodDiscriminatedUnion,\\n    type z_ZodIntersectionDef as ZodIntersectionDef,\\n    z_ZodIntersection as ZodIntersection,\\n    type z_ZodTupleItems as ZodTupleItems,\\n    type z_AssertArray as AssertArray,\\n    type z_OutputTypeOfTuple as OutputTypeOfTuple,\\n    type z_OutputTypeOfTupleWithRest as OutputTypeOfTupleWithRest,\\n    type z_InputTypeOfTuple as InputTypeOfTuple,\\n    type z_InputTypeOfTupleWithRest as InputTypeOfTupleWithRest,\\n    type z_ZodTupleDef as ZodTupleDef,\\n    type z_AnyZodTuple as AnyZodTuple,\\n    z_ZodTuple as ZodTuple,\\n    type z_ZodRecordDef as ZodRecordDef,\\n    type z_KeySchema as KeySchema,\\n    type z_RecordType as RecordType,\\n    z_ZodRecord as ZodRecord,\\n    type z_ZodMapDef as ZodMapDef,\\n    z_ZodMap as ZodMap,\\n    type z_ZodSetDef as ZodSetDef,\\n    z_ZodSet as ZodSet,\\n    type z_ZodFunctionDef as ZodFunctionDef,\\n    type z_OuterTypeOfFunction as OuterTypeOfFunction,\\n    type z_InnerTypeOfFunction as InnerTypeOfFunction,\\n    z_ZodFunction as ZodFunction,\\n    type z_ZodLazyDef as ZodLazyDef,\\n    z_ZodLazy as ZodLazy,\\n    type z_ZodLiteralDef as ZodLiteralDef,\\n    z_ZodLiteral as ZodLiteral,\\n    type z_ArrayKeys as ArrayKeys,\\n    type z_Indices as Indices,\\n    type z_EnumValues as EnumValues,\\n    type z_Values as Values,\\n    type z_ZodEnumDef as ZodEnumDef,\\n    type z_Writeable as Writeable,\\n    type z_FilterEnum as FilterEnum,\\n    type z_typecast as typecast,\\n    z_ZodEnum as ZodEnum,\\n    type z_ZodNativeEnumDef as ZodNativeEnumDef,\\n    type z_EnumLike as EnumLike,\\n    z_ZodNativeEnum as ZodNativeEnum,\\n    type z_ZodPromiseDef as ZodPromiseDef,\\n    z_ZodPromise as ZodPromise,\\n    type z_Refinement as Refinement,\\n    type z_SuperRefinement as SuperRefinement,\\n    type z_RefinementEffect as RefinementEffect,\\n    type z_TransformEffect as TransformEffect,\\n    type z_PreprocessEffect as PreprocessEffect,\\n    type z_Effect as Effect,\\n    type z_ZodEffectsDef as ZodEffectsDef,\\n    z_ZodEffects as ZodEffects,\\n    type z_ZodOptionalDef as ZodOptionalDef,\\n    type z_ZodOptionalType as ZodOptionalType,\\n    z_ZodOptional as ZodOptional,\\n    type z_ZodNullableDef as ZodNullableDef,\\n    type z_ZodNullableType as ZodNullableType,\\n    z_ZodNullable as ZodNullable,\\n    type z_ZodDefaultDef as ZodDefaultDef,\\n    z_ZodDefault as ZodDefault,\\n    type z_ZodCatchDef as ZodCatchDef,\\n    z_ZodCatch as ZodCatch,\\n    type z_ZodNaNDef as ZodNaNDef,\\n    z_ZodNaN as ZodNaN,\\n    type z_ZodBrandedDef as ZodBrandedDef,\\n    type z_BRAND as BRAND,\\n    z_ZodBranded as ZodBranded,\\n    type z_ZodPipelineDef as ZodPipelineDef,\\n    z_ZodPipeline as ZodPipeline,\\n    type z_ZodReadonlyDef as ZodReadonlyDef,\\n    z_ZodReadonly as ZodReadonly,\\n    z_custom as custom,\\n    z_late as late,\\n    z_ZodFirstPartyTypeKind as ZodFirstPartyTypeKind,\\n    type z_ZodFirstPartySchemaTypes as ZodFirstPartySchemaTypes,\\n    z_coerce as coerce,\\n    z_NEVER as NEVER,\\n    type z_inferFlattenedErrors as inferFlattenedErrors,\\n    type z_typeToFlattenedError as typeToFlattenedError,\\n    type z_ZodIssueCode as ZodIssueCode,\\n    type z_ZodIssueBase as ZodIssueBase,\\n    type z_ZodInvalidTypeIssue as ZodInvalidTypeIssue,\\n    type z_ZodInvalidLiteralIssue as ZodInvalidLiteralIssue,\\n    type z_ZodUnrecognizedKeysIssue as ZodUnrecognizedKeysIssue,\\n    type z_ZodInvalidUnionIssue as ZodInvalidUnionIssue,\\n    type z_ZodInvalidUnionDiscriminatorIssue as ZodInvalidUnionDiscriminatorIssue,\\n    type z_ZodInvalidEnumValueIssue as ZodInvalidEnumValueIssue,\\n    type z_ZodInvalidArgumentsIssue as ZodInvalidArgumentsIssue,\\n    type z_ZodInvalidReturnTypeIssue as ZodInvalidReturnTypeIssue,\\n    type z_ZodInvalidDateIssue as ZodInvalidDateIssue,\\n    type z_StringValidation as StringValidation,\\n    type z_ZodInvalidStringIssue as ZodInvalidStringIssue,\\n    type z_ZodTooSmallIssue as ZodTooSmallIssue,\\n    type z_ZodTooBigIssue as ZodTooBigIssue,\\n    type z_ZodInvalidIntersectionTypesIssue as ZodInvalidIntersectionTypesIssue,\\n    type z_ZodNotMultipleOfIssue as ZodNotMultipleOfIssue,\\n    type z_ZodNotFiniteIssue as ZodNotFiniteIssue,\\n    type z_ZodCustomIssue as ZodCustomIssue,\\n    type z_DenormalizedError as DenormalizedError,\\n    type z_ZodIssueOptionalMessage as ZodIssueOptionalMessage,\\n    type z_ZodIssue as ZodIssue,\\n    z_quotelessJson as quotelessJson,\\n    type z_ZodFormattedError as ZodFormattedError,\\n    type z_inferFormattedError as inferFormattedError,\\n    z_ZodError as ZodError,\\n    type z_IssueData as IssueData,\\n    type z_ErrorMapCtx as ErrorMapCtx,\\n    type z_ZodErrorMap as ZodErrorMap,\\n  };\\n}\\n\\n//# sourceMappingURL=index.d.ts.map\\n\\nexport {\\n  type AnyZodObject,\\n  type AnyZodTuple,\\n  type ArrayCardinality,\\n  type ArrayKeys,\\n  type AssertArray,\\n  type AsyncParseReturnType,\\n  BRAND,\\n  type CatchallInput,\\n  type CatchallOutput,\\n  type CustomErrorParams,\\n  DIRTY,\\n  type DenormalizedError,\\n  EMPTY_PATH,\\n  type Effect,\\n  type EnumLike,\\n  type EnumValues,\\n  type ErrorMapCtx,\\n  type FilterEnum,\\n  INVALID,\\n  type Indices,\\n  type InnerTypeOfFunction,\\n  type InputTypeOfTuple,\\n  type InputTypeOfTupleWithRest,\\n  type IpVersion,\\n  type IssueData,\\n  type KeySchema,\\n  NEVER,\\n  OK,\\n  type ObjectPair,\\n  type OuterTypeOfFunction,\\n  type OutputTypeOfTuple,\\n  type OutputTypeOfTupleWithRest,\\n  type ParseContext,\\n  type ParseInput,\\n  type ParseParams,\\n  type ParsePath,\\n  type ParsePathComponent,\\n  type ParseResult,\\n  type ParseReturnType,\\n  ParseStatus,\\n  type PassthroughType,\\n  type PreprocessEffect,\\n  type Primitive,\\n  type ProcessedCreateParams,\\n  type RawCreateParams,\\n  type RecordType,\\n  type Refinement,\\n  type RefinementCtx,\\n  type RefinementEffect,\\n  type SafeParseError,\\n  type SafeParseReturnType,\\n  type SafeParseSuccess,\\n  type Scalars,\\n  ZodType as Schema,\\n  type SomeZodObject,\\n  type StringValidation,\\n  type SuperRefinement,\\n  type SyncParseReturnType,\\n  type TransformEffect,\\n  type TypeOf,\\n  type UnknownKeysParam,\\n  type Values,\\n  type Writeable,\\n  ZodAny,\\n  type ZodAnyDef,\\n  ZodArray,\\n  type ZodArrayDef,\\n  ZodBigInt,\\n  type ZodBigIntCheck,\\n  type ZodBigIntDef,\\n  ZodBoolean,\\n  type ZodBooleanDef,\\n  ZodBranded,\\n  type ZodBrandedDef,\\n  ZodCatch,\\n  type ZodCatchDef,\\n  type ZodCustomIssue,\\n  ZodDate,\\n  type ZodDateCheck,\\n  type ZodDateDef,\\n  ZodDefault,\\n  type ZodDefaultDef,\\n  ZodDiscriminatedUnion,\\n  type ZodDiscriminatedUnionDef,\\n  type ZodDiscriminatedUnionOption,\\n  ZodEffects,\\n  type ZodEffectsDef,\\n  ZodEnum,\\n  type ZodEnumDef,\\n  ZodError,\\n  type ZodErrorMap,\\n  type ZodFirstPartySchemaTypes,\\n  ZodFirstPartyTypeKind,\\n  type ZodFormattedError,\\n  ZodFunction,\\n  type ZodFunctionDef,\\n  ZodIntersection,\\n  type ZodIntersectionDef,\\n  type ZodInvalidArgumentsIssue,\\n  type ZodInvalidDateIssue,\\n  type ZodInvalidEnumValueIssue,\\n  type ZodInvalidIntersectionTypesIssue,\\n  type ZodInvalidLiteralIssue,\\n  type ZodInvalidReturnTypeIssue,\\n  type ZodInvalidStringIssue,\\n  type ZodInvalidTypeIssue,\\n  type ZodInvalidUnionDiscriminatorIssue,\\n  type ZodInvalidUnionIssue,\\n  type ZodIssue,\\n  type ZodIssueBase,\\n  ZodIssueCode,\\n  type ZodIssueOptionalMessage,\\n  ZodLazy,\\n  type ZodLazyDef,\\n  ZodLiteral,\\n  type ZodLiteralDef,\\n  ZodMap,\\n  type ZodMapDef,\\n  ZodNaN,\\n  type ZodNaNDef,\\n  ZodNativeEnum,\\n  type ZodNativeEnumDef,\\n  ZodNever,\\n  type ZodNeverDef,\\n  type ZodNonEmptyArray,\\n  type ZodNotFiniteIssue,\\n  type ZodNotMultipleOfIssue,\\n  ZodNull,\\n  type ZodNullDef,\\n  ZodNullable,\\n  type ZodNullableDef,\\n  type ZodNullableType,\\n  ZodNumber,\\n  type ZodNumberCheck,\\n  type ZodNumberDef,\\n  ZodObject,\\n  type ZodObjectDef,\\n  ZodOptional,\\n  type ZodOptionalDef,\\n  type ZodOptionalType,\\n  ZodParsedType,\\n  ZodPipeline,\\n  type ZodPipelineDef,\\n  ZodPromise,\\n  type ZodPromiseDef,\\n  type ZodRawShape,\\n  ZodReadonly,\\n  type ZodReadonlyDef,\\n  ZodRecord,\\n  type ZodRecordDef,\\n  ZodType as ZodSchema,\\n  ZodSet,\\n  type ZodSetDef,\\n  ZodString,\\n  type ZodStringCheck,\\n  type ZodStringDef,\\n  ZodSymbol,\\n  type ZodSymbolDef,\\n  type ZodTooBigIssue,\\n  type ZodTooSmallIssue,\\n  ZodEffects as ZodTransformer,\\n  ZodTuple,\\n  type ZodTupleDef,\\n  type ZodTupleItems,\\n  ZodType,\\n  type ZodTypeAny,\\n  type ZodTypeDef,\\n  ZodUndefined,\\n  type ZodUndefinedDef,\\n  ZodUnion,\\n  type ZodUnionDef,\\n  type ZodUnionOptions,\\n  ZodUnknown,\\n  type ZodUnknownDef,\\n  type ZodUnrecognizedKeysIssue,\\n  ZodVoid,\\n  type ZodVoidDef,\\n  addIssueToContext,\\n  anyType as any,\\n  arrayType as array,\\n  type arrayOutputType,\\n  type baseObjectInputType,\\n  type baseObjectOutputType,\\n  bigIntType as bigint,\\n  booleanType as boolean,\\n  coerce,\\n  custom,\\n  dateType as date,\\n  datetimeRegex,\\n  z as default,\\n  errorMap as defaultErrorMap,\\n  type deoptional,\\n  discriminatedUnionType as discriminatedUnion,\\n  effectsType as effect,\\n  enumType as enum,\\n  functionType as function,\\n  getErrorMap,\\n  getParsedType,\\n  type TypeOf as infer,\\n  type inferFlattenedErrors,\\n  type inferFormattedError,\\n  type input,\\n  instanceOfType as instanceof,\\n  intersectionType as intersection,\\n  isAborted,\\n  isAsync,\\n  isDirty,\\n  isValid,\\n  late,\\n  lazyType as lazy,\\n  literalType as literal,\\n  makeIssue,\\n  mapType as map,\\n  type mergeTypes,\\n  nanType as nan,\\n  nativeEnumType as nativeEnum,\\n  neverType as never,\\n  type noUnrecognized,\\n  nullType as null,\\n  nullableType as nullable,\\n  numberType as number,\\n  objectType as object,\\n  type objectInputType,\\n  type objectOutputType,\\n  objectUtil,\\n  oboolean,\\n  onumber,\\n  optionalType as optional,\\n  ostring,\\n  type output,\\n  pipelineType as pipeline,\\n  preprocessType as preprocess,\\n  promiseType as promise,\\n  quotelessJson,\\n  recordType as record,\\n  setType as set,\\n  setErrorMap,\\n  strictObjectType as strictObject,\\n  stringType as string,\\n  symbolType as symbol,\\n  effectsType as transformer,\\n  tupleType as tuple,\\n  type typeToFlattenedError,\\n  type typecast,\\n  undefinedType as undefined,\\n  unionType as union,\\n  unknownType as unknown,\\n  util,\\n  voidType as void,\\n  z,\\n};\\n\"","/* eslint-disable */\n// @ts-ignore\nimport bigJs from '@types/big.js/index.d.ts?raw';\n// @ts-ignore\nimport dayjs from 'dayjs/index.d.ts?raw';\n\n// @ts-ignore\nimport defaultFn from './default-function.js?raw';\n// @ts-ignore\nimport globalDts from './global.d.ts?raw';\n// @ts-ignore\nimport http from './http.d.ts?raw';\n// @ts-ignore\nimport zen from './zen.d.ts?raw';\n// @ts-ignore\nimport zod from './zod.d.ts?raw';\n\nexport type FunctionLibrary = {\n  name: string;\n  tagline: string;\n  typeDef: string;\n  importName?: string;\n  documentationUrl?: string;\n};\n\nexport const functionLibraries: FunctionLibrary[] = [\n  {\n    name: 'big.js',\n    tagline: 'Arbitrary-precision decimal arithmetic',\n    importName: 'Big',\n    typeDef: bigJs,\n    documentationUrl: 'https://mikemcl.github.io/big.js/',\n  },\n  {\n    name: 'dayjs',\n    tagline: 'Date utilities',\n    typeDef: dayjs,\n    documentationUrl: 'https://day.js.org/docs/en/parse/parse',\n  },\n  {\n    name: 'http',\n    tagline: 'Promise based HTTP client',\n    typeDef: http,\n    documentationUrl: 'https://docs.gorules.io/reference/http',\n  },\n  {\n    name: 'zen',\n    tagline: 'Rules engine utilities',\n    typeDef: zen,\n    documentationUrl: 'https://docs.gorules.io/reference/zen',\n  },\n  {\n    name: 'zod',\n    tagline: 'Schema validation',\n    importName: 'z',\n    typeDef: zod,\n    documentationUrl: 'https://zod.dev/',\n  },\n];\n\nexport const functionDefinitions = {\n  globals: {\n    'global.d.ts': globalDts,\n  },\n};\n\nexport const defaultFunctionValue = defaultFn;\n","import type { Monaco } from '@monaco-editor/react';\nimport { Spin } from 'antd';\nimport React, { Suspense, useEffect, useMemo, useState } from 'react';\nimport { P, match } from 'ts-pattern';\n\nimport { useNodeType } from '../../../helpers/node-type';\nimport {\n  useDecisionGraphActions,\n  useDecisionGraphListeners,\n  useDecisionGraphState,\n  useNodeDiff,\n} from '../context/dg-store.context';\nimport { FunctionKind, useFunctionKind } from '../nodes/specifications/function.specification';\nimport type { SimulationTrace, SimulationTraceDataFunction } from '../simulator/simulation.types';\nimport { SchemaSelectProps } from 'jdm-editor/src/helpers/components';\n\nconst Function = React.lazy(async () => {\n  const functionImport = await import('../../function');\n  return { default: functionImport.Function };\n});\n\nexport type TabFunctionProps = {\n  id: string;\n};\n\nexport const TabFunction: React.FC<TabFunctionProps> = ({ id }) => {\n  const kind = useFunctionKind(id);\n  const graphActions = useDecisionGraphActions();\n  const { inputsSchema, outputsSchema } = useDecisionGraphState(\n    ({ inputsSchema = [], outputsSchema = [] }) => ({ inputsSchema, outputsSchema }),\n  );\n  const onFunctionReady = useDecisionGraphListeners((s) => s.onFunctionReady);\n  const [monaco, setMonaco] = useState<Monaco>();\n  const nodeType = useNodeType(id);\n  const { nodeTrace, disabled, content, nodeError } = useDecisionGraphState(\n    ({ simulate, disabled, configurable, decisionGraph }) => ({\n      nodeTrace: match(simulate)\n        .with({ result: P._ }, ({ result }) => result?.trace?.[id])\n        .otherwise(() => null),\n      nodeError: match(simulate)\n        .with({ error: { data: { nodeId: id } } }, ({ error }) => error)\n        .otherwise(() => null),\n      disabled,\n      configurable,\n      content: (decisionGraph?.nodes ?? []).find((node) => node.id === id)?.content,\n    }),\n  );\n\n  const { diff, contentDiff } = useNodeDiff(id);\n\n  const previousValue = useMemo(() => {\n    return kind === FunctionKind.Stable\n      ? contentDiff?.fields?.source?.previousValue\n      : diff?.fields?.content?.previousValue;\n  }, [diff, contentDiff]);\n\n  useEffect(() => {\n    if (!monaco) {\n      return;\n    }\n\n    const extraLibs = monaco.languages.typescript.javascriptDefaults.getExtraLibs();\n    const newExtraLibs = Object.entries(extraLibs).map(([key, value]) => ({\n      filePath: key,\n      content: value.content,\n    }));\n\n    const schemaTypeDefs = [\n      {\n        filePath: 'node:InputSchema',\n        content: `/**\n                   * @typedef {Object} InputSchema\n                   ${inputsSchema.map(({field, name}: SchemaSelectProps) => `* @property {any} ${field} - ${name}`).join(\"\\n\")}\n                   */`,\n      }\n    ];\n\n    monaco.languages.typescript.javascriptDefaults.setExtraLibs([...newExtraLibs, ...schemaTypeDefs]);\n    onFunctionReady?.(monaco);\n  }, [monaco, onFunctionReady, inputsSchema, outputsSchema]);\n\n  return (\n    <Suspense fallback={<Spin />}>\n      <Function\n        onMonacoReady={(monaco) => setMonaco(monaco)}\n        value={kind === FunctionKind.Stable ? content.source : content}\n        previousValue={typeof previousValue === 'string' ? previousValue : undefined}\n        error={nodeError ?? undefined}\n        inputData={nodeType}\n        onChange={(val) => {\n          graphActions.updateNode(id, (draft) => {\n            if (kind === FunctionKind.Stable) {\n              draft.content = { source: val };\n            } else {\n              draft.content = val;\n            }\n\n            return draft;\n          });\n        }}\n        disabled={disabled}\n        trace={nodeTrace as SimulationTrace<SimulationTraceDataFunction>}\n      />\n    </Suspense>\n  );\n};\n","import { WarningFilled } from '@ant-design/icons';\nimport { Button, Tooltip, Typography } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\nimport { P, match } from 'ts-pattern';\n\nimport { defaultFunctionValue } from '../../../function/helpers/libs';\nimport { useDecisionGraphActions, useDecisionGraphState } from '../../context/dg-store.context';\nimport type { DiffMetadata } from '../../dg-types';\nimport { TabFunction } from '../../graph/tab-function';\nimport { GraphNode } from '../graph-node';\nimport { NodeColor } from './colors';\nimport type { NodeSpecification } from './specification-types';\nimport { NodeKind } from './specification-types';\n\nexport type NodeFunctionData =\n  | string\n  | {\n      source: string;\n    };\n\nexport const functionSpecification: NodeSpecification<NodeFunctionData> = {\n  type: NodeKind.Function,\n  icon: <Typography.Text style={{ color: 'white', fontSize: 'inherit' }}>JS</Typography.Text>,\n  displayName: 'Function',\n  documentationUrl: 'https://gorules.io/docs/user-manual/decision-modeling/decisions/functions',\n  shortDescription: 'Javascript lambda',\n  color: NodeColor.Orange,\n  renderTab: ({ id }) => <TabFunction id={id} />,\n  getDiffContent: (current, previous): any => {\n    const fields: DiffMetadata['fields'] = {};\n    const kind = match(current)\n      .with(P.string, () => FunctionKind.Deprecated)\n      .otherwise(() => FunctionKind.Stable);\n\n    match([current, previous])\n      .with([P.string, P.string], ([current, previous]) => {\n        if (current !== previous) {\n          _.set(fields, 'source', {\n            previousValue: previous,\n            status: 'modified',\n          });\n        }\n      })\n      .with([{ source: P.string }, { source: P.string }], ([current, previous]) => {\n        if (current?.source !== previous?.source) {\n          _.set(fields, 'source', {\n            previousValue: previous.source,\n            status: 'modified',\n          });\n        }\n      })\n      .otherwise(() => {\n        // do nothing\n      });\n\n    const hasModifications = Object.keys(fields).length > 0;\n    return {\n      ...(kind === FunctionKind.Deprecated ? { source: current } : (current as { source: string })),\n      ...(hasModifications && {\n        _diff: {\n          status: 'modified',\n          fields,\n        },\n      }),\n    };\n  },\n  generateNode: ({ index }) => ({\n    name: `function${index}`,\n    content: {\n      source: defaultFunctionValue,\n    },\n  }),\n  renderNode: ({ id, data, selected, specification }) => {\n    const graphActions = useDecisionGraphActions();\n    const kind = useFunctionKind(id);\n    return (\n      <GraphNode\n        id={id}\n        specification={{\n          ...specification,\n          displayName:\n            kind === FunctionKind.Stable ? (\n              'Function'\n            ) : (\n              <span>\n                {'Function v1 '}\n                <DeprecatedFunctionWarning />\n              </span>\n            ),\n        }}\n        name={data.name}\n        isSelected={selected}\n        helper={[kind === FunctionKind.Deprecated && <DeprecatedFunctionWarning size={16} />]}\n        actions={[\n          <Button key='edit-function' type='text' onClick={() => graphActions.openTab(id)}>\n            Edit Function\n          </Button>,\n        ]}\n      />\n    );\n  },\n};\n\nexport enum FunctionKind {\n  Deprecated,\n  Stable,\n}\n\nexport const useFunctionKind = (id: string) => {\n  const { kind } = useDecisionGraphState((s) => ({\n    kind: match(s.decisionGraph.nodes.find((n) => n.id === id)?.content)\n      .with(P.string, () => FunctionKind.Deprecated)\n      .otherwise(() => FunctionKind.Stable),\n  }));\n\n  return kind;\n};\n\nconst DeprecatedFunctionWarning: React.FC<{ size?: number }> = ({ size }) => (\n  <Tooltip\n    placement='top'\n    title='Function v1 will be deprecated in one of the upcoming releases. To use a new Function, drag and drop a new Function Node and copy your logic. For more information click \"Documentation\". '\n  >\n    <WarningFilled style={{ color: 'var(--grl-color-warning-text)', fontSize: size }} />\n  </Tooltip>\n);\n","export const isTrue = (str: string | boolean | number | undefined) => {\n  if (typeof str === 'string') return ((str as string) || '').toLowerCase() === 'true';\n  else if (typeof str === 'boolean') return str === true;\n  else if (typeof str === 'number') return str === 1;\n  return false;\n};\n\nexport const chunk = <T = unknown>(arr: T[], size: number): T[][] =>\n  Array.from({ length: Math.ceil(arr.length / size) }, (v, i) => arr.slice(i * size, i * size + size));\n\nconst unsecuredCopyToClipboard = (text: string) => {\n  const textArea = document.createElement('textarea');\n  textArea.value = text;\n  document.body.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n  try {\n    document.execCommand('copy');\n  } catch (err) {\n    console.error('Unable to copy to clipboard', err);\n  }\n  document.body.removeChild(textArea);\n};\n\nexport const copyToClipboard = async (content: string) => {\n  if (window.isSecureContext && navigator.clipboard) {\n    await navigator.clipboard.writeText(content);\n  } else {\n    unsecuredCopyToClipboard(content);\n  }\n};\n\nexport const pasteFromClipboard = async (): Promise<string> => {\n  try {\n    return navigator.clipboard.readText();\n  } catch {\n    return '';\n  }\n};\n\nexport const get = <T>(obj: any, path: string, defaultValue: T): T => {\n  return path.split('.').reduce((a, c) => (a && a[c] ? a[c] : defaultValue || null), obj) as T;\n};\n","import { Editor } from '@monaco-editor/react';\nimport { Modal, Spin, Typography, message, theme } from 'antd';\nimport json5 from 'json5';\nimport React, { useEffect, useState } from 'react';\nimport toJsonSchema from 'to-json-schema';\n\nimport { copyToClipboard } from '../../../helpers/utility';\n\nexport type JsonToJsonSchemaDialogProps = {\n  id?: string;\n  onSuccess?: (payload: { schema: string; model: string }) => void;\n  onDismiss?: () => void;\n  isOpen?: boolean;\n  model?: string;\n};\n\nexport const JsonToJsonSchemaDialog: React.FC<JsonToJsonSchemaDialogProps> = (props) => {\n  const { isOpen, onDismiss, onSuccess, model } = props;\n\n  const { token } = theme.useToken();\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (isOpen && model) {\n      setValue(model);\n    }\n  }, [isOpen]);\n\n  return (\n    <Modal\n      title='Convert to JSON Schema'\n      open={isOpen}\n      destroyOnClose\n      onCancel={onDismiss}\n      width={540}\n      okText='Convert'\n      onOk={() => {\n        try {\n          onSuccess?.({\n            schema: JSON.stringify(toJsonSchema(json5.parse(value)), null, 2),\n            model: value,\n          });\n        } catch (e: any) {\n          message.error(e?.message);\n        }\n      }}\n    >\n      <Typography.Text>Type or paste JSON or JSON5 model here and covert it to JSON Schema</Typography.Text>\n      <Editor\n        loading={<Spin size='large' />}\n        language='javascript'\n        theme={token.mode === 'dark' ? 'vs-dark' : 'light'}\n        height='400px'\n        onChange={(val) => setValue(val || '')}\n        value={value || ''}\n        onMount={(editor, monaco) => {\n          monaco.languages.typescript.javascriptDefaults.setDiagnosticsOptions({\n            noSyntaxValidation: true,\n          });\n\n          monaco.languages.typescript.javascriptDefaults.setModeConfiguration({\n            codeActions: false,\n            inlayHints: false,\n          });\n\n          editor.addAction({\n            id: 'copy-json',\n            label: 'Copy JSON',\n            contextMenuGroupId: 'utils',\n            run: async (editor) => {\n              try {\n                await copyToClipboard(JSON.stringify(json5.parse(editor.getValue())));\n                message.success('Copied to clipboard!');\n              } catch {\n                message.error('Failed to copy to clipboard.');\n              }\n            },\n          });\n\n          editor.addAction({\n            id: 'format',\n            label: 'Format',\n            contextMenuGroupId: 'utils',\n            precondition: '!editorReadonly',\n            run: (editor) => {\n              const formatted = JSON.stringify(json5.parse(editor.getValue()), null, 2);\n              editor.setValue(formatted);\n            },\n          });\n        }}\n        options={{\n          automaticLayout: true,\n          minimap: { enabled: false },\n          fontSize: 12,\n          fontFamily: 'var(--mono-font-family)',\n          tabSize: 2,\n          lineDecorationsWidth: 2,\n          find: {\n            addExtraSpaceOnTop: false,\n            seedSearchStringFromSelection: 'never',\n          },\n          scrollbar: {\n            verticalSliderSize: 4,\n            verticalScrollbarSize: 4,\n            horizontalScrollbarSize: 4,\n            horizontalSliderSize: 4,\n          },\n          lineNumbersMinChars: 3,\n        }}\n      />\n    </Modal>\n  );\n};\n","import { FormatPainterOutlined, ImportOutlined, InfoCircleOutlined } from '@ant-design/icons';\nimport { DiffEditor, Editor } from '@monaco-editor/react';\nimport { Button, Space, Spin, Tabs, Tooltip, theme } from 'antd';\nimport type { DragDropManager } from 'dnd-core';\nimport { type editor } from 'monaco-editor';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { PanelGroup } from 'react-resizable-panels';\nimport { match } from 'ts-pattern';\nimport { useThrottledCallback } from 'use-debounce';\n\nimport { useDecisionGraphActions, useDecisionGraphState, useNodeDiff } from '../context/dg-store.context';\nimport { JsonToJsonSchemaDialog } from './json-to-json-schema-dialog';\n\nconst schemaTooltip = 'Provide JSON Schema format. If no JSON Schema is provided, validation will be skipped.';\n\nconst monacoOptions: editor.IStandaloneEditorConstructionOptions = {\n  automaticLayout: true,\n  contextmenu: false,\n  fontSize: 13,\n  fontFamily: 'var(--mono-font-family)',\n  tabSize: 2,\n  minimap: { enabled: false },\n  overviewRulerBorder: false,\n  scrollbar: {\n    verticalSliderSize: 4,\n    verticalScrollbarSize: 4,\n    horizontalScrollbarSize: 4,\n    horizontalSliderSize: 4,\n  },\n};\n\nenum TabKey {\n  Schema = 'Schema',\n}\n\nexport type TabJsonSchemaProps = {\n  id: string;\n  manager?: DragDropManager;\n  type?: 'input' | 'output';\n};\n\nexport const TabJsonSchema: React.FC<TabJsonSchemaProps> = ({ id, type = 'input' }) => {\n  const graphActions = useDecisionGraphActions();\n\n  const language = 'json';\n\n  const { token } = theme.useToken();\n\n  const [jsonToJsonSchemaOpen, setJsonToJsonSchemaOpen] = useState(false);\n\n  const [activeTab, setActiveTab] = useState(TabKey.Schema);\n\n  const [editor, setEditor] = useState<editor.IStandaloneCodeEditor>();\n  const [diffEditor, setDiffEditor] = useState<editor.IStandaloneDiffEditor>();\n  const resizeEditor = useThrottledCallback(() => editor?.layout(), 100, { trailing: true });\n  const resizeDiffEditor = useThrottledCallback(() => diffEditor?.layout(), 100, { trailing: true });\n\n  const { disabled, content } = useDecisionGraphState(({ simulate, disabled, configurable, decisionGraph }) => ({\n    nodeError: match(simulate)\n      .with({ error: { data: { nodeId: id } } }, ({ error }) => error)\n      .otherwise(() => null),\n    disabled,\n    configurable,\n    content: (decisionGraph?.nodes ?? []).find((node) => node.id === id)?.content,\n  }));\n\n  const { contentDiff } = useNodeDiff(id);\n\n  const previousValue = useMemo(() => {\n    return contentDiff?.fields?.schema?.previousValue;\n  }, [contentDiff]);\n\n  useEffect(() => {\n    window.addEventListener('resize', resizeEditor);\n    return () => window.removeEventListener('resize', resizeEditor);\n  }, [resizeEditor, editor]);\n\n  useEffect(() => {\n    window.addEventListener('resize', resizeDiffEditor);\n    return () => window.removeEventListener('resize', resizeDiffEditor);\n  }, [resizeDiffEditor, diffEditor]);\n\n  return (\n    <div\n      className='grl-node-content'\n      data-theme={token.mode}\n      style={\n        {\n          'height': '100%',\n          '--color-text': token.colorTextBase,\n          '--color-background-elevated': token.colorBgElevated,\n          '--color-border': token.colorBorder,\n          '--line-height': token.lineHeight,\n        } as any\n      }\n    >\n      <PanelGroup\n        className='grl-node-content-main'\n        direction='horizontal'\n        autoSaveId={`jdm-editor:${type}:schema:layout`}\n      >\n        <div className='grl-node-content-side'>\n          <div className='grl-node-content-side__panel'>\n            <div className='grl-node-content-side__header'>\n              <Tabs\n                rootClassName='grl-inline-tabs'\n                size='small'\n                style={{ width: '100%' }}\n                items={Object.values(TabKey).map((t) => ({\n                  key: t,\n                  label: (\n                    <span>\n                      {t}{' '}\n                      <Tooltip title={schemaTooltip}>\n                        <InfoCircleOutlined\n                          style={{ fontSize: 10, marginLeft: 4, opacity: 0.5, verticalAlign: 'text-top' }}\n                        />\n                      </Tooltip>\n                    </span>\n                  ),\n                }))}\n                activeKey={activeTab}\n                onChange={(t) => setActiveTab(t as TabKey)}\n                tabBarExtraContent={\n                  <Space style={{ marginRight: 8 }} size={'small'}>\n                    <Tooltip title='Format code' placement='bottomRight'>\n                      <Button\n                        size='small'\n                        type='text'\n                        disabled={disabled}\n                        icon={<FormatPainterOutlined />}\n                        onClick={() => editor?.getAction?.('editor.action.formatDocument')?.run?.()}\n                      />\n                    </Tooltip>\n                    <Tooltip title='Import from JSON' placement='bottomRight'>\n                      <Button\n                        type='text'\n                        size={'small'}\n                        disabled={disabled}\n                        icon={<ImportOutlined />}\n                        onClick={() => {\n                          setJsonToJsonSchemaOpen(true);\n                        }}\n                      />\n                    </Tooltip>\n                  </Space>\n                }\n              />\n            </div>\n            <div className='grl-node-content-side__body'>\n              {match(activeTab)\n                .with(TabKey.Schema, () =>\n                  previousValue !== undefined ? (\n                    <DiffEditor\n                      loading={<Spin size='large' />}\n                      language={language}\n                      original={previousValue}\n                      modified={content?.schema}\n                      onMount={(editor) => setDiffEditor(editor)}\n                      theme={token.mode === 'dark' ? 'vs-dark' : 'light'}\n                      height='100%'\n                      options={{\n                        ...monacoOptions,\n                        readOnly: true,\n                      }}\n                    />\n                  ) : (\n                    <Editor\n                      loading={<Spin size='large' />}\n                      language={language}\n                      value={content?.schema || ''}\n                      onMount={(editor) => setEditor(editor)}\n                      onChange={(value) => {\n                        graphActions.updateNode(id, (draft) => {\n                          draft.content = { schema: value };\n                          return draft;\n                        });\n                      }}\n                      theme={token.mode === 'dark' ? 'vs-dark' : 'light'}\n                      height='100%'\n                      options={{\n                        ...monacoOptions,\n                        readOnly: disabled,\n                      }}\n                    />\n                  ),\n                )\n                .exhaustive()}\n            </div>\n            <JsonToJsonSchemaDialog\n              isOpen={jsonToJsonSchemaOpen}\n              onDismiss={() => setJsonToJsonSchemaOpen(false)}\n              onSuccess={({ schema, model }) => {\n                localStorage.setItem(`${id}-model`, model);\n                graphActions.updateNode(id, (draft) => {\n                  draft.content = { schema };\n                  return draft;\n                });\n                setJsonToJsonSchemaOpen(false);\n              }}\n              model={localStorage.getItem(`${id}-model`) || undefined}\n            />\n          </div>\n        </div>\n      </PanelGroup>\n    </div>\n  );\n};\n","import { BookOutlined, DeleteOutlined, LoginOutlined } from '@ant-design/icons';\nimport { Button, Modal, Typography } from 'antd';\nimport { produce } from 'immer';\nimport _ from 'lodash';\nimport React from 'react';\nimport type { z } from 'zod';\n\nimport { platform } from '../../../../helpers/platform';\nimport { type inputNodeSchema } from '../../../../helpers/schema';\nimport { SpacedText } from '../../../spaced-text';\nimport { useDecisionGraphActions, useDecisionGraphState } from '../../context/dg-store.context';\nimport type { Diff, DiffMetadata } from '../../dg-types';\nimport { TabJsonSchema } from '../../graph/tab-json-schema';\nimport { GraphNode } from '../graph-node';\nimport { NodeColor } from './colors';\nimport type { NodeSpecification } from './specification-types';\nimport { NodeKind } from './specification-types';\n\ntype InferredContent = z.infer<typeof inputNodeSchema>['content'];\n\nexport type NodeInputData = InferredContent & Diff;\n\nexport const inputSpecification: NodeSpecification<NodeInputData> = {\n  type: NodeKind.Input,\n  icon: <LoginOutlined />,\n  displayName: 'Request',\n  color: NodeColor.Green,\n  documentationUrl: 'https://gorules.io/docs/user-manual/decision-modeling/decisions',\n  shortDescription: 'Provides input context',\n  generateNode: () => ({\n    name: 'request',\n    content: {\n      schema: '',\n    },\n  }),\n  renderTab: ({ id, manager }) => <TabJsonSchema id={id} manager={manager} type={'input'} />,\n  renderNode: ({ id, data, selected, specification }) => {\n    const graphActions = useDecisionGraphActions();\n    const { disabled } = useDecisionGraphState(({ disabled }) => ({\n      disabled,\n    }));\n\n    return (\n      <GraphNode\n        id={id}\n        specification={specification}\n        name={data.name}\n        isSelected={selected}\n        handleLeft={false}\n        actions={[\n          <Button key='edit-table' type='text' onClick={() => graphActions.openTab(id)}>\n            Configure\n          </Button>,\n        ]}\n        menuItems={[\n          {\n            key: 'documentation',\n            icon: <BookOutlined />,\n            label: 'Documentation',\n            onClick: () => window.open(specification.documentationUrl, '_href'),\n          },\n          {\n            key: 'delete',\n            icon: <DeleteOutlined />,\n            danger: true,\n            label: <SpacedText left='Delete' right={platform.shortcut('Backspace')} />,\n            disabled,\n            onClick: () =>\n              Modal.confirm({\n                icon: null,\n                title: 'Delete node',\n                content: (\n                  <Typography.Text>\n                    Are you sure you want to delete <Typography.Text strong>{data.name}</Typography.Text> node.\n                  </Typography.Text>\n                ),\n                okButtonProps: { danger: true },\n                onOk: () => graphActions.removeNodes([id]),\n              }),\n          },\n        ]}\n      />\n    );\n  },\n  getDiffContent: (current, previous): any => {\n    const fields: DiffMetadata['fields'] = {};\n    return produce(current || {}, (draft) => {\n      if ((current?.schema || '')?.trim?.() !== (previous?.schema || '')?.trim?.()) {\n        _.set(fields, 'schema', {\n          previousValue: previous?.schema || '',\n          status: 'modified',\n        });\n      }\n\n      const hasModifications = Object.keys(fields).length > 0;\n\n      if (hasModifications) {\n        draft._diff = {\n          status: 'modified',\n          fields,\n        };\n      }\n      return draft;\n    });\n  },\n};\n","import { LogoutOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport { produce } from 'immer';\nimport _ from 'lodash';\nimport React from 'react';\nimport type { z } from 'zod';\n\nimport type { outputNodeSchema } from '../../../../helpers/schema';\nimport { useDecisionGraphActions } from '../../context/dg-store.context';\nimport type { Diff, DiffMetadata } from '../../dg-types';\nimport { TabJsonSchema } from '../../graph/tab-json-schema';\nimport { GraphNode } from '../graph-node';\nimport { NodeColor } from './colors';\nimport type { NodeSpecification } from './specification-types';\nimport { NodeKind } from './specification-types';\n\ntype InferredContent = z.infer<typeof outputNodeSchema>['content'];\n\nexport type NodeOutputData = InferredContent & Diff;\n\nexport const outputSpecification: NodeSpecification<NodeOutputData> = {\n  type: NodeKind.Output,\n  icon: <LogoutOutlined />,\n  color: NodeColor.Green,\n  displayName: 'Response',\n  documentationUrl: 'https://gorules.io/docs/user-manual/decision-modeling/decisions',\n  shortDescription: 'Outputs the context',\n  generateNode: () => ({ name: 'response', content: { schema: '' } }),\n  renderTab: ({ id, manager }) => <TabJsonSchema id={id} manager={manager} type={'output'} />,\n  renderNode: ({ id, data, selected, specification }) => {\n    const graphActions = useDecisionGraphActions();\n    return (\n      <GraphNode\n        id={id}\n        specification={specification}\n        name={data.name}\n        isSelected={selected}\n        handleRight={false}\n        actions={[\n          <Button key='edit-table' type='text' onClick={() => graphActions.openTab(id)}>\n            Configure\n          </Button>,\n        ]}\n      />\n    );\n  },\n  getDiffContent: (current, previous): any => {\n    const fields: DiffMetadata['fields'] = {};\n    return produce(current || {}, (draft) => {\n      if ((current?.schema || '')?.trim?.() !== (previous?.schema || '')?.trim?.()) {\n        _.set(fields, 'schema', {\n          previousValue: previous?.schema || '',\n          status: 'modified',\n        });\n      }\n\n      const hasModifications = Object.keys(fields).length > 0;\n\n      if (hasModifications) {\n        draft._diff = {\n          status: 'modified',\n          fields,\n        };\n      }\n      return draft;\n    });\n  },\n};\n","import { ArrowRightOutlined, BranchesOutlined, DeleteOutlined, DownOutlined } from '@ant-design/icons';\nimport type { VariableType } from '@gorules/zen-engine-wasm';\nimport { Button, Dropdown, Popconfirm, Typography } from 'antd';\nimport clsx from 'clsx';\nimport { produce } from 'immer';\nimport _ from 'lodash';\nimport React, { useLayoutEffect, useMemo, useState } from 'react';\nimport { useInView } from 'react-intersection-observer';\nimport { Handle, Position } from 'reactflow';\nimport { P, match } from 'ts-pattern';\n\nimport { useNodeType } from '../../../../helpers/node-type';\nimport { DiffCodeEditor } from '../../../shared/diff-ce';\nimport { useDecisionGraphActions, useDecisionGraphState } from '../../context/dg-store.context';\nimport { compareAndUnifyLists } from '../../dg-diff-util';\nimport type { Diff, DiffMetadata } from '../../dg-types';\nimport type { SimulationTrace, SimulationTraceDataSwitch } from '../../simulator/simulation.types';\nimport { GraphNode } from '../graph-node';\nimport { NodeColor } from './colors';\nimport type { MinimalNodeProps, NodeSpecification } from './specification-types';\nimport { NodeKind } from './specification-types';\n\nexport type SwitchStatement = {\n  id: string;\n  condition?: string;\n  isDefault?: boolean;\n} & Diff;\n\nexport type NodeSwitchData = {\n  hitPolicy?: 'first' | 'collect';\n  statements?: (SwitchStatement & Diff)[];\n} & Diff;\n\nexport const switchSpecification: NodeSpecification<NodeSwitchData> = {\n  type: NodeKind.Switch,\n  icon: <BranchesOutlined />,\n  displayName: 'Switch',\n  documentationUrl: 'https://gorules.io/docs/user-manual/decision-modeling/decisions/switch',\n  shortDescription: 'Conditional branching',\n  color: NodeColor.Purple,\n  getDiffContent: (current, previous) => {\n    return produce(current, (draft) => {\n      const fields: DiffMetadata['fields'] = {};\n      if ((current.hitPolicy ?? '') !== (previous.hitPolicy ?? '')) {\n        _.set(fields, 'hitPolicy', {\n          status: 'modified',\n          previousValue: current.hitPolicy,\n        });\n      }\n\n      const statements = compareAndUnifyLists(current?.statements || [], previous?.statements || [], {\n        compareFields: (current, previous) => {\n          const hasConditionChange = (current.condition ?? '') !== previous.condition;\n          // const hasIsDefaultChange = (current.isDefault ?? false) !== (previous.isDefault ?? false);\n\n          return {\n            hasChanges: hasConditionChange,\n            fields: {\n              ...(hasConditionChange && {\n                condition: {\n                  status: 'modified',\n                  previousValue: previous.condition,\n                },\n              }),\n              // ...(hasIsDefaultChange && {\n              //   isDefault: {\n              //     status: 'modified',\n              //     previousValue: previous.isDefault,\n              //   },\n              // }),\n            },\n          };\n        },\n      });\n\n      draft.statements = statements;\n      if (\n        statements.find(\n          (statement) =>\n            statement?._diff?.status === 'modified' ||\n            statement?._diff?.status === 'added' ||\n            statement?._diff?.status === 'removed',\n        )\n      ) {\n        _.set(fields, 'statements', {\n          status: 'modified',\n        });\n      }\n\n      if (Object.keys(fields).length > 0) {\n        draft._diff = {\n          status: 'modified',\n          fields,\n        };\n      }\n      return draft;\n    });\n  },\n  inferTypes: {\n    needsUpdate: () => false,\n    determineOutputType: (state) => state.input,\n  },\n  generateNode: ({ index }) => ({\n    name: `switch${index}`,\n    content: {\n      hitPolicy: 'first',\n      statements: [{ id: crypto.randomUUID(), condition: '', isDefault: false }],\n    },\n  }),\n  renderNode: ({ specification, ...props }) => <SwitchNode specification={specification} {...props} />,\n};\n\nconst SwitchNode: React.FC<\n  MinimalNodeProps & {\n    specification: Pick<NodeSpecification, 'displayName' | 'icon' | 'documentationUrl'>;\n  }\n> = ({ id, data, selected, specification }) => {\n  const graphActions = useDecisionGraphActions();\n  const { ref: inViewRef, inView } = useInView({ delay: 1_000 });\n  const { content, disabled, nodeTrace, compactMode, isGraphActive } = useDecisionGraphState(\n    ({ decisionGraph, disabled, simulate, compactMode, activeTab }) => ({\n      nodeTrace: match(simulate)\n        .with({ result: P._ }, ({ result }) => result?.trace?.[id] as SimulationTrace<SimulationTraceDataSwitch>)\n        .otherwise(() => null),\n      content: (decisionGraph?.nodes || []).find((n) => n?.id === id)?.content as NodeSwitchData | undefined,\n      disabled,\n      compactMode,\n      isGraphActive: activeTab === 'graph',\n    }),\n  );\n\n  const nodeType = useNodeType(id, { disabled: !isGraphActive || !inView });\n  const statements: SwitchStatement[] = content?.statements || [];\n  const hitPolicy = content?.hitPolicy || 'first';\n\n  const changeHitPolicy = (hitPolicy: string) => {\n    graphActions.updateNode(id, (node) => {\n      node.content.hitPolicy = hitPolicy;\n      return node;\n    });\n  };\n\n  const Handle = useMemo(() => (compactMode ? SwitchHandleCompact : SwitchHandle), [compactMode]);\n\n  return (\n    <GraphNode\n      id={id}\n      ref={inViewRef}\n      className={clsx(['switch'])}\n      specification={specification}\n      name={data.name}\n      handleRight={false}\n      helper={[<ArrowRightOutlined key='arrow-right' />]}\n      noBodyPadding\n      isSelected={selected}\n      actions={[\n        <Button\n          key='add condition'\n          type='text'\n          disabled={disabled}\n          onClick={() => {\n            if (hitPolicy === 'first' && statements?.length > 0) {\n              graphActions.updateNode(id, (draft) => {\n                draft.content.statements = ((draft.content.statements || []) as SwitchStatement[]).map((statement) => {\n                  if (statement.isDefault) {\n                    statement.isDefault = false;\n                  }\n                  return statement;\n                });\n                draft.content.statements.push({ id: crypto.randomUUID(), condition: '', isDefault: true });\n                return draft;\n              });\n            } else {\n              graphActions.updateNode(id, (draft) => {\n                draft.content.statements = ((draft.content.statements || []) as SwitchStatement[]).map((statement) => {\n                  if (statement.isDefault) {\n                    statement.isDefault = false;\n                  }\n                  return statement;\n                });\n                draft.content.statements.push({ id: crypto.randomUUID(), condition: '', isDefault: false });\n                return draft;\n              });\n            }\n          }}\n        >\n          Add Condition\n        </Button>,\n        <Dropdown\n          key='hitPolicy'\n          trigger={['click']}\n          placement='bottomRight'\n          menu={{\n            items: [\n              {\n                key: 'first',\n                label: 'First',\n                onClick: () => changeHitPolicy('first'),\n                disabled,\n              },\n              {\n                key: 'collect',\n                label: 'Collect',\n                disabled,\n                onClick: () => {\n                  graphActions.updateNode(id, (draft) => {\n                    draft.content.statements = ((draft.content.statements || []) as SwitchStatement[]).map(\n                      (statement) => {\n                        if (statement.isDefault) {\n                          statement.isDefault = false;\n                        }\n                        return statement;\n                      },\n                    );\n                    return draft;\n                  });\n                  changeHitPolicy('collect');\n                },\n              },\n            ],\n          }}\n        >\n          <Button type='text' style={{ textTransform: 'capitalize', marginLeft: 'auto' }}>\n            {hitPolicy} <DownOutlined />\n          </Button>\n        </Dropdown>,\n      ]}\n    >\n      <div className='switchNode'>\n        <div className='switchNode__body edit nodrag'>\n          {!(statements?.length > 0) && (\n            <Typography.Text type={'secondary'} className={'no-conditions'}>\n              No conditions\n            </Typography.Text>\n          )}\n          {statements.map((statement, index) => (\n            <Handle\n              key={statement.id}\n              index={index}\n              value={statement.condition}\n              diff={statement?._diff}\n              id={statement.id}\n              isDefault={statement.isDefault}\n              totalStatements={statements.length}\n              disabled={disabled}\n              hitPolicy={hitPolicy}\n              variableType={nodeType}\n              onSetIsDefault={(val) => {\n                graphActions.updateNode(id, (draft) => {\n                  const draftStatement = draft.content.statements.find((s: SwitchStatement) => {\n                    return s.id === statement.id;\n                  });\n                  if (val) {\n                    draftStatement.condition = '';\n                  }\n                  draftStatement.isDefault = val;\n                  return draft;\n                });\n              }}\n              isActive={match(nodeTrace?.traceData)\n                .with({ statements: P.array(P._) }, ({ statements }) =>\n                  statements.some((s) => typeof s === 'object' && s && 'id' in s && s.id === statement?.id),\n                )\n                .otherwise(() => false)}\n              onDelete={() => {\n                graphActions.updateNode(id, (draft) => {\n                  draft.content.statements = draft.content.statements.filter(\n                    (s: SwitchStatement) => s?.id !== statement?.id,\n                  );\n\n                  if ((draft.content.statements || []).length === 1) {\n                    draft.content.statements = ((draft.content.statements || []) as SwitchStatement[]).map(\n                      (statement) => {\n                        if (statement.isDefault) {\n                          statement.isDefault = false;\n                        }\n                        return statement;\n                      },\n                    );\n                  }\n\n                  return draft;\n                });\n                graphActions.removeEdgeByHandleId(statement?.id as string);\n              }}\n              onChange={(condition) => {\n                graphActions.updateNode(id, (draft) => {\n                  const draftStatement = draft.content.statements.find((s: SwitchStatement) => {\n                    return s.id === statement.id;\n                  });\n\n                  draftStatement.condition = condition;\n                  return draft;\n                });\n              }}\n            />\n          ))}\n        </div>\n      </div>\n    </GraphNode>\n  );\n};\n\nconst SwitchHandle: React.FC<{\n  id?: string;\n  value?: string;\n  isDefault?: boolean;\n  diff?: DiffMetadata;\n  onChange?: (value: string) => void;\n  onSetIsDefault?: (isDefault: boolean) => void;\n  onDelete?: () => void;\n  disabled?: boolean;\n  isActive?: boolean;\n  configurable?: boolean;\n  hitPolicy: 'first' | 'collect';\n  totalStatements: number;\n  index: number;\n  variableType?: VariableType;\n}> = ({\n  id,\n  value,\n  diff,\n  onChange,\n  disabled,\n  configurable = true,\n  onDelete,\n  isActive,\n  index = 0,\n  isDefault = false,\n  onSetIsDefault,\n  totalStatements,\n  hitPolicy,\n  variableType,\n}) => {\n  const [inner, setInner] = useState(value);\n  useLayoutEffect(() => {\n    if (inner !== value) {\n      setInner(value);\n    }\n  }, [value]);\n\n  const handleChange = (val: string) => {\n    setInner(val);\n    onChange?.(val);\n  };\n\n  const isLastIndex = index === totalStatements - 1;\n\n  const isElse =\n    isDefault && hitPolicy === 'first' && isLastIndex && index > 0 && (value || '')?.trim?.()?.length === 0;\n\n  return (\n    <div className={clsx('switchNode__statement', isActive && 'active', diff?.status && `diff-${diff?.status}`)}>\n      <div\n        className={clsx('switchNode__statement__heading', isElse && 'switchNode__statement__heading--without-input')}\n      >\n        {(index === 0 || hitPolicy === 'collect') && (\n          <Button\n            disabled={disabled}\n            className={clsx('switchNode__statement__heading__action')}\n            size={'small'}\n            type={'text'}\n          >\n            If\n          </Button>\n        )}\n        {hitPolicy !== 'collect' && index > 0 && (\n          <Button\n            className={clsx('switchNode__statement__heading__action', isElse && 'inactive')}\n            size={'small'}\n            type={'text'}\n            disabled={disabled}\n            onClick={() => {\n              if (isLastIndex && hitPolicy === 'first') {\n                onSetIsDefault?.(false);\n              }\n            }}\n          >\n            Else If\n          </Button>\n        )}\n        {hitPolicy !== 'collect' && index > 0 && isLastIndex && (\n          <Button\n            className={clsx('switchNode__statement__heading__action', !isElse && 'inactive')}\n            size={'small'}\n            type={'text'}\n            disabled={disabled}\n            onClick={() => {\n              if (isLastIndex && hitPolicy === 'first') {\n                onSetIsDefault?.(true);\n              }\n            }}\n          >\n            Else\n          </Button>\n        )}\n        <div\n          style={{\n            flexGrow: 1,\n          }}\n        />\n        {!disabled && configurable && (\n          <Popconfirm title='Remove condition?' okText='Remove' onConfirm={() => onDelete?.()}>\n            <Button className='switchNode__statement__delete' size='small' type='text' icon={<DeleteOutlined />} />\n          </Popconfirm>\n        )}\n        <Handle\n          id={id}\n          type='source'\n          position={Position.Right}\n          className={clsx(isActive && 'switchNode__activeHandle')}\n        />\n      </div>\n      {!isElse && (\n        <div className='switchNode__statement__inputArea'>\n          <DiffCodeEditor\n            style={{\n              fontSize: 12,\n              lineHeight: '20px',\n              width: '100%',\n            }}\n            displayDiff={diff?.fields?.condition?.status === 'modified'}\n            previousValue={diff?.fields?.condition?.previousValue}\n            value={inner}\n            maxRows={4}\n            disabled={disabled}\n            onChange={handleChange}\n            variableType={variableType}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst SwitchHandleCompact: React.FC<{\n  id?: string;\n  value?: string;\n  isDefault?: boolean;\n  diff?: DiffMetadata;\n  onChange?: (value: string) => void;\n  onSetIsDefault?: (isDefault: boolean) => void;\n  onDelete?: () => void;\n  disabled?: boolean;\n  isActive?: boolean;\n  configurable?: boolean;\n  hitPolicy: 'first' | 'collect';\n  totalStatements: number;\n  index: number;\n  variableType?: VariableType;\n}> = ({ id, value, diff, onChange, disabled, configurable = true, onDelete, isActive, variableType }) => {\n  const [inner, setInner] = useState(value);\n  useLayoutEffect(() => {\n    if (inner !== value) {\n      setInner(value);\n    }\n  }, [value]);\n\n  const handleChange = (val: string) => {\n    setInner(val);\n    onChange?.(val);\n  };\n\n  return (\n    <div\n      className={clsx('switchNode__statement', 'compact', isActive && 'active', diff?.status && `diff-${diff?.status}`)}\n    >\n      <div className={clsx('switchNode__statement__inputArea')}>\n        <DiffCodeEditor\n          style={{\n            fontSize: 12,\n            lineHeight: '20px',\n            width: '100%',\n          }}\n          displayDiff={diff?.fields?.condition?.status === 'modified'}\n          previousValue={diff?.fields?.condition?.previousValue}\n          value={inner}\n          maxRows={4}\n          disabled={disabled}\n          onChange={handleChange}\n          variableType={variableType}\n        />\n      </div>\n      {!disabled && configurable && (\n        <div className='switchNode__statement__button'>\n          <Popconfirm title='Remove condition?' okText='Remove' onConfirm={() => onDelete?.()}>\n            <Button className='switchNode__statement__delete' size='small' type='text' icon={<DeleteOutlined />} />\n          </Popconfirm>\n        </div>\n      )}\n      <Handle\n        id={id}\n        type='source'\n        position={Position.Right}\n        className={clsx(isActive && 'switchNode__activeHandle')}\n      />\n    </div>\n  );\n};\n","import _ from 'lodash';\nimport { P, match } from 'ts-pattern';\n\nimport type { DecisionEdge, DecisionGraphType, DecisionNode, DiffMetadata } from './dg-types';\nimport type { CustomNodeSpecification } from './nodes/custom-node';\nimport { decisionTableSpecification } from './nodes/specifications/decision-table.specification';\nimport { expressionSpecification } from './nodes/specifications/expression.specification';\nimport { functionSpecification } from './nodes/specifications/function.specification';\nimport { inputSpecification } from './nodes/specifications/input.specification';\nimport { outputSpecification } from './nodes/specifications/output.specification';\nimport { NodeKind, type NodeSpecification } from './nodes/specifications/specification-types';\nimport { switchSpecification } from './nodes/specifications/switch.specification';\n\nexport const compareStringFields = (field1?: string | null, field2?: string | null): boolean => {\n  const value1 = (field1 || '').trim();\n  const value2 = (field2 || '').trim();\n\n  return value1 === value2;\n};\n\nexport type ProcessNodesOptions = {\n  components: NodeSpecification[];\n  customNodes: CustomNodeSpecification<object, any>[];\n};\n\nexport const calculateDiffGraph = (\n  currentGraph: DecisionGraphType,\n  previousGraph: DecisionGraphType,\n  options?: ProcessNodesOptions,\n): DecisionGraphType => {\n  const nodes = processNodes(currentGraph?.nodes ?? [], previousGraph?.nodes ?? [], options);\n  const edges = processEdges(currentGraph?.edges ?? [], previousGraph?.edges ?? []);\n  return {\n    nodes,\n    edges,\n  };\n};\n\nexport const processNodes = (\n  currentNodes: DecisionNode<any>[],\n  previousNodes: DecisionNode<any>[],\n  options?: ProcessNodesOptions,\n) => {\n  const components = options?.components || [];\n  const customNodes = options?.customNodes || [];\n\n  // Start with all new version nodes\n  const nodesMap = new Map();\n\n  // Process new version nodes first\n  (currentNodes || []).forEach((newNode) => {\n    const oldNode = (previousNodes || []).find((n) => n.id === newNode.id);\n\n    if (!oldNode) {\n      // Added node\n      nodesMap.set(newNode.id, {\n        ...newNode,\n        _diff: {\n          status: 'added',\n        },\n      });\n    } else {\n      const fields: DiffMetadata['fields'] = {};\n\n      if (oldNode.position.x !== newNode.position.x || oldNode.position.y !== newNode.position.y) {\n        _.set(fields, 'position', {\n          status: 'moved',\n          previousValue: oldNode.position,\n        });\n      }\n\n      if (oldNode.name !== newNode.name) {\n        _.set(fields, 'name', {\n          status: 'modified',\n          previousValue: oldNode.name,\n        });\n      }\n\n      const calculatedContent = match([newNode.type, oldNode.type])\n        .with([NodeKind.Output, NodeKind.Output], () =>\n          outputSpecification?.getDiffContent?.(newNode?.content, oldNode?.content),\n        )\n        .with([NodeKind.Input, NodeKind.Input], () =>\n          inputSpecification?.getDiffContent?.(newNode?.content, oldNode?.content),\n        )\n        .with([NodeKind.Expression, NodeKind.Expression], () =>\n          expressionSpecification?.getDiffContent?.(newNode?.content, oldNode?.content),\n        )\n        .with([NodeKind.DecisionTable, NodeKind.DecisionTable], () =>\n          decisionTableSpecification?.getDiffContent?.(newNode?.content, oldNode?.content),\n        )\n        .with([NodeKind.Function, NodeKind.Function], () => {\n          const content: any = functionSpecification?.getDiffContent?.(newNode?.content, oldNode?.content);\n          return match(newNode?.content)\n            .with(P.string, () => {\n              if (content?._diff?.fields?.source?.status === 'modified') {\n                _.set(fields, 'content', {\n                  status: 'modified',\n                  previousValue: content?._diff?.fields?.source?.previousValue,\n                });\n              }\n              return content?.source;\n            })\n            .otherwise(() => content);\n        })\n        .with([NodeKind.Switch, NodeKind.Switch], () =>\n          switchSpecification?.getDiffContent?.(newNode?.content, oldNode?.content),\n        )\n        .otherwise(() => {\n          const component = components.find((cmp) => cmp.type === newNode.type);\n          if (component) {\n            return component?.getDiffContent?.(newNode?.content, oldNode?.content);\n          }\n\n          const customNode = customNodes.find(\n            (node) => newNode?.type === 'customNode' && newNode?.content?.kind === node?.kind,\n          );\n          if (customNode) {\n            return customNode?.calculateDiff?.(newNode?.content, oldNode?.content);\n          }\n\n          return null;\n        });\n\n      if (\n        Object.keys(fields || {}).filter((key) => key !== 'position').length > 0 ||\n        calculatedContent?._diff?.status === 'modified'\n      ) {\n        nodesMap.set(newNode.id, {\n          ...newNode,\n          content: calculatedContent ?? newNode.content,\n          _diff: {\n            status: 'modified',\n            fields,\n          },\n        });\n      } else if (Object.keys(fields || {}).length === 1 && fields?.position?.status === 'moved') {\n        nodesMap.set(newNode.id, {\n          ...newNode,\n          content: calculatedContent ?? newNode.content,\n          _diff: {\n            status: 'moved',\n            fields,\n          },\n        });\n      } else {\n        nodesMap.set(newNode.id, {\n          ...newNode,\n          _diff: {\n            status: 'unchanged',\n          },\n        });\n      }\n    }\n  });\n\n  // Add deleted nodes from old version\n  (previousNodes || []).forEach((oldNode) => {\n    if (!nodesMap.has(oldNode.id)) {\n      nodesMap.set(oldNode.id, {\n        ...oldNode,\n        _diff: {\n          status: 'removed',\n        },\n      });\n    }\n  });\n\n  return Array.from(nodesMap.values());\n};\n\nexport const processEdges = (currentEdges: DecisionEdge[], previousEdges: DecisionEdge[]) => {\n  const edgesMap = new Map();\n\n  // Process new version edges\n  (currentEdges || []).forEach((newEdge) => {\n    const oldEdge = (previousEdges || []).find((e) => e.id === newEdge.id);\n\n    if (!oldEdge) {\n      edgesMap.set(newEdge.id, {\n        ...newEdge,\n        _diff: {\n          status: 'added',\n        },\n      });\n    } else {\n      edgesMap.set(newEdge.id, {\n        ...newEdge,\n        _diff: {\n          status: 'unchanged',\n        },\n      });\n    }\n  });\n\n  // Add deleted edges from old version\n  (previousEdges || []).forEach((oldEdge) => {\n    if (!edgesMap.has(oldEdge.id)) {\n      edgesMap.set(oldEdge.id, {\n        ...oldEdge,\n        _diff: {\n          status: 'removed',\n        },\n      });\n    }\n  });\n\n  return Array.from(edgesMap.values());\n};\n\n// Array comparison\ninterface BaseItem {\n  id?: string;\n  _id?: string;\n  [key: string]: any;\n}\n\ninterface DiffOptions<T extends BaseItem> {\n  idField?: 'id' | '_id';\n  compareFields?: (\n    current: T,\n    previous: T,\n  ) => {\n    hasChanges: boolean;\n    fields?: Record<string, DiffMetadata>;\n  };\n}\n\ntype UnifiedItem<T> = T & {\n  originalIndex: number;\n  isRemoved?: boolean;\n};\n\nexport const compareAndUnifyLists = <T extends BaseItem>(\n  newList: T[],\n  oldList: T[],\n  options: DiffOptions<T> = {},\n): T[] => {\n  const { idField = 'id', compareFields } = options;\n\n  const getId = (item: T) => item[idField] || item['_id'];\n\n  const oldMap = new Map(oldList.map((item, index) => [getId(item), { ...item, index }]));\n  const newMap = new Map(newList.map((item, index) => [getId(item), { ...item, index }]));\n\n  const unifiedList: UnifiedItem<T>[] = [];\n\n  const insertions = new Set<number>();\n  const removals = new Set<number>();\n\n  newList.forEach((item, index) => {\n    if (!oldMap.has(getId(item))) {\n      insertions.add(index);\n    }\n  });\n\n  oldList.forEach((item, index) => {\n    if (!newMap.has(getId(item))) {\n      removals.add(index);\n    }\n  });\n\n  const isRealPositionChange = (oldIndex: number, newIndex: number): boolean => {\n    const insertionsBefore = Array.from(insertions).filter((i) => i < newIndex).length;\n    const removalsBefore = Array.from(removals).filter((i) => i < oldIndex).length;\n\n    const adjustedNewIndex = newIndex - insertionsBefore;\n    const adjustedOldIndex = oldIndex - removalsBefore;\n\n    return adjustedOldIndex !== adjustedNewIndex;\n  };\n\n  newList.forEach((item, newIndex) => {\n    const oldItem = oldMap.get(getId(item));\n\n    if (!oldItem) {\n      unifiedList.push({\n        ...item,\n        originalIndex: newIndex,\n        _diff: {\n          status: 'added',\n          newIndex,\n        },\n      });\n    } else {\n      const isPositionChanged = isRealPositionChange(oldItem.index, newIndex);\n      const changes = compareFields ? compareFields(item, oldItem) : { hasChanges: false };\n\n      if (changes.hasChanges || isPositionChanged) {\n        unifiedList.push({\n          ...item,\n          originalIndex: newIndex,\n          _diff: {\n            status: 'modified',\n            positionChanged: isPositionChanged,\n            previousIndex: oldItem.index,\n            newIndex,\n            ...(changes.fields ? { fields: changes.fields } : {}),\n          },\n        });\n      } else {\n        unifiedList.push({\n          ...item,\n          originalIndex: newIndex,\n          _diff: {\n            status: 'unchanged',\n          },\n        });\n      }\n    }\n  });\n\n  oldList.forEach((item, oldIndex) => {\n    if (!newMap.has(getId(item))) {\n      let insertIndex = oldIndex;\n      // @ts-expect-error error should not happen here\n      while (insertIndex < unifiedList.length && oldMap.get(getId(unifiedList[insertIndex]))?.index < oldIndex) {\n        insertIndex++;\n      }\n\n      unifiedList.splice(insertIndex, 0, {\n        ...item,\n        originalIndex: oldIndex,\n        isRemoved: true,\n        _diff: {\n          status: 'removed',\n          previousIndex: oldIndex,\n        },\n      });\n    }\n  });\n\n  // Clean up utility properties before returning\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  return unifiedList.map(({ originalIndex, isRemoved, ...item }) => item as unknown as T);\n};\n\nexport const addStrikethrough = (text?: string): string => {\n  if (!text) return '';\n  const strikethroughChar = '\\u0336';\n  return Array.from(text)\n    .map((char) => char + strikethroughChar)\n    .join('');\n};\n\nexport const buildDiffString = (currentValue: string, previousValue: string): string => {\n  return [addStrikethrough(previousValue), '->', currentValue].join(' ');\n};\n","import type { z } from 'zod';\n\nimport type { decisionModelSchema, nodeSchema } from '../../helpers/schema';\n\nexport const privateSymbol = Symbol('private');\n\nexport type Position = {\n  x: number;\n  y: number;\n};\n\ntype NodeSchema = z.infer<typeof nodeSchema>;\n\nexport type DiffStatus = 'added' | 'removed' | 'modified' | 'unchanged' | 'moved';\n\nexport type Diff<T = any> = {\n  _diff?: DiffMetadata<T>;\n};\n\nexport type DiffMetadata<T = any> = {\n  status?: DiffStatus;\n  previousValue?: T;\n  previousIndex?: number;\n  currentIndex?: number;\n  fields?: Record<string, DiffMetadata>;\n};\n\nexport type DecisionNode<T = any> = {\n  id: string;\n  name: string;\n  description?: string;\n  type?: NodeSchema['type'] | string;\n  content?: T;\n  position: Position;\n  [privateSymbol]?: {\n    dimensions?: { height?: number; width?: number };\n    selected?: boolean;\n  };\n  _diff?: {\n    status: DiffStatus;\n    fields?: Record<string, DiffMetadata>;\n  };\n};\n\nexport type DecisionEdge = {\n  id: string;\n  name?: string;\n  sourceId: string;\n  targetId: string;\n  sourceHandle?: string | null;\n  targetHandle?: string | null;\n  type?: string;\n  _diff?: {\n    status: DiffStatus;\n  };\n};\n\nexport type DecisionSettings = z.infer<typeof decisionModelSchema>['settings'] & Diff;\n\nexport type DecisionGraphType = {\n  nodes: DecisionNode[];\n  edges: DecisionEdge[];\n  settings?: DecisionSettings;\n};\n","import type { Edge, Node } from 'reactflow';\nimport { MarkerType } from 'reactflow';\n\nimport type { DecisionEdge, DecisionNode } from './dg-types';\nimport { privateSymbol } from './dg-types';\n\nexport const mapToDecisionEdge = (edge: Edge): DecisionEdge => {\n  return {\n    id: edge?.id,\n    sourceId: edge?.source,\n    type: edge?.type,\n    targetId: edge?.target,\n    name: edge?.label as string,\n    sourceHandle: edge.sourceHandle ?? undefined,\n    targetHandle: edge.targetHandle ?? undefined,\n  };\n};\n\nexport const mapToGraphNode = (node: DecisionNode): Node => {\n  return {\n    id: node.id,\n    type: node.type,\n    position: node.position,\n    height: node[privateSymbol]?.dimensions?.height,\n    width: node[privateSymbol]?.dimensions?.width,\n    selected: node[privateSymbol]?.selected,\n    data: {\n      name: node.name,\n      kind: node?.content?.kind,\n    },\n  };\n};\nexport const mapToGraphNodes = (nodes: DecisionNode[]): Node[] => {\n  return nodes.map(mapToGraphNode);\n};\n\nexport const mapToGraphEdge = (edge: DecisionEdge): Edge => {\n  return {\n    id: edge.id,\n    source: edge.sourceId,\n    type: edge?.type || 'edge',\n    target: edge.targetId,\n    label: edge.name,\n    sourceHandle: edge.sourceHandle,\n    targetHandle: edge.targetHandle,\n    markerEnd: { type: MarkerType.ArrowClosed, width: 20, height: 20 },\n  };\n};\n\nexport const mapToGraphEdges = (edges: DecisionEdge[]): Edge[] => {\n  return edges.filter((edge) => edge.sourceId && edge.targetId).map(mapToGraphEdge);\n};\n","import { type VariableType } from '@gorules/zen-engine-wasm';\nimport type { Monaco } from '@monaco-editor/react';\nimport equal from 'fast-deep-equal/es6/react';\nimport { produce } from 'immer';\nimport type { WritableDraft } from 'immer/src/types/types-external';\nimport React, { type MutableRefObject, createRef, useMemo } from 'react';\nimport type { EdgeChange, NodeChange, ReactFlowInstance, useEdgesState, useNodesState } from 'reactflow';\nimport { match } from 'ts-pattern';\nimport type { StoreApi, UseBoundStore } from 'zustand';\nimport { create } from 'zustand';\n\nimport { SchemaSelectProps } from '../../../helpers/components';\nimport type { CodeEditorProps } from '../../code-editor';\nimport { calculateDiffGraph } from '../dg-diff-util';\nimport type { DecisionEdge, DecisionGraphType, DecisionNode } from '../dg-types';\nimport { privateSymbol } from '../dg-types';\nimport { mapToGraphEdge, mapToGraphEdges, mapToGraphNode, mapToGraphNodes } from '../dg-util';\nimport type { useGraphClipboard } from '../hooks/use-graph-clipboard';\nimport type { CustomNodeSpecification } from '../nodes/custom-node';\nimport { NodeKind, type NodeSpecification } from '../nodes/specifications/specification-types';\nimport type { Simulation } from '../simulator/simulation.types';\n\nexport type PanelType = {\n  id: string;\n  icon: React.ReactNode;\n  title: string;\n  renderPanel?: React.FC;\n  hideHeader?: boolean;\n  onClick?: () => void;\n};\n\ntype DraftUpdateCallback<T> = (draft: WritableDraft<T>) => WritableDraft<T>;\n\nexport enum NodeTypeKind {\n  Input,\n  Output,\n  InferredInput,\n  InferredOutput,\n}\n\nexport type SetDecisionGraphOptions = {\n  skipOnChangeEvent?: boolean;\n};\n\nexport type DecisionGraphStoreType = {\n  state: {\n    id?: string;\n    components: NodeSpecification[];\n    disabled?: boolean;\n    configurable?: boolean;\n    decisionGraph: DecisionGraphType;\n    hoveredEdgeId: string | null;\n    openTabs: string[];\n    activeTab: string;\n\n    name: string;\n\n    customNodes: CustomNodeSpecification<object, any>[];\n\n    panels?: PanelType[];\n    activePanel?: string;\n    onPanelsChange?: (val?: string) => void;\n\n    inputsSchema?: SchemaSelectProps[];\n    outputsSchema?: SchemaSelectProps[];\n\n    simulate?: Simulation;\n\n    compactMode?: boolean;\n\n    nodeTypes: Record<string, Partial<Record<NodeTypeKind, VariableType>>>;\n    globalType: Record<string, VariableType>;\n  };\n\n  references: {\n    nodesState: MutableRefObject<ReturnType<typeof useNodesState>>;\n    edgesState: MutableRefObject<ReturnType<typeof useEdgesState>>;\n    reactFlowInstance: MutableRefObject<ReactFlowInstance | null>;\n    graphClipboard: MutableRefObject<ReturnType<typeof useGraphClipboard>>;\n  };\n\n  actions: {\n    setDecisionGraph: (val: Partial<DecisionGraphType>, options?: SetDecisionGraphOptions) => void;\n    calculateDiffGraph: (currentGraph: DecisionGraphType, previousGraph: DecisionGraphType) => DecisionGraphType;\n\n    handleNodesChange: (nodesChange: NodeChange[]) => void;\n    handleEdgesChange: (edgesChange: EdgeChange[]) => void;\n\n    setNodes: (nodes: DecisionNode[]) => void;\n    addNodes: (nodes: DecisionNode[]) => void;\n    updateNode: (id: string, updater: DraftUpdateCallback<DecisionNode>) => void;\n    removeNodes: (ids: string[]) => void;\n\n    duplicateNodes: (ids: string[]) => void;\n    copyNodes: (ids: string[]) => void;\n    pasteNodes: () => void;\n\n    setEdges: (edges: DecisionEdge[]) => void;\n    addEdges: (edge: DecisionEdge[]) => void;\n    removeEdges: (ids: string[]) => void;\n    removeEdgeByHandleId: (handleId: string) => void;\n    setHoveredEdgeId: (edgeId: string | null) => void;\n\n    closeTab: (id: string, action?: string) => void;\n    openTab: (id: string) => void;\n    goToNode: (id: string) => void;\n\n    setActivePanel: (panel?: string) => void;\n\n    setCompactMode: (mode: boolean) => void;\n    toggleCompactMode: () => void;\n\n    setNodeType: (id: string, kind: NodeTypeKind, vt: VariableType) => void;\n    removeNodeType: (id: string, kind?: NodeTypeKind) => void;\n\n    triggerNodeSelect: (id: string, mode: 'toggle' | 'only') => void;\n  };\n\n  listeners: {\n    onChange?: (val: DecisionGraphType) => void;\n    onPanelsChange?: (val?: string) => void;\n    onReactFlowInit?: (instance: ReactFlowInstance) => void;\n    onCodeExtension?: CodeEditorProps['extension'];\n    onFunctionReady?: (monaco: Monaco) => void;\n  };\n};\n\nexport type ExposedStore<T> = UseBoundStore<StoreApi<T>> & {\n  setState: (partial: Partial<T>) => void;\n};\n\nexport const DecisionGraphStoreContext = React.createContext<{\n  stateStore: ExposedStore<DecisionGraphStoreType['state']>;\n  listenerStore: ExposedStore<DecisionGraphStoreType['listeners']>;\n  referenceStore: ExposedStore<DecisionGraphStoreType['references']>;\n  actions: DecisionGraphStoreType['actions'];\n}>({} as any);\n\nexport type DecisionGraphContextProps = {\n  //\n};\n\nexport const DecisionGraphProvider: React.FC<React.PropsWithChildren<DecisionGraphContextProps>> = (props) => {\n  const { children } = props;\n\n  const stateStore = useMemo(\n    () =>\n      create<DecisionGraphStoreType['state']>()(() => ({\n        id: undefined,\n        simulate: undefined,\n        decisionGraph: { nodes: [], edges: [] },\n        hoveredEdgeId: null,\n        openTabs: [],\n        activeTab: 'graph',\n        name: 'graph.json',\n        disabled: false,\n        configurable: true,\n        components: [],\n        customNodes: [],\n        activePanel: undefined,\n        panels: [],\n        compactMode: localStorage.getItem('jdm-compact-mode') === 'true',\n        nodeTypes: {},\n        globalType: {},\n      })),\n    [],\n  );\n\n  const listenerStore = useMemo(\n    () =>\n      create<DecisionGraphStoreType['listeners']>(() => ({\n        onChange: undefined,\n        onPanelsChange: undefined,\n      })),\n    [],\n  );\n\n  const referenceStore = useMemo(\n    () =>\n      create<DecisionGraphStoreType['references']>(() => ({\n        nodesState: createRef() as MutableRefObject<ReturnType<typeof useNodesState>>,\n        edgesState: createRef() as MutableRefObject<ReturnType<typeof useEdgesState>>,\n        graphClipboard: createRef() as MutableRefObject<ReturnType<typeof useGraphClipboard>>,\n        reactFlowInstance: createRef() as MutableRefObject<ReactFlowInstance | null>,\n      })),\n    [],\n  );\n\n  const actions = useMemo<DecisionGraphStoreType['actions']>(\n    () => ({\n      handleNodesChange: (changes = []) => {\n        const { nodesState } = referenceStore.getState();\n        const { decisionGraph } = stateStore.getState();\n        const [, , onNodesChange] = nodesState.current;\n\n        let hasChanges = false;\n\n        onNodesChange?.(changes);\n        const newDecisionGraph = produce(decisionGraph, (draft) => {\n          changes.forEach((c) =>\n            match(c)\n              .with({ type: 'position' }, (p) => {\n                const node = draft.nodes.find((n) => n.id === p.id);\n                if (node && p.position && !equal(node.position, p.position)) {\n                  hasChanges = true;\n                  node.position = p.position;\n                }\n              })\n              .with({ type: 'dimensions' }, (d) => {\n                const node = draft.nodes.find((n) => n.id === d.id);\n                if (node && !equal(node[privateSymbol]?.dimensions, d.dimensions)) {\n                  hasChanges = true;\n                  node[privateSymbol] ??= {};\n                  node[privateSymbol].dimensions = { height: d.dimensions?.height, width: d.dimensions?.width };\n                }\n              })\n              .with({ type: 'select' }, (s) => {\n                const node = draft.nodes.find((n) => n.id === s.id);\n\n                if (node && node[privateSymbol]?.selected !== s.selected) {\n                  hasChanges = true;\n                  node[privateSymbol] ??= {};\n                  node[privateSymbol].selected = s.selected;\n                }\n              })\n              .otherwise(() => {\n                // No-op\n              }),\n          );\n        });\n\n        if (!hasChanges) {\n          return;\n        }\n\n        stateStore.setState({ decisionGraph: newDecisionGraph });\n        listenerStore.getState().onChange?.(newDecisionGraph);\n      },\n      handleEdgesChange: (changes = []) => {\n        const { decisionGraph } = stateStore.getState();\n        const { edgesState } = referenceStore.getState();\n\n        edgesState?.current?.[2](changes);\n        if (changes.find((c) => c.type === 'remove')) {\n          const newDecisionGraph = produce(decisionGraph, (draft) => {\n            const edges = (draft.edges || [])\n              .map((edge) => {\n                const change = changes.find((change) => 'id' in change && change.id === edge.id);\n                if (change?.type === 'remove') {\n                  return null;\n                }\n                return edge;\n              })\n              .filter((node) => !!node) as DecisionEdge[];\n            draft.edges = edges;\n          });\n\n          stateStore.setState({ decisionGraph: newDecisionGraph });\n          listenerStore.getState().onChange?.(newDecisionGraph);\n        }\n      },\n      setNodes: (nodes: DecisionNode[] = []) => {\n        const { nodesState } = referenceStore.getState();\n        const { decisionGraph } = stateStore.getState();\n        nodesState?.current?.[1](mapToGraphNodes(nodes));\n\n        const newDecisionGraph = produce(decisionGraph, (draft) => {\n          draft.nodes = nodes;\n        });\n\n        stateStore.setState({ decisionGraph: newDecisionGraph });\n        listenerStore.getState().onChange?.(newDecisionGraph);\n      },\n      addNodes: (nodes: DecisionNode[]) => {\n        const { nodesState } = referenceStore.getState();\n        const { decisionGraph } = stateStore.getState();\n\n        const hasInput = nodesState.current[0]?.some((n) => n.type === NodeKind.Input);\n        if (hasInput) {\n          nodes = nodes.filter((n) => n.type !== NodeKind.Input);\n        }\n\n        nodesState.current[1]?.((n) => n.concat(mapToGraphNodes(nodes)));\n        const newDecisionGraph = produce(decisionGraph, (draft) => {\n          draft.nodes = (draft.nodes || []).concat(nodes);\n        });\n\n        stateStore.setState({ decisionGraph: newDecisionGraph });\n        listenerStore.getState().onChange?.(newDecisionGraph);\n      },\n      duplicateNodes: (ids) => {\n        const { nodesState, edgesState } = referenceStore.getState();\n        const { decisionGraph } = stateStore.getState();\n\n        let nodes = (decisionGraph?.nodes || []).filter((n) => ids.includes(n.id));\n\n        const hasInput = nodesState.current[0]?.some((n) => n.type === NodeKind.Input);\n        if (hasInput) {\n          nodes = nodes.filter((n) => n.type !== NodeKind.Input);\n        }\n\n        if (nodes.length === 0) {\n          return;\n        }\n\n        const nodeIds: Record<string, string> = nodes.reduce(\n          (acc, curr) => ({\n            ...acc,\n            [curr.id]: crypto.randomUUID(),\n          }),\n          {},\n        );\n\n        const newNodes = nodes.map<DecisionNode>((node) => ({\n          ...node,\n          id: nodeIds[node.id],\n          position: {\n            x: node.position?.x || 0,\n            y: (node.position?.y || 0) + 140,\n          },\n        }));\n\n        const oldNodeIds = Object.keys(nodeIds);\n        const newEdges: DecisionEdge[] = [];\n\n        if (newNodes.length > 0) {\n          (edgesState.current?.[0] || []).forEach((edge) => {\n            if (oldNodeIds.includes(edge.source) && oldNodeIds.includes(edge.target)) {\n              newEdges.push({\n                id: crypto.randomUUID(),\n                type: edge.type,\n                sourceId: nodeIds[edge.source],\n                targetId: nodeIds[edge.target],\n                sourceHandle: edge.sourceHandle ?? undefined,\n                targetHandle: edge.targetHandle ?? undefined,\n              });\n            }\n          });\n        }\n\n        nodesState.current[1]?.((n) => n.concat(newNodes.map(mapToGraphNode)));\n        edgesState.current[1]?.((e) => e.concat(newEdges.map(mapToGraphEdge)));\n        const newDecisionGraph = produce(decisionGraph, (draft) => {\n          draft.nodes.push(...newNodes);\n          draft.edges.push(...newEdges);\n        });\n\n        stateStore.setState({ decisionGraph: newDecisionGraph });\n        listenerStore.getState().onChange?.(newDecisionGraph);\n      },\n      copyNodes: (ids) => {\n        const { graphClipboard, nodesState } = referenceStore.getState();\n        if (!graphClipboard.current || !nodesState.current) {\n          return;\n        }\n\n        const [nodes] = nodesState.current;\n        const copyNodes = nodes.filter((n) => ids.includes(n.id));\n\n        graphClipboard.current.copyNodes(copyNodes);\n      },\n      pasteNodes: () => {\n        const { graphClipboard } = referenceStore.getState();\n        graphClipboard.current?.pasteNodes?.();\n      },\n      removeNodes: (ids = []) => {\n        const { nodesState, edgesState } = referenceStore.getState();\n        const { decisionGraph, nodeTypes } = stateStore.getState();\n\n        nodesState.current[1]?.((nodes) => nodes.filter((n) => ids.every((id) => n.id !== id)));\n        edgesState.current[1]?.((edges) =>\n          edges.filter((e) =>\n            ids.every((id) => e.source !== id && e.target !== id && e.sourceHandle !== id && e.targetHandle !== id),\n          ),\n        );\n\n        const newDecisionGraph = produce(decisionGraph, (draft) => {\n          const nodes = draft.nodes || [];\n          const edges = draft.edges || [];\n          draft.nodes = nodes.filter((n) => ids.every((id) => n.id !== id));\n          draft.edges = edges.filter((e) =>\n            ids.every((id) => e.sourceId !== id && e.targetId !== id && e.sourceHandle !== id && e.targetHandle !== id),\n          );\n        });\n\n        const newNodeTypes = produce(nodeTypes, (draft) => {\n          ids.forEach((id) => {\n            if (id in draft) {\n              delete draft[id];\n            }\n          });\n        });\n\n        stateStore.setState({ decisionGraph: newDecisionGraph, nodeTypes: newNodeTypes });\n        listenerStore.getState().onChange?.(newDecisionGraph);\n      },\n      addEdges: (edges: DecisionEdge[]) => {\n        const { edgesState } = referenceStore.getState();\n        const { decisionGraph } = stateStore.getState();\n\n        edgesState.current?.[1]?.((els) => els.concat(edges.map(mapToGraphEdge)));\n        const newDecisionGraph = produce(decisionGraph, (draft) => {\n          draft.edges = (draft.edges || []).concat(edges);\n        });\n\n        stateStore.setState({ decisionGraph: newDecisionGraph });\n        listenerStore.getState().onChange?.(newDecisionGraph);\n      },\n      setEdges: (edges = []) => {\n        const { edgesState } = referenceStore.getState();\n        const { decisionGraph } = stateStore.getState();\n\n        edgesState?.current?.[1]?.(mapToGraphEdges(edges));\n        const newDecisionGraph = produce(decisionGraph, (draft) => {\n          draft.edges = edges;\n        });\n\n        stateStore.setState({ decisionGraph: newDecisionGraph });\n        listenerStore.getState().onChange?.(newDecisionGraph);\n      },\n      removeEdges: (ids) => {\n        const { edgesState } = referenceStore.getState();\n        const { decisionGraph } = stateStore.getState();\n\n        edgesState?.current?.[1]?.((edges) => edges.filter((e) => !ids.find((id) => e.id === id)));\n        const newDecisionGraph = produce(decisionGraph, (draft) => {\n          draft.edges = draft.edges.filter((e) => !ids.find((id) => e.id === id));\n        });\n\n        stateStore.setState({ decisionGraph: newDecisionGraph });\n        listenerStore.getState().onChange?.(newDecisionGraph);\n      },\n      removeEdgeByHandleId: (handleId: string) => {\n        if (!handleId) return;\n        const { edgesState } = referenceStore.getState();\n        const { decisionGraph } = stateStore.getState();\n        edgesState?.current?.[1]?.((edges) => edges.filter((e) => e.sourceHandle !== handleId));\n        const newDecisionGraph = produce(decisionGraph, (draft) => {\n          draft.edges = draft.edges.filter((e) => e.sourceHandle !== handleId);\n        });\n\n        stateStore.setState({ decisionGraph: newDecisionGraph });\n        listenerStore.getState().onChange?.(newDecisionGraph);\n      },\n      updateNode: (id, updater) => {\n        const { decisionGraph } = stateStore.getState();\n        const { nodesState } = referenceStore.getState();\n        const [nodes, setNodes] = nodesState.current;\n\n        const newDecisionGraph = produce(decisionGraph, (draft) => {\n          const node = (draft.nodes ?? []).find((node) => node?.id === id);\n          if (!node) {\n            return;\n          }\n\n          updater(node);\n        });\n\n        const changedNode = newDecisionGraph.nodes.find((n) => n.id === id);\n        if (!changedNode) {\n          return;\n        }\n\n        const graphChangedNode = mapToGraphNode(changedNode as DecisionNode);\n        const existingGraphNode = nodes.find((n) => n.id === id);\n        if (!equal(graphChangedNode, existingGraphNode)) {\n          setNodes((nodes) => nodes.map((n) => (n.id === id ? graphChangedNode : n)));\n        }\n\n        stateStore.setState({ decisionGraph: newDecisionGraph });\n        listenerStore.getState().onChange?.(newDecisionGraph);\n      },\n      setDecisionGraph: (graph, options = {}) => {\n        const { decisionGraph } = stateStore.getState();\n        const { edgesState, nodesState } = referenceStore.getState();\n        const { skipOnChangeEvent = false } = options;\n\n        const newDecisionGraph = produce(decisionGraph, (draft) => {\n          Object.assign(draft, graph);\n        });\n\n        edgesState?.current?.[1](mapToGraphEdges(newDecisionGraph?.edges ?? []));\n        nodesState?.current?.[1](mapToGraphNodes(newDecisionGraph?.nodes ?? []));\n        stateStore.setState({\n          decisionGraph: newDecisionGraph,\n        });\n        if (!skipOnChangeEvent) {\n          listenerStore.getState().onChange?.(newDecisionGraph);\n        }\n      },\n      calculateDiffGraph: (currentGraph, previousGraph) => {\n        const { components, customNodes } = stateStore.getState();\n        return calculateDiffGraph(currentGraph, previousGraph, {\n          components,\n          customNodes,\n        });\n      },\n      setHoveredEdgeId: (edgeId) => stateStore.setState({ hoveredEdgeId: edgeId }),\n      goToNode: (id: string) => {\n        if (stateStore.getState().activeTab !== 'graph') {\n          return;\n        }\n\n        const { reactFlowInstance } = referenceStore.getState();\n        if (!reactFlowInstance.current) {\n          return;\n        }\n\n        const node = reactFlowInstance.current.getNode(id);\n        if (!node) {\n          return;\n        }\n\n        reactFlowInstance.current.fitView({ nodes: [node], duration: 1_000, maxZoom: 1.25 });\n      },\n      openTab: (id: string) => {\n        const { openTabs } = stateStore.getState();\n        const nodeId = openTabs.find((i) => i === id);\n\n        if (id === 'graph') {\n          return stateStore.setState({ activeTab: id });\n        }\n\n        if (nodeId) {\n          stateStore.setState({ activeTab: nodeId });\n        } else {\n          stateStore.setState({ openTabs: [...openTabs, id], activeTab: id });\n        }\n      },\n      closeTab: (id: string, action?: string) => {\n        const { openTabs, activeTab } = stateStore.getState();\n        const index = openTabs?.findIndex((i) => i === id);\n        const tab = openTabs?.[index];\n\n        const updatedTabs = match(action)\n          .with(undefined, () => openTabs.filter((id) => id !== tab))\n          .with('close', () => openTabs.filter((id) => id !== tab))\n          .with('close-all', () => [])\n          .with('close-other', () => openTabs.filter((id) => id === tab))\n          .with('close-right', () => openTabs.slice(0, index + 1))\n          .with('close-left', () => openTabs.slice(index))\n          .otherwise(() => openTabs);\n\n        const updatedState: Partial<DecisionGraphStoreType['state']> = {\n          openTabs: updatedTabs,\n        };\n\n        const newActiveTabId = updatedTabs?.find((i) => i === activeTab);\n        if (!newActiveTabId) {\n          updatedState.activeTab = updatedTabs?.[index - 1] ?? 'graph';\n        }\n\n        stateStore.setState(updatedState);\n      },\n      setActivePanel: (panel?: string) => {\n        const { panels } = stateStore.getState();\n        const updatedState: Partial<DecisionGraphStoreType['state']> = {\n          activePanel: panel === undefined ? undefined : (panels || []).find((p) => p.id === panel)?.id,\n        };\n        listenerStore.getState()?.onPanelsChange?.(panel);\n        stateStore.setState(updatedState);\n      },\n      setCompactMode: (mode: boolean) => {\n        const updatedState: Partial<DecisionGraphStoreType['state']> = {\n          compactMode: mode,\n        };\n        localStorage.setItem('jdm-compact-mode', `${mode}`);\n        stateStore.setState(updatedState);\n      },\n      toggleCompactMode: () => {\n        const { compactMode } = stateStore.getState();\n        const mode = !compactMode;\n        const updatedState: Partial<DecisionGraphStoreType['state']> = {\n          compactMode: mode,\n        };\n        localStorage.setItem('jdm-compact-mode', `${mode}`);\n        stateStore.setState(updatedState);\n      },\n      setNodeType: (id, kind, vt) => {\n        const { nodeTypes } = stateStore.getState();\n\n        const newNodeTypes = produce(nodeTypes, (draft) => {\n          draft[id] ??= {};\n          draft[id][kind] = vt;\n        });\n\n        stateStore.setState({ nodeTypes: newNodeTypes });\n      },\n      removeNodeType: (id, kind) => {\n        const { nodeTypes } = stateStore.getState();\n\n        const newNodeTypes = produce(nodeTypes, (draft) => {\n          if (!(id in draft)) {\n            return;\n          }\n\n          if (kind) {\n            if (kind in draft[id]) {\n              delete draft[id][kind];\n            }\n          } else {\n            delete draft[id];\n          }\n        });\n\n        stateStore.setState({ nodeTypes: newNodeTypes });\n      },\n      triggerNodeSelect: (id, mode) => {\n        const { decisionGraph } = stateStore.getState();\n        const { nodesState, edgesState } = referenceStore.getState();\n        const [, setNodes] = nodesState.current;\n        const [, setEdges] = edgesState.current;\n\n        const newDecisionGraph = produce(decisionGraph, (draft) => {\n          const chosenNode = draft.nodes.find((n) => n.id === id);\n          if (!chosenNode) {\n            return;\n          }\n\n          if (mode === 'only') {\n            draft.nodes.forEach((n) => {\n              if (n[privateSymbol]) {\n                n[privateSymbol].selected = false;\n              }\n            });\n          }\n\n          chosenNode[privateSymbol] ??= {};\n          chosenNode[privateSymbol].selected = match(mode)\n            .with('only', () => true)\n            .otherwise(() => !chosenNode[privateSymbol]?.selected);\n        });\n\n        setNodes(mapToGraphNodes(newDecisionGraph.nodes));\n        if (mode == 'only') {\n          setEdges((edges) =>\n            edges.map((e) => ({\n              ...e,\n              selected: false,\n            })),\n          );\n        }\n        stateStore.setState({ decisionGraph: newDecisionGraph });\n        listenerStore.getState().onChange?.(newDecisionGraph);\n      },\n    }),\n    [],\n  );\n\n  return (\n    <DecisionGraphStoreContext.Provider\n      value={{\n        stateStore,\n        referenceStore,\n        listenerStore,\n        actions,\n      }}\n    >\n      {children}\n    </DecisionGraphStoreContext.Provider>\n  );\n};\n\nexport function useDecisionGraphState<T>(\n  selector: (state: DecisionGraphStoreType['state']) => T,\n  equals: (a: any, b: any) => boolean = equal,\n): T {\n  return React.useContext(DecisionGraphStoreContext).stateStore(selector, equals);\n}\n\nexport function useDecisionGraphListeners<T>(\n  selector: (state: DecisionGraphStoreType['listeners']) => T,\n  equals: (a: any, b: any) => boolean = equal,\n): T {\n  return React.useContext(DecisionGraphStoreContext).listenerStore(selector, equals);\n}\n\nexport function useDecisionGraphReferences<T>(\n  selector: (state: DecisionGraphStoreType['references']) => T,\n  equals: (a: any, b: any) => boolean = equal,\n): T {\n  return React.useContext(DecisionGraphStoreContext).referenceStore(selector, equals);\n}\n\nexport function useDecisionGraphActions(): DecisionGraphStoreType['actions'] {\n  return React.useContext(DecisionGraphStoreContext).actions;\n}\n\nexport function useDecisionGraphRaw() {\n  return React.useContext(DecisionGraphStoreContext);\n}\n\nexport const useNodeDiff = (id: string) => {\n  const { diff, contentDiff } = useDecisionGraphState((s) => {\n    const node = (s?.decisionGraph?.nodes ?? []).find((node) => node.id === id);\n\n    return {\n      diff: node?._diff,\n      contentDiff: node?.content?._diff,\n    };\n  });\n  return {\n    diff,\n    contentDiff,\n  };\n};\n\nexport const useEdgeDiff = (id: string) => {\n  const { diff } = useDecisionGraphState((s) => {\n    const edge = (s?.decisionGraph?.edges ?? []).find((edge) => edge.id === id);\n\n    return {\n      diff: edge?._diff,\n    };\n  });\n  return {\n    diff,\n  };\n};\n\nexport default DecisionGraphProvider;\n","import equal from 'fast-deep-equal/es6/react';\nimport type React from 'react';\nimport { useEffect, useRef } from 'react';\nimport { useDebouncedCallback } from 'use-debounce';\n\nimport type { SchemaSelectProps } from '../../../src/helpers/components';\nimport {\n  type DecisionGraphStoreType,\n  useDecisionGraphActions,\n  useDecisionGraphRaw,\n  useDecisionGraphState,\n} from './context/dg-store.context';\nimport { type DecisionGraphType } from './dg-types';\n\nexport type DecisionGraphEmptyType = {\n  id?: string;\n  defaultValue?: DecisionGraphType;\n  value?: DecisionGraphType;\n\n  disabled?: boolean;\n  configurable?: boolean;\n\n  components?: DecisionGraphStoreType['state']['components'];\n  customNodes?: DecisionGraphStoreType['state']['customNodes'];\n\n  name?: DecisionGraphStoreType['state']['name'];\n\n  defaultActivePanel?: string;\n  panels?: DecisionGraphStoreType['state']['panels'];\n  onPanelsChange?: DecisionGraphStoreType['listeners']['onPanelsChange'];\n\n  inputsSchema?: SchemaSelectProps[];\n  outputsSchema?: SchemaSelectProps[];\n\n  simulate?: DecisionGraphStoreType['state']['simulate'];\n\n  onChange?: DecisionGraphStoreType['listeners']['onChange'];\n  onReactFlowInit?: DecisionGraphStoreType['listeners']['onReactFlowInit'];\n\n  onCodeExtension?: DecisionGraphStoreType['listeners']['onCodeExtension'];\n  onFunctionReady?: DecisionGraphStoreType['listeners']['onFunctionReady'];\n};\n\nexport const DecisionGraphEmpty: React.FC<DecisionGraphEmptyType> = ({\n  id,\n  defaultValue,\n  value,\n  name,\n  disabled = false,\n  configurable = true,\n  onChange,\n  components,\n  customNodes,\n  defaultActivePanel,\n  panels,\n  simulate,\n  inputsSchema,\n  outputsSchema,\n  onPanelsChange,\n  onReactFlowInit,\n  onCodeExtension,\n  onFunctionReady,\n}) => {\n  const mountedRef = useRef(false);\n  const graphActions = useDecisionGraphActions();\n  const { stateStore, listenerStore } = useDecisionGraphRaw();\n  const { decisionGraph } = useDecisionGraphState(({ decisionGraph }) => ({\n    decisionGraph,\n  }));\n\n  const innerChange = useDebouncedCallback((graph: DecisionGraphType) => {\n    onChange?.(graph);\n  }, 100);\n\n  useEffect(() => {\n    stateStore.setState({\n      id,\n      disabled,\n      configurable,\n      components: Array.isArray(components) ? components : [],\n      customNodes: Array.isArray(customNodes) ? customNodes : [],\n      panels,\n    });\n  }, [id, disabled, configurable, components, customNodes, panels]);\n\n  useEffect(() => {\n    stateStore.setState({ name: name ?? 'graph.json' });\n  }, [name]);\n\n  useEffect(() => {\n    stateStore.setState({\n      inputsSchema,\n      outputsSchema\n    });\n  }, [inputsSchema, outputsSchema]);\n\n  useEffect(() => {\n    stateStore.setState({ simulate });\n  }, [simulate]);\n\n  useEffect(() => {\n    listenerStore.setState({\n      onReactFlowInit,\n      onPanelsChange,\n      onCodeExtension,\n      onFunctionReady,\n    });\n  }, [onReactFlowInit, onPanelsChange, onCodeExtension, onFunctionReady]);\n\n  useEffect(() => {\n    listenerStore.setState({ onChange: innerChange });\n  }, [innerChange]);\n\n  useEffect(() => {\n    if (mountedRef.current && value !== undefined && !equal(value, decisionGraph)) {\n      graphActions.setDecisionGraph(value);\n    }\n  }, [value]);\n\n  useEffect(() => {\n    if (value !== undefined) {\n      graphActions.setDecisionGraph(value);\n    } else if (defaultValue !== undefined) {\n      graphActions.setDecisionGraph(defaultValue);\n    }\n\n    stateStore.setState({\n      activePanel: defaultActivePanel,\n    });\n    mountedRef.current = true;\n  }, []);\n\n  return null;\n};\n","import equal from 'fast-deep-equal/es6/react';\nimport { type Edge, type Node, getIncomers, getOutgoers } from 'reactflow';\n\nimport type { DecisionGraphType, DecisionNode } from '../components';\nimport { mapToGraphEdges, mapToGraphNodes } from '../components/decision-graph/dg-util';\n\ntype GraphWalkerCache = {\n  digest: ReturnType<typeof decisionGraphPathDigest>;\n  iterator: CachedGraphIterator;\n};\n\nexport const createGraphWalker = () => {\n  let cache: GraphWalkerCache | null = null;\n\n  return {\n    walk: function* (decisionGraph: DecisionGraphType): Generator<WalkGraphReturn> {\n      const digest = decisionGraphPathDigest(decisionGraph);\n      if (cache && equal(digest, cache.digest)) {\n        yield* walkCachedGraph(decisionGraph, cache.iterator);\n        return;\n      }\n\n      const iterator = [];\n      for (const res of walkGraph(decisionGraph)) {\n        iterator.push({ id: res.node.id, incomers: res.incomers.map((n) => n.id) });\n        yield res;\n      }\n\n      cache = { digest, iterator };\n    },\n  };\n};\n\nexport type GraphWalker = ReturnType<typeof createGraphWalker>;\n\nconst decisionGraphPathDigest = (graph: DecisionGraphType) => {\n  const nodes = graph.nodes.map((n) => n.id);\n  const edges = graph.edges;\n\n  return { nodes, edges };\n};\n\ntype WalkGraphReturn = {\n  node: DecisionNode;\n  incomers: DecisionNode[];\n};\n\nfunction* walkGraph(decisionGraph: DecisionGraphType): Generator<WalkGraphReturn> {\n  const nodes = mapToGraphNodes(decisionGraph.nodes);\n  const edges = mapToGraphEdges(decisionGraph.edges);\n\n  const begin = decisionGraph.nodes.find((n) => n.type === 'inputNode');\n  const beginRf = nodes.find((n) => n.id === begin?.id);\n  if (!begin || !beginRf) {\n    return;\n  }\n\n  // TODO: Perf - Skip recalculating has cycle, or find a nicer way to check (as it's blocked on graph level)\n  if (hasCycle(beginRf, nodes, edges)) {\n    return;\n  }\n\n  yield { node: begin, incomers: [] };\n  const visited = new Set<string>();\n\n  visited.add(begin.id);\n\n  const stack = getOutgoers(beginRf, nodes, edges);\n  while (stack.length > 0) {\n    const current = stack.pop()!;\n    if (visited.has(current.id)) {\n      continue;\n    }\n\n    const incomers = getIncomers(current, nodes, edges);\n    const unvisitedIncomers = incomers.filter((incomer) => !visited.has(incomer.id));\n\n    if (unvisitedIncomers.length > 0) {\n      stack.push(current, ...unvisitedIncomers);\n      continue;\n    }\n\n    visited.add(current.id);\n    const decisionNode = decisionGraph.nodes.find((n) => n.id === current.id);\n    if (decisionNode) {\n      const mappedIncomers = decisionGraph.nodes.filter((n) => incomers.some((inc) => inc.id === n.id));\n      yield { node: decisionNode, incomers: mappedIncomers };\n    }\n\n    const outgoers = getOutgoers(current, nodes, edges);\n    stack.push(...outgoers);\n  }\n}\n\ntype CachedGraphIterator = Array<{ id: string; incomers: string[] }>;\n\nfunction* walkCachedGraph(decisionGraph: DecisionGraphType, path: CachedGraphIterator): Generator<WalkGraphReturn> {\n  for (const part of path) {\n    const node = decisionGraph.nodes.find((n) => n.id === part.id);\n    if (!node) {\n      continue;\n    }\n\n    const incomers = decisionGraph.nodes.filter((n) => part.incomers.includes(n.id));\n    yield { node, incomers };\n  }\n}\n\nconst hasCycle = (begin: Node, nodes: Node[], edges: Edge[]): boolean => {\n  const visited = new Set<string>();\n  const recursionStack = new Set<string>();\n\n  const dfs = (node: Node): boolean => {\n    visited.add(node.id);\n    recursionStack.add(node.id);\n\n    const outgoers = getOutgoers(node, nodes, edges);\n    for (const outgoer of outgoers) {\n      if (!visited.has(outgoer.id)) {\n        if (dfs(outgoer)) {\n          return true;\n        }\n      } else if (recursionStack.has(outgoer.id)) {\n        return true;\n      }\n    }\n\n    recursionStack.delete(node.id);\n    return false;\n  };\n\n  return dfs(begin);\n};\n","import { decisionTableSpecification } from './decision-table.specification';\nimport { expressionSpecification } from './expression.specification';\nimport { functionSpecification } from './function.specification';\nimport { inputSpecification } from './input.specification';\nimport { outputSpecification } from './output.specification';\nimport type { NodeSpecification } from './specification-types';\nimport { NodeKind } from './specification-types';\nimport { switchSpecification } from './switch.specification';\n\nfunction makeNodeSpecification<T extends Record<NodeKind, V>, V extends NodeSpecification>(o: T): Readonly<T> {\n  return o;\n}\n\nexport const nodeSpecification = makeNodeSpecification({\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  [NodeKind.Input]: inputSpecification,\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  [NodeKind.Output]: outputSpecification,\n  [NodeKind.DecisionTable]: decisionTableSpecification,\n  [NodeKind.Expression]: expressionSpecification,\n  [NodeKind.Function]: functionSpecification,\n  [NodeKind.Switch]: switchSpecification,\n});\n","import { VariableType } from '@gorules/zen-engine-wasm';\nimport equal from 'fast-deep-equal/es6/react';\nimport { produce } from 'immer';\nimport { useEffect } from 'react';\nimport { P, match } from 'ts-pattern';\n\nimport type { GraphWalker } from '../../helpers/traversal';\nimport { createGraphWalker } from '../../helpers/traversal';\nimport { isWasmAvailable } from '../../helpers/wasm';\nimport type { DecisionGraphStoreType } from './context/dg-store.context';\nimport { NodeTypeKind, useDecisionGraphRaw } from './context/dg-store.context';\nimport type { NodeKind } from './nodes/specifications/specification-types';\nimport { nodeSpecification } from './nodes/specifications/specifications';\n\nexport const DecisionGraphInferTypes = () => {\n  const { stateStore } = useDecisionGraphRaw();\n\n  // Set variable types based on trace\n  useEffect(() => {\n    if (!isWasmAvailable()) {\n      return;\n    }\n\n    return stateStore.subscribe(({ simulate, nodeTypes, decisionGraph }, prevState) => {\n      if (equal(simulate, prevState?.simulate)) {\n        return;\n      }\n\n      const trace = match(simulate)\n        .with({ result: P.nonNullable }, ({ result }) => result.trace)\n        .otherwise(() => null);\n      if (trace === null) {\n        const newNodeTypes = produce(nodeTypes, (draft) => {\n          Object.values(draft).forEach((nt) => {\n            delete nt[NodeTypeKind.Input];\n            delete nt[NodeTypeKind.Output];\n          });\n        });\n\n        stateStore.setState({ nodeTypes: newNodeTypes });\n        return;\n      }\n\n      const traceValues = Object.values(trace);\n      if (traceValues.length === 0) {\n        return;\n      }\n\n      const newNodeTypes = produce(nodeTypes, (draft) => {\n        traceValues.forEach((t) => {\n          const node = decisionGraph.nodes.find((n) => n.id === t.id);\n          if (node?.type === 'inputNode') {\n            return;\n          }\n\n          draft[t.id] ??= {};\n\n          draft[t.id][NodeTypeKind.Output] = new VariableType(t.output ?? {});\n          draft[t.id][NodeTypeKind.Input] = new VariableType(t.input ?? {});\n        });\n      });\n\n      stateStore.setState({ nodeTypes: newNodeTypes });\n    });\n  }, []);\n\n  // Infer types for nodes\n  useEffect(() => {\n    if (!isWasmAvailable()) {\n      return;\n    }\n\n    const graphWalker = createGraphWalker();\n    return stateStore.subscribe((state, prevState) => {\n      const stateDigest = inferTypesStateDigest(state);\n      const prevStateDigest = inferTypesStateDigest(prevState);\n      const needUpdate = inferTypesNeedsUpdate(state, prevState);\n      if (equal(stateDigest, prevStateDigest) && !needUpdate) {\n        return;\n      }\n\n      const infer = inferNodeTypes(state, prevState, graphWalker);\n      if (infer.isModified) {\n        stateStore.setState({ nodeTypes: infer.nodeTypes });\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!isWasmAvailable()) {\n      return;\n    }\n\n    return stateStore.subscribe((state, prevState) => {\n      const stateDigest = globalTypesStateDigest(state);\n      const prevStateDigest = globalTypesStateDigest(prevState);\n      if (equal(stateDigest, prevStateDigest)) {\n        return;\n      }\n\n      const $nodesType = VariableType.fromJson({ Object: {} });\n      state.decisionGraph.nodes.forEach((node) => {\n        const nodeType = state.nodeTypes[node.id];\n        const nodeOutput =\n          nodeType?.[NodeTypeKind.Output] ??\n          nodeType?.[NodeTypeKind.InferredOutput] ??\n          VariableType.fromJson({ Object: {} });\n\n        $nodesType.set(node.name, nodeOutput);\n      });\n\n      stateStore.setState({ globalType: { $nodes: $nodesType } });\n    });\n  }, []);\n\n  return null;\n};\n\ntype NodeTypes = DecisionGraphStoreType['state']['nodeTypes'];\n\ntype InferNodeTypes = (\n  state: DecisionGraphStoreType['state'],\n  prevState: DecisionGraphStoreType['state'],\n  graphWalker: GraphWalker,\n) => { nodeTypes: NodeTypes; isModified: boolean };\n\nconst inferNodeTypes: InferNodeTypes = ({ decisionGraph, nodeTypes, customNodes }, prevState, graphWalker) => {\n  let isModified = false;\n  const newNodeTypes = produce(nodeTypes, (draft) => {\n    graphWalker.walk(decisionGraph).forEach(({ node, incomers }) => {\n      if (node.type === 'inputNode') {\n        return;\n      }\n\n      const incomerTypes = incomers\n        .map((inc) => {\n          const type = draft[inc.id] ?? {};\n          return type[NodeTypeKind.Output] ?? type[NodeTypeKind.InferredOutput];\n        })\n        .filter((t) => !!t)\n        .map((t) => t.clone());\n      const inferredInputType = match(incomerTypes.length)\n        .with(1, () => incomerTypes[0])\n        .otherwise(() => VariableType.fromIncoming(incomerTypes));\n\n      const currentInputType = draft?.[node.id]?.[NodeTypeKind.InferredInput];\n      // Mutation block\n      if (!currentInputType?.equal(inferredInputType)) {\n        isModified = true;\n        draft[node.id] ??= {};\n        draft[node.id][NodeTypeKind.InferredInput] = inferredInputType;\n      }\n\n      const inferTypes =\n        nodeSpecification[node.type as NodeKind]?.inferTypes ??\n        customNodes.find((n) => n.kind === node.type)?.inferTypes;\n      if (!inferTypes) {\n        return;\n      }\n\n      const input =\n        draft?.[node.id]?.[NodeTypeKind.Input] ??\n        draft?.[node.id]?.[NodeTypeKind.InferredInput] ??\n        VariableType.fromJson('Any');\n\n      const prevInput =\n        prevState.nodeTypes?.[node.id]?.[NodeTypeKind.Input] ??\n        prevState.nodeTypes?.[node.id]?.[NodeTypeKind.InferredInput] ??\n        VariableType.fromJson('Any');\n\n      const prevContent = prevState.decisionGraph.nodes.find((n) => n.id === node.id)?.content;\n      const needsUpdate = inferTypes.needsUpdate(node.content, prevContent) || !input.equal(prevInput);\n      if (!needsUpdate && draft?.[node.id]?.[NodeTypeKind.InferredOutput]) {\n        return;\n      }\n\n      const inferredOutputType = inferTypes.determineOutputType({ input, content: node.content });\n      const currentOutputType = draft?.[node.id]?.[NodeTypeKind.InferredOutput];\n      // Mutation block\n      if (!currentOutputType?.equal(inferredOutputType)) {\n        isModified = true;\n        draft[node.id] ??= {};\n        draft[node.id][NodeTypeKind.InferredOutput] = inferredOutputType;\n      }\n    });\n  });\n\n  return {\n    isModified,\n    nodeTypes: newNodeTypes,\n  };\n};\n\nconst inferTypesStateDigest = ({ decisionGraph, nodeTypes, customNodes }: DecisionGraphStoreType['state']) => {\n  const edgesData = decisionGraph.edges;\n  const nodesData = decisionGraph.nodes.map(({ id, type }) => ({ id, type }));\n  const customNodesData = customNodes.map((cn) => cn.kind);\n\n  const typesData = Object.entries(nodeTypes).map(([id, value]) => ({\n    id,\n    input: variableTypeHash(value[NodeTypeKind.Input]),\n    output: variableTypeHash(value[NodeTypeKind.Output]),\n  }));\n\n  const inputNodeId = decisionGraph.nodes.find((n) => n.type === 'inputNode')?.id;\n  const inputNodeType = match(nodeTypes?.[inputNodeId ?? '']?.[NodeTypeKind.InferredOutput])\n    .with(P.nonNullable, (type) => type.hash())\n    .otherwise(() => null);\n\n  return { edgesData, nodesData, typesData, customNodesData, inputNodeType };\n};\n\nconst inferTypesNeedsUpdate = (\n  { decisionGraph, customNodes }: DecisionGraphStoreType['state'],\n  prevState: DecisionGraphStoreType['state'],\n) => {\n  const nodesNeedUpdate = decisionGraph.nodes.map((node) => {\n    const inferTypes =\n      nodeSpecification[node.type as NodeKind]?.inferTypes ?? customNodes.find((n) => n.kind === node.type)?.inferTypes;\n\n    if (!inferTypes) {\n      return false;\n    }\n\n    const prevNode = prevState.decisionGraph.nodes.find((n) => n.id === node.id);\n    if (!prevNode) {\n      return true;\n    }\n\n    return inferTypes.needsUpdate(node.content, prevNode.content);\n  });\n\n  return nodesNeedUpdate.some((up) => up);\n};\n\ndeclare module '@gorules/zen-engine-wasm' {\n  interface VariableType {\n    __hash: string;\n  }\n}\n\nconst variableTypeHash = (vt?: VariableType): string | undefined => {\n  if (!vt) {\n    return undefined;\n  }\n\n  if (vt.__hash) {\n    return vt.__hash;\n  }\n\n  vt.__hash = vt.hash();\n  return vt.__hash;\n};\n\nconst globalTypesStateDigest = (state: DecisionGraphStoreType['state']) => {\n  const nodeInfo = state.decisionGraph.nodes.map((node) => {\n    const nodeType = state.nodeTypes[node.id];\n    const typ = nodeType?.[NodeTypeKind.Output] ?? nodeType?.[NodeTypeKind.InferredOutput];\n    return {\n      id: node.id,\n      type: variableTypeHash(typ),\n      name: node.name,\n    };\n  });\n\n  return { nodeInfo };\n};\n","import { CloseOutlined } from '@ant-design/icons';\nimport { Button, Tooltip, Typography } from 'antd';\nimport { Resizable } from 're-resizable';\nimport React, { useMemo } from 'react';\n\nimport { useDecisionGraphActions, useDecisionGraphState } from './context/dg-store.context';\n\nconst heightKey = 'jdmEditor:graphPanel:height';\n\nexport const GraphPanel: React.FC = () => {\n  const graphActions = useDecisionGraphActions();\n  const { panels, activePanel: activePanelId } = useDecisionGraphState(({ panels, activePanel }) => ({\n    panels,\n    activePanel,\n  }));\n\n  const activePanel = useMemo(() => {\n    return activePanelId === undefined ? undefined : (panels || []).find((panel) => panel.id === activePanelId);\n  }, [activePanelId, panels]);\n\n  const defaultHeight = useMemo(() => {\n    return Number.parseFloat(localStorage.getItem(heightKey) ?? '') ?? 300;\n  }, [activePanel]);\n\n  if (!activePanel) return null;\n\n  return (\n    <Resizable\n      className={'grl-dg__panel'}\n      defaultSize={{ height: defaultHeight }}\n      handleStyles={{\n        bottom: { display: 'none' },\n        left: { display: 'none' },\n        topLeft: { display: 'none' },\n        topRight: { display: 'none' },\n        right: { display: 'none' },\n        bottomLeft: { display: 'none' },\n        bottomRight: { display: 'none' },\n      }}\n      maxHeight={500}\n      minHeight={150}\n      onResize={(event, direction, elementRef) => {\n        localStorage.setItem(heightKey, elementRef.clientHeight.toString());\n      }}\n    >\n      {!activePanel.hideHeader && (\n        <div className={'grl-dg__panel__toolbar'}>\n          <div className={'grl-dg__panel__toolbar__content'}>\n            <Typography.Text style={{ fontSize: 13 }}>{activePanel.title}</Typography.Text>\n          </div>\n          <div className={'grl-dg__panel__toolbar__actions'}>\n            <Tooltip placement='topLeft' title={'Close panel'}>\n              <Button\n                size={'small'}\n                type={'text'}\n                icon={<CloseOutlined style={{ fontSize: 12 }} />}\n                onClick={() => graphActions.setActivePanel(undefined)}\n              />\n            </Tooltip>\n          </div>\n        </div>\n      )}\n      <div className={'grl-dg__panel__content'}>{activePanel?.renderPanel?.({})}</div>\n    </Resizable>\n  );\n};\n","import { DeleteOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport clsx from 'clsx';\nimport React from 'react';\nimport type { EdgeProps } from 'reactflow';\nimport { BaseEdge, EdgeLabelRenderer, getBezierPath } from 'reactflow';\nimport { match } from 'ts-pattern';\n\nimport { useDecisionGraphActions, useDecisionGraphState, useEdgeDiff } from './context/dg-store.context';\n\nexport const CustomEdge: React.FC<EdgeProps> = (props) => {\n  const graphActions = useDecisionGraphActions();\n  const { id, sourceX, sourceY, targetX, targetY, sourcePosition, targetPosition, style = {}, markerEnd } = props;\n  const { isHovered, disabled } = useDecisionGraphState(({ hoveredEdgeId, disabled }) => ({\n    isHovered: hoveredEdgeId === id,\n    disabled,\n  }));\n\n  const { diff } = useEdgeDiff(id);\n\n  const [edgePath, labelX, labelY] = getBezierPath({\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetX,\n    targetY,\n    targetPosition,\n  });\n\n  return (\n    <>\n      <BaseEdge\n        path={edgePath}\n        markerEnd={markerEnd}\n        style={{\n          ...(style || {}),\n          stroke: match(diff)\n            .with({ status: 'added' }, () => 'var(--grl-color-success)')\n            .with({ status: 'removed' }, () => 'var(--grl-color-error)')\n            .otherwise(() => undefined),\n        }}\n      />\n      <EdgeLabelRenderer>\n        <div\n          className={'nodrag nopan edge-renderer'}\n          style={{\n            transform: `translate(-50%, -50%) translate(${labelX}px,${labelY}px)`,\n          }}\n        >\n          {!disabled && (\n            <Button\n              type='primary'\n              shape='round'\n              icon={<DeleteOutlined />}\n              danger\n              className={clsx('grl-edge-delete-button')}\n              data-visible={isHovered}\n              onClick={() => graphActions.removeEdges([id])}\n            />\n          )}\n        </div>\n      </EdgeLabelRenderer>\n    </>\n  );\n};\n\nexport const edgeFunction = (outer: any) => (props: any) => <CustomEdge {...props} {...outer} />;\n","import { message } from 'antd';\nimport { type RefObject, useCallback, useMemo } from 'react';\nimport type { Node, ReactFlowInstance, XYPosition } from 'reactflow';\n\nimport { copyToClipboard, pasteFromClipboard } from '../../../helpers/utility';\nimport { useDecisionGraphActions, useDecisionGraphRaw } from '../context/dg-store.context';\nimport { type DecisionEdge, type DecisionNode } from '../dg-types';\n\ntype ClipboardData = {\n  nodes: DecisionNode[];\n  edges?: DecisionEdge[];\n};\n\nconst isClipboardData = (data: any): data is ClipboardData => {\n  if (typeof data !== 'object') return false;\n  return Array.isArray(data?.nodes);\n};\n\nexport const useGraphClipboard = (\n  reactFlow: RefObject<ReactFlowInstance | null>,\n  wrapper: RefObject<HTMLDivElement | null>,\n) => {\n  const raw = useDecisionGraphRaw();\n  const graphActions = useDecisionGraphActions();\n\n  const copyNodes = useCallback(\n    async (nodes: Node[]) => {\n      try {\n        if (!reactFlow.current) {\n          return;\n        }\n\n        const copyNodes = (raw.stateStore.getState()?.decisionGraph?.nodes || []).filter((n) =>\n          nodes.some((node) => node.id === n.id),\n        );\n\n        const copyNodeIds = copyNodes.map((n) => n.id);\n        const copyEdges: DecisionEdge[] = [];\n\n        if (copyNodes.length > 0) {\n          const edges = reactFlow.current.getEdges();\n          edges.forEach((edge) => {\n            if (copyNodeIds.includes(edge.source) && copyNodeIds.includes(edge.target)) {\n              copyEdges.push({\n                id: edge.id,\n                type: edge.type,\n                sourceId: edge.source,\n                targetId: edge.target,\n                sourceHandle: edge.sourceHandle ?? undefined,\n                targetHandle: edge.targetHandle ?? undefined,\n              });\n            }\n          });\n        }\n\n        const clipboardData: ClipboardData = {\n          nodes: copyNodes,\n          edges: copyEdges,\n        };\n\n        await copyToClipboard(JSON.stringify(clipboardData));\n        message.success('Copied to clipboard!');\n      } catch (e: any) {\n        message.error(e.message);\n      }\n    },\n    [raw],\n  );\n\n  const pasteNodes = useCallback(async () => {\n    try {\n      if (!reactFlow?.current) {\n        return;\n      }\n\n      const clipboardText = await pasteFromClipboard();\n      if (!clipboardText) {\n        return;\n      }\n      const clipboardData = JSON.parse(clipboardText);\n\n      if (!isClipboardData(clipboardData)) {\n        throw new Error('invalid clipboard');\n      }\n\n      const nodeIds: Record<string, string> = clipboardData.nodes.reduce(\n        (acc, curr) => ({\n          ...acc,\n          [curr.id]: crypto.randomUUID(),\n        }),\n        {},\n      );\n\n      const copyNodeIds = Object.keys(nodeIds);\n      const anchor = reactFlow.current.getNodes().find((n) => copyNodeIds.includes(n.id));\n      const copyAnchor = clipboardData.nodes.find((n) => n.id === anchor?.id);\n      const gravityCenter = {\n        x: clipboardData.nodes.reduce((acc, n) => acc + n.position.x, 0) / clipboardData.nodes.length,\n        y: clipboardData.nodes.reduce((acc, n) => acc + n.position.y, 0) / clipboardData.nodes.length,\n      } as XYPosition;\n\n      const nodes = clipboardData.nodes.map((n: DecisionNode) => {\n        const position: XYPosition = {\n          x: n?.position?.x || 0,\n          y: n?.position?.y || 0,\n        };\n\n        if (anchor && copyAnchor) {\n          const isAnchor = n.id === anchor.id;\n\n          if (isAnchor) {\n            position.x = anchor.position.x;\n            position.y = anchor.position.y - 20;\n          } else {\n            position.x = anchor.position.x - copyAnchor.position.x + n.position.x;\n            position.y = anchor.position.y - copyAnchor.position.y + n.position.y - 20;\n          }\n        } else if (wrapper.current) {\n          const rect = wrapper.current.getBoundingClientRect();\n          const rectCenter = {\n            x: rect.width / 2,\n            y: rect.height / 2,\n          };\n\n          const projection = reactFlow.current!.project(rectCenter);\n\n          position.x = n.position.x + projection.x - gravityCenter.x / 2;\n          position.y = n.position.y + projection.y - gravityCenter.y / 2;\n        }\n\n        return {\n          ...n,\n          position,\n          id: nodeIds[n.id],\n        };\n      });\n\n      const edges = (clipboardData.edges || []).map<DecisionEdge>((e) => ({\n        id: crypto.randomUUID(),\n        type: e.type,\n        sourceId: nodeIds[e.sourceId],\n        targetId: nodeIds[e.targetId],\n        sourceHandle: e.sourceHandle ?? undefined,\n        targetHandle: e.targetHandle ?? undefined,\n      }));\n\n      graphActions.addNodes(nodes);\n      graphActions.addEdges(edges);\n      message.success('Pasted from clipboard!');\n\n      if (anchor) {\n        try {\n          await copyToClipboard(JSON.stringify({ nodes }));\n        } catch {\n          //\n        }\n      }\n    } catch {\n      message.error('Failed to paste from clipboard');\n    }\n  }, [reactFlow, wrapper]);\n\n  return useMemo(\n    () => ({\n      copyNodes,\n      pasteNodes,\n    }),\n    [copyNodes, pasteNodes],\n  );\n};\n","import { Input } from 'antd';\nimport clsx from 'clsx';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport type { XYPosition } from 'reactflow';\nimport { match } from 'ts-pattern';\n\nimport { useDecisionGraphState } from '../context/dg-store.context';\nimport { DecisionNode } from '../nodes/decision-node';\nimport { NodeKind, type NodeSpecification } from '../nodes/specifications/specification-types';\nimport { nodeSpecification } from '../nodes/specifications/specifications';\n\nexport type GraphComponentsProps = {\n  inputDisabled?: boolean;\n  components?: React.ReactNode[];\n  disabled?: boolean;\n};\n\nexport const GraphComponents: React.FC<GraphComponentsProps> = React.memo(({ inputDisabled, disabled }) => {\n  const customComponents = useDecisionGraphState((store) => store.components || []);\n  const customNodes = useDecisionGraphState((store) => store.customNodes || []);\n\n  const [search, setSearch] = useState('');\n\n  const onDragStart = useCallback((event: React.DragEvent, nodeType: string, component?: string) => {\n    const target = event.target as HTMLDivElement;\n    if (!target) {\n      return;\n    }\n\n    const { offsetX, offsetY } = event.nativeEvent;\n    const { height, width } = target.getBoundingClientRect();\n\n    const positionData: XYPosition = {\n      x: offsetX / width,\n      y: offsetY / height,\n    };\n\n    event.dataTransfer.effectAllowed = 'move';\n    event.dataTransfer.setData('application/reactflow', nodeType);\n    event.dataTransfer.setData('relativePosition', JSON.stringify(positionData));\n    if (component) {\n      event.dataTransfer.setData('customNodeComponent', component);\n    }\n  }, []);\n\n  const innerGroups = useMemo<Record<string, NodeSpecification[]>>(() => {\n    const baseNodeSpecification = { ...nodeSpecification };\n    // override base types with extended properties if they exist\n    const extendedComponents = customComponents.filter((component) => {\n      const isRecognizedType = Object.values(NodeKind).includes(component.type as NodeKind);\n      if (isRecognizedType) {\n        baseNodeSpecification[component.type as NodeKind] = {\n          ...nodeSpecification[component.type as NodeKind] as NodeSpecification,\n          ...component,\n        };\n      }\n      return !isRecognizedType;\n    });\n    const initialGroups: Record<string, NodeSpecification[]> = {\n      core: Object.values(baseNodeSpecification),\n    };\n    if (customComponents?.length > 0) {\n      initialGroups.extended = extendedComponents;\n    }\n\n    (customNodes || []).forEach((node) => {\n      const group = node.group?.trim?.() || '';\n      if (group.length > 0) {\n        if (initialGroups?.[group]) {\n          initialGroups[group].push({ ...node, type: 'customNode' });\n        } else {\n          initialGroups[group] = [{ ...node, type: 'customNode' }];\n        }\n      }\n    });\n\n    (customNodes || []).forEach((node) => {\n      if (!node?.group) {\n        if (initialGroups?.['custom']) {\n          initialGroups['custom'].push({ ...node, type: 'customNode' });\n        } else {\n          initialGroups['custom'] = [{ ...node, type: 'customNode' }];\n        }\n      }\n    });\n\n    return initialGroups;\n  }, [customComponents, customNodes]);\n\n  const groups = useMemo<Record<string, NodeSpecification[]>>(() => {\n    return Object.keys(innerGroups).reduce((acc, key) => {\n      return {\n        ...acc,\n        [key]: (innerGroups[key] || []).filter(\n          (el) =>\n            !(search?.trim?.().length > 0) ||\n            (el.type || '').toLowerCase().indexOf(search.toLowerCase()) > -1 ||\n            ((el.displayName || '') as string).toLowerCase().indexOf(search.toLowerCase()) > -1 ||\n            (el.shortDescription || '').toLowerCase().indexOf(search.toLowerCase()) > -1 ||\n            (el.group || '').toLowerCase().indexOf(search.toLowerCase()) > -1,\n        ),\n      };\n    }, {});\n  }, [innerGroups, search]);\n\n  const customCount = customComponents.length + customNodes.length;\n\n  return (\n    <div>\n      {customCount > 5 && (\n        <Input\n          placeholder={'Search components...'}\n          value={search}\n          onChange={(e) => setSearch(e.target.value || '')}\n          allowClear\n          className={'grl-dg__aside__menu__components__search'}\n        />\n      )}\n      <div className={'grl-dg__aside__menu__components'}>\n        {Object.keys(groups).map((group) => {\n          return match(group)\n            .with(\n              'core',\n              () =>\n                groups['core']?.length > 0 && (\n                  <React.Fragment key={group}>\n                    {(groups['core'] || []).map((node) => (\n                      <React.Fragment key={'kind' in node ? (node.kind as string) : node.type}>\n                        <DragDecisionNode\n                          disabled={match(node.type)\n                            .with(NodeKind.Input, () => disabled || inputDisabled)\n                            .otherwise(() => disabled)}\n                          specification={node}\n                          onDragStart={(event) =>\n                            nodeSpecification[node.type as NodeKind] !== undefined\n                              ? onDragStart(event, node.type)\n                              : onDragStart(event, 'customNode', 'kind' in node ? (node.kind as string) : '')\n                          }\n                        />\n                      </React.Fragment>\n                    ))}\n                  </React.Fragment>\n                ),\n            )\n            .otherwise(\n              (group) =>\n                groups[group]?.length > 0 && (\n                  <React.Fragment key={group}>\n                    {(groups?.[group] || []).map((customNode) => (\n                      <DragDecisionNode\n                        key={'kind' in customNode ? (customNode.kind as string) : customNode.type}\n                        disabled={disabled}\n                        specification={customNode}\n                        onDragStart={(event) =>\n                          group === 'extended'\n                            ? onDragStart(event, customNode.type)\n                            : onDragStart(event, 'customNode', 'kind' in customNode ? (customNode.kind as string) : '')\n                        }\n                      />\n                    ))}\n                  </React.Fragment>\n                ),\n            );\n        })}\n      </div>\n    </div>\n  );\n});\n\nconst DragDecisionNode: React.FC<\n  {\n    specification: Pick<NodeSpecification, 'color' | 'icon' | 'displayName' | 'shortDescription'>;\n    disabled?: boolean;\n  } & React.HTMLAttributes<HTMLDivElement>\n> = ({ specification, disabled = false, ...props }) => {\n  return (\n    <div className={clsx('draggable-component')} draggable={!disabled} {...props}>\n      <div style={{ pointerEvents: 'none' }}>\n        <DecisionNode\n          listMode\n          compactMode\n          color={specification.color}\n          icon={specification.icon}\n          name={specification.displayName as string}\n          type={specification.shortDescription}\n        />\n      </div>\n    </div>\n  );\n};\n","import { CloseOutlined, CompressOutlined, LeftOutlined, WarningOutlined } from '@ant-design/icons';\nimport { Button, Modal, Tooltip, Typography, message } from 'antd';\nimport clsx from 'clsx';\nimport equal from 'fast-deep-equal';\nimport React, { type MutableRefObject, forwardRef, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport type { Connection, Node, ProOptions, ReactFlowInstance, XYPosition } from 'reactflow';\nimport ReactFlow, {\n  Background,\n  ControlButton,\n  Controls,\n  SelectionMode,\n  getOutgoers,\n  useEdgesState,\n  useNodesState,\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { P, match } from 'ts-pattern';\n\nimport { nodeSchema } from '../../../helpers/schema';\nimport {\n  type DecisionGraphStoreType,\n  type ExposedStore,\n  useDecisionGraphActions,\n  useDecisionGraphListeners,\n  useDecisionGraphRaw,\n  useDecisionGraphReferences,\n  useDecisionGraphState,\n} from '../context/dg-store.context';\nimport { edgeFunction } from '../custom-edge';\nimport { type DecisionNode } from '../dg-types';\nimport { mapToDecisionEdge } from '../dg-util';\nimport '../dg.scss';\nimport { useGraphClipboard } from '../hooks/use-graph-clipboard';\nimport type { CustomNodeSpecification } from '../nodes/custom-node';\nimport { GraphNode } from '../nodes/graph-node';\nimport type { MinimalNodeProps } from '../nodes/specifications/specification-types';\nimport { NodeKind } from '../nodes/specifications/specification-types';\nimport { nodeSpecification } from '../nodes/specifications/specifications';\nimport { GraphComponents } from './graph-components';\n\nexport type GraphProps = {\n  className?: string;\n  onDisableTabs?: (val: boolean) => void;\n  reactFlowProOptions?: ProOptions;\n};\n\nexport type GraphRef = DecisionGraphStoreType['actions'] & {\n  stateStore: ExposedStore<DecisionGraphStoreType['state']>;\n};\n\nconst defaultNodeTypes = Object.entries(nodeSpecification).reduce(\n  (acc, [key, value]) => ({\n    ...acc,\n    [key]: React.memo(\n      (props: MinimalNodeProps) => value.renderNode({ specification: value, ...props }),\n      (prevProps, nextProps) => {\n        return (\n          prevProps.id === nextProps.id &&\n          prevProps.selected === nextProps.selected &&\n          equal(prevProps.data, nextProps.data)\n        );\n      },\n    ),\n  }),\n  {},\n);\n\nconst edgeTypes = {\n  edge: React.memo(edgeFunction(null)),\n};\n\nexport const Graph = forwardRef<GraphRef, GraphProps>(function GraphInner({ reactFlowProOptions, className }, ref) {\n  const reactFlowWrapper = useRef<HTMLDivElement>(null);\n  const reactFlowInstance = useRef<ReactFlowInstance>(null);\n\n  const nodesState = useNodesState([]);\n  const edgesState = useEdgesState([]);\n\n  const [componentsOpened, setComponentsOpened] = useState(true);\n\n  const raw = useDecisionGraphRaw();\n  const graphActions = useDecisionGraphActions();\n  const graphReferences = useDecisionGraphReferences((s) => s);\n  const { onReactFlowInit } = useDecisionGraphListeners(({ onReactFlowInit }) => ({ onReactFlowInit }));\n  const { disabled, hasInputNode, components, customNodes } = useDecisionGraphState(\n    ({ disabled, components, customNodes, decisionGraph }) => ({\n      disabled,\n      components,\n      customNodes,\n      hasInputNode: (decisionGraph?.nodes || []).some((n) => n.type === NodeKind.Input),\n    }),\n  );\n\n  graphReferences.nodesState.current = nodesState;\n  graphReferences.edgesState.current = edgesState;\n  graphReferences.graphClipboard.current = useGraphClipboard(reactFlowInstance, reactFlowWrapper);\n  graphReferences.reactFlowInstance.current = reactFlowInstance.current;\n\n  const customNodeRenderer = useMemo(() => {\n    return React.memo(\n      (props: MinimalNodeProps) => {\n        const node = customNodes.find((node) => node.kind === props?.data?.kind) as CustomNodeSpecification<\n          object,\n          string\n        >;\n\n        if (!node) {\n          console.warn('node not found', props, customNodes);\n          return (\n            <GraphNode\n              id={props.id}\n              specification={{\n                displayName: `${props.data?.kind}`,\n                color: 'var(--grl-color-error)',\n                icon: <WarningOutlined />,\n              }}\n              name={props?.data?.name}\n              isSelected={props.selected}\n              displayError\n              noBodyPadding\n              handleLeft={true}\n              handleRight={true}\n            />\n          );\n        }\n\n        return node.renderNode({\n          specification: node,\n          ...props,\n        });\n      },\n      (prevProps, nextProps) => {\n        return (\n          prevProps.id === nextProps.id &&\n          prevProps.selected === nextProps.selected &&\n          equal(prevProps.data, nextProps.data)\n        );\n      },\n    );\n  }, [customNodes]);\n\n  const nodeTypes = useMemo<Record<string, React.FC<any>>>(() => {\n    return components.reduce(\n      (acc, component) => ({\n        ...acc,\n        [component.type]: React.memo(\n          (props: MinimalNodeProps) => component.renderNode({ specification: component, ...props }),\n          (prevProps, nextProps) => {\n            return (\n              prevProps.id === nextProps.id &&\n              prevProps.selected === nextProps.selected &&\n              equal(prevProps.data, nextProps.data)\n            );\n          },\n        ),\n      }),\n      { ...defaultNodeTypes, customNode: customNodeRenderer },\n    );\n  }, [components, customNodeRenderer]);\n\n  const addNodeInner = async (type: string, position?: XYPosition, component?: string) => {\n    if (!reactFlowWrapper.current || !reactFlowInstance.current) {\n      return;\n    }\n\n    if (!position) {\n      const rect = reactFlowWrapper.current.getBoundingClientRect();\n      const rectCenter = {\n        x: rect.width / 2,\n        y: rect.height / 2,\n      };\n\n      position = reactFlowInstance.current.project(rectCenter);\n    }\n\n    const customSpecification = match(type)\n      .with('customNode', () => customNodes.find((node) => node.kind === component))\n      .otherwise(() => {\n        const allSpecifications = [...Object.values(nodeSpecification), ...components];\n        return allSpecifications.find((s) => s.type === type);\n      });\n    if (!customSpecification) {\n      message.error(`Unknown node type ${type} - ${component}.`);\n      return;\n    }\n\n    let newNode: DecisionNode | null = match(customSpecification)\n      .with({ kind: P.string }, (specification) => {\n        const existingCount =\n          (reactFlowInstance.current?.getNodes() || []).filter((n) => n.data?.kind === specification.kind).length + 1;\n\n        const partialNode = specification.generateNode({ index: existingCount });\n        return {\n          id: crypto.randomUUID(),\n          type: 'customNode',\n          name: partialNode.name,\n          position: position as XYPosition,\n          content: {\n            kind: specification.kind,\n            config: partialNode?.config,\n          },\n        } satisfies DecisionNode;\n      })\n      .with({ type: P.string }, (specification) => {\n        const existingCount =\n          (reactFlowInstance.current?.getNodes() || []).filter((n) => n.type === specification.type).length + 1;\n        const partialNode = specification.generateNode({ index: existingCount });\n\n        return {\n          id: crypto.randomUUID(),\n          type: specification.type,\n          position: position as XYPosition,\n          ...partialNode,\n        } satisfies DecisionNode;\n      })\n      .otherwise(() => null);\n    if (!newNode) {\n      message.error(`Unknown node type ${type} - ${component}.`);\n      return;\n    }\n\n    if (customSpecification.onNodeAdd) {\n      try {\n        newNode = (await customSpecification.onNodeAdd(newNode as any)) as any;\n      } catch {\n        return;\n      }\n    }\n\n    const parsed = nodeSchema.safeParse(newNode);\n    if (parsed.success) {\n      return graphActions.addNodes([nodeSchema.parse(newNode)]);\n    }\n    message.error(parsed.error?.message);\n  };\n\n  const isValidConnection = (connection: Connection): boolean => {\n    // Disallow self-reference\n    if (connection.source === connection.target) {\n      return false;\n    }\n\n    if (disabled) {\n      return false;\n    }\n\n    const [nodes] = nodesState;\n    const [edges] = edgesState;\n\n    const hasDuplicate = edges.some(\n      (edge) =>\n        edge.source === connection.source &&\n        edge.target === connection.target &&\n        (edge.sourceHandle ?? null) === (connection.sourceHandle ?? null) &&\n        (edge.targetHandle ?? null) === (connection.targetHandle ?? null),\n    );\n\n    const target = nodes.find((node) => node.id === connection.target);\n    if (!target || target.id === connection.source) {\n      return false;\n    }\n\n    const hasCycle = (node: Node, visited = new Set()) => {\n      if (visited.has(node.id)) {\n        return false;\n      }\n\n      visited.add(node.id);\n\n      for (const outgoer of getOutgoers(node, nodes, edges)) {\n        if (outgoer.id === connection.source) return true;\n        if (hasCycle(outgoer, visited)) return true;\n      }\n    };\n\n    return !hasDuplicate && !hasCycle(target);\n  };\n\n  const onDrop = (event: React.DragEvent) => {\n    event.preventDefault();\n    event.stopPropagation();\n    if (!reactFlowWrapper.current || !reactFlowInstance.current) {\n      return;\n    }\n\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n    const type = event.dataTransfer.getData('application/reactflow');\n    let elementPosition: XYPosition;\n\n    try {\n      elementPosition = JSON.parse(event.dataTransfer.getData('relativePosition'));\n    } catch {\n      return;\n    }\n    const position = reactFlowInstance.current.project({\n      x: event.clientX - reactFlowBounds.left,\n      y: event.clientY - reactFlowBounds.top,\n    }) as XYPosition;\n\n    position.x -= Math.round((elementPosition.x * 226) / 10) * 10;\n    position.y -= Math.round((elementPosition.y * 60) / 10) * 10;\n\n    const component = match(event.dataTransfer.getData('customNodeComponent'))\n      .with(P.string, (c) => c)\n      .otherwise(() => undefined);\n\n    addNodeInner(type, position, component);\n  };\n\n  const onDragOver = (event: any) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  };\n\n  const onConnect = (params: any) => {\n    const edge = {\n      ...params,\n      type: 'edge',\n      id: crypto.randomUUID(),\n    };\n\n    if (disabled) return;\n    graphActions.addEdges([mapToDecisionEdge(edge)]);\n  };\n\n  useImperativeHandle(ref, () => ({\n    ...graphActions,\n    stateStore: raw.stateStore,\n  }));\n\n  return (\n    <div\n      className={clsx(['tab-content', className])}\n      tabIndex={0}\n      onKeyDown={(e) => {\n        if (e.key === 'v' && e.metaKey && !disabled) {\n          graphActions.pasteNodes();\n        }\n      }}\n    >\n      <div\n        style={{\n          width: '100%',\n          height: '100%',\n          position: 'relative',\n          display: 'flex',\n        }}\n      >\n        {!disabled && !componentsOpened && (\n          <div\n            className={'grl-dg__components__floating'}\n            style={{\n              position: 'absolute',\n              top: 8,\n              right: 8,\n              zIndex: 1,\n            }}\n          >\n            <Tooltip placement='right' title='Components'>\n              <Button icon={<LeftOutlined style={{ fontSize: 12 }} />} onClick={() => setComponentsOpened(true)} />\n            </Tooltip>\n          </div>\n        )}\n        <div\n          tabIndex={0}\n          className={'content-wrapper'}\n          onKeyDown={(e) => {\n            const [nodes] = nodesState;\n            const [edges] = edgesState;\n\n            if (e.key === 'c' && e.metaKey) {\n              const selectedNodeIds = nodesState[0].filter((n) => n.selected).map(({ id }) => id);\n              if (selectedNodeIds.length === 0) {\n                return;\n              }\n\n              graphActions.copyNodes(selectedNodeIds);\n              e.preventDefault();\n            } else if (e.key === 'd' && e.metaKey) {\n              if (!disabled) {\n                const selectedNodeIds = nodes.filter((n) => n.selected).map(({ id }) => id);\n                if (selectedNodeIds.length === 0) {\n                  return;\n                }\n\n                graphActions.duplicateNodes(selectedNodeIds);\n              }\n              e.preventDefault();\n            } else if (e.key === 'Backspace') {\n              if (!disabled) {\n                const selectedNodes = nodes.filter((n) => n.selected);\n                const selectedEdges = edges.filter((e) => e.selected);\n\n                if (selectedNodes.length > 0) {\n                  const length = selectedNodes.length;\n                  const text = length > 1 ? 'nodes' : 'node';\n                  Modal.confirm({\n                    icon: null,\n                    title: `Delete ${text}`,\n                    content: (\n                      <Typography.Text>\n                        Are you sure you want to delete {length > 1 ? `${length} ${text}` : text}?\n                      </Typography.Text>\n                    ),\n                    okButtonProps: { danger: true },\n                    onOk: () => {\n                      if (selectedEdges.length > 0) {\n                        graphActions.removeEdges(selectedEdges.map((e) => e.id));\n                      }\n                      graphActions.removeNodes(selectedNodes.map((n) => n.id));\n                    },\n                  });\n                } else if (selectedEdges.length > 0) {\n                  graphActions.removeEdges(selectedEdges.map((e) => e.id));\n                }\n              }\n              e.stopPropagation();\n              e.preventDefault();\n            }\n          }}\n        >\n          <div className={clsx(['react-flow'])} ref={reactFlowWrapper}>\n            <ReactFlow\n              deleteKeyCode={null}\n              elevateEdgesOnSelect={false}\n              elevateNodesOnSelect={true}\n              zoomOnDoubleClick={false}\n              connectionRadius={35}\n              nodes={nodesState[0]}\n              edges={edgesState[0]}\n              onInit={(instance) => {\n                (reactFlowInstance as MutableRefObject<ReactFlowInstance>).current = instance;\n                onReactFlowInit?.(instance);\n              }}\n              snapToGrid={true}\n              snapGrid={[5, 5]}\n              minZoom={0.25}\n              selectionMode={SelectionMode.Partial}\n              nodeTypes={nodeTypes}\n              edgeTypes={edgeTypes}\n              onDrop={onDrop}\n              onDragOver={onDragOver}\n              onConnect={onConnect}\n              isValidConnection={isValidConnection}\n              proOptions={reactFlowProOptions}\n              nodesConnectable={!disabled}\n              nodesDraggable={!disabled}\n              edgesUpdatable={!disabled}\n              onNodesChange={graphActions.handleNodesChange}\n              onEdgesChange={graphActions.handleEdgesChange}\n              onNodesDelete={(e) => {\n                e.forEach((node) => {\n                  graphActions.closeTab(node?.id);\n                });\n              }}\n              onEdgeMouseEnter={(_, edge) => graphActions.setHoveredEdgeId(edge.id)}\n              onEdgeMouseLeave={() => graphActions.setHoveredEdgeId(null)}\n            >\n              <Controls showInteractive={false}>\n                <ControlButton onClick={() => graphActions.toggleCompactMode()}>\n                  <CompressOutlined />\n                </ControlButton>\n              </Controls>\n              <Background color='var(--grl-color-border)' gap={20} />\n            </ReactFlow>\n          </div>\n        </div>\n        {!disabled && componentsOpened && (\n          <div className={'grl-dg__aside__menu'}>\n            <>\n              <div className={'grl-dg__aside__menu__heading'}>\n                <div className={'grl-dg__aside__menu__heading__text'}>\n                  <Typography.Text strong style={{ marginBottom: 0 }}>\n                    Components\n                  </Typography.Text>{' '}\n                  <Typography.Text type='secondary' style={{ fontSize: 10, marginLeft: 5 }}>\n                    (Drag-and-drop)\n                  </Typography.Text>\n                </div>\n                <Button\n                  type={'text'}\n                  size='small'\n                  icon={<CloseOutlined style={{ fontSize: 12 }} />}\n                  onClick={() => setComponentsOpened(false)}\n                />\n              </div>\n              <div className={'grl-dg__aside__menu__content'}>\n                <GraphComponents inputDisabled={hasInputNode} disabled={disabled} />\n              </div>\n            </>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n});\n","export const saveFile = (filename: string, contents: Blob) => {\n  const element = document.createElement('a');\n  element.download = filename;\n  element.href = URL.createObjectURL(contents);\n  element.style.display = 'none';\n  document.body.appendChild(element);\n\n  element.click();\n\n  element.remove();\n};\n","import { message } from 'antd';\nimport { P, match } from 'ts-pattern';\n\nimport type { DecisionNode, DecisionTableType } from '../components';\nimport { NodeKind } from '../components/decision-graph/nodes/specifications/specification-types';\nimport type { TableSchemaItem } from '../components/decision-table/context/dt-store.context';\nimport { parseDecisionTable } from '../components/decision-table/context/dt-store.context';\nimport { saveFile } from './file-helpers';\n\ntype DecisionTableNode = {\n  id: string;\n  name: string;\n} & DecisionTableType;\n\nexport const exportExcelFile = async (fileName: string, decisionTableNodes: DecisionTableNode[]) => {\n  const ExcelJS = await import('exceljs');\n  const workbook = new ExcelJS.Workbook();\n\n  decisionTableNodes.forEach((decisionTableNode) => {\n    let worksheetName: string = decisionTableNode.name;\n    let worksheetNameIndex = 0;\n\n    if (workbook.getWorksheet(worksheetName)) {\n      do {\n        worksheetNameIndex++;\n        worksheetName = `${decisionTableNode.name} (${worksheetNameIndex})`;\n      } while (workbook.getWorksheet(worksheetName));\n    }\n\n    const worksheet = workbook.addWorksheet(worksheetName);\n\n    const schemaMeta = [\n      ...decisionTableNode.inputs.map((input: any) => ({\n        title: input.name,\n        meta: { id: input.id, name: input.field, type: 'input' },\n      })),\n      ...decisionTableNode.outputs.map((output: any) => ({\n        title: output.name,\n        meta: { id: output.id, name: output.field, type: 'output' },\n      })),\n      { title: 'DESCRIPTION', meta: null },\n      { title: 'Rule ID', meta: null },\n    ];\n\n    const schemaItems = [...decisionTableNode.inputs, ...decisionTableNode.outputs];\n    const rules = decisionTableNode.rules.map((record: any) => {\n      const newDataPoint: string[] = [];\n      schemaItems.forEach((schemaItem) => {\n        const val = record?.[schemaItem.id || ''];\n        const formattedVal = typeof val === 'object' && val !== null ? JSON.stringify(val) : val;\n        newDataPoint.push(formattedVal || '');\n      });\n      newDataPoint.push(record?.['_description'] || '');\n      newDataPoint.push(record?.['_id'] || '');\n      return newDataPoint;\n    });\n\n    const inputCellsLength = schemaMeta.filter((data) => data.meta?.type.toLowerCase() === 'input').length;\n    const outputCellsLength = schemaMeta.filter((data) => data.meta?.type.toLowerCase() === 'output').length;\n\n    // start row, start column, end row, end column\n    worksheet.mergeCells(1, 1, 1, inputCellsLength + outputCellsLength + 2);\n\n    const idCell = worksheet.getCell(1, 1);\n    idCell.value = decisionTableNode.id;\n    idCell.alignment = { horizontal: 'center', vertical: 'middle' };\n\n    worksheet.mergeCells(2, 1, 2, inputCellsLength);\n    const inputCell = worksheet.getCell(2, 1);\n    inputCell.value = 'Inputs';\n    inputCell.alignment = { horizontal: 'center', vertical: 'middle' };\n    inputCell.font = { bold: true, color: { argb: 'FFFFFF' } };\n    inputCell.fill = {\n      type: 'pattern',\n      pattern: 'solid',\n      fgColor: { argb: '5e6476' },\n    };\n\n    worksheet.mergeCells(2, inputCellsLength + 1, 2, inputCellsLength + outputCellsLength);\n    const outputCell = worksheet.getCell(2, inputCellsLength + 1);\n    outputCell.value = 'Outputs';\n    outputCell.alignment = { horizontal: 'center', vertical: 'middle' };\n    outputCell.font = { bold: true, color: { argb: 'FFFFFF' } };\n    outputCell.fill = {\n      type: 'pattern',\n      pattern: 'solid',\n      fgColor: { argb: '63546c' },\n    };\n\n    const descriptionCell = worksheet.getCell(2, inputCellsLength + outputCellsLength + 1);\n    descriptionCell.fill = {\n      type: 'pattern',\n      pattern: 'solid',\n      fgColor: { argb: '63546c' },\n    };\n\n    const ruleIdCell = worksheet.getCell(2, inputCellsLength + outputCellsLength + 2);\n    ruleIdCell.fill = {\n      type: 'pattern',\n      pattern: 'solid',\n      fgColor: { argb: '63546c' },\n    };\n\n    const headerRow = worksheet.addRow(schemaMeta.map((data) => data.title));\n    headerRow.eachCell((cell) => {\n      const note = schemaMeta.find((data) => data.title === cell.value)?.meta;\n      const cellColor = note?.type.toLowerCase() === 'input' ? '5e6476' : '63546c';\n\n      cell.font = { bold: true, color: { argb: 'FFFFFF' } };\n      cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: cellColor } };\n\n      if (note) {\n        cell.note = {\n          texts: [{ text: JSON.stringify(note, undefined, 2) }],\n        };\n      }\n    });\n\n    rules?.forEach((rule: any) => {\n      worksheet.addRow(Object.values(rule));\n    });\n\n    worksheet.columns.forEach((_, index) => {\n      let minLength = 15;\n      const column = worksheet.getColumn(index + 1);\n      column.eachCell({ includeEmpty: false }, (cell) => {\n        const cellLength = cell.value ? cell.value.toString().length : 0;\n        minLength = cellLength > minLength ? cellLength : minLength;\n\n        cell.border = {\n          top: { style: 'thin' },\n          left: { style: 'thin' },\n          bottom: { style: 'thin' },\n          right: { style: 'thin' },\n        };\n      });\n      column.width = minLength;\n    });\n\n    worksheet.views = [{ state: 'frozen', xSplit: 0, ySplit: 3 }];\n  });\n\n  const buffer = await workbook.xlsx.writeBuffer();\n  const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n  saveFile(`${fileName}.xlsx`, blob);\n};\n\nconst parseSpreadsheetData = (spreadSheetData: any) => {\n  const headers: any[] = spreadSheetData.splice(0, 3)[2];\n  const columnHeaders = headers.map((header) => {\n    if (header.value.toLowerCase() === 'description') {\n      return {\n        name: header.value,\n        id: '_description',\n      };\n    }\n\n    if (header.value.toLowerCase() === 'rule id') {\n      return {\n        name: header.value,\n        id: '_id',\n      };\n    }\n\n    let headerMeta = {\n      name: '',\n      type: '',\n      id: '',\n    };\n\n    try {\n      headerMeta = JSON.parse(header.note);\n    } catch {\n      message.error('Header note can not be parsed!');\n    }\n\n    return {\n      name: header.value,\n      field: headerMeta?.name,\n      _type: headerMeta?.type,\n      id: headerMeta?.id,\n      defaultValue: '',\n    };\n  });\n\n  const inputs = columnHeaders\n    .filter((column) => column._type?.toLowerCase() === 'input')\n    .map((column) => ({\n      id: column.id,\n      name: column?.name,\n      field: column?.field,\n      defaultValue: column?.defaultValue,\n    })) as TableSchemaItem[];\n\n  const outputs = columnHeaders\n    .filter((column) => column._type?.toLowerCase() === 'output')\n    .map((column) => ({\n      id: column.id,\n      name: column?.name,\n      field: column?.field,\n      defaultValue: column?.defaultValue,\n    })) as TableSchemaItem[];\n\n  const rules = spreadSheetData.map((data: any) => {\n    const dataPoint: Record<string, string> = {\n      _id: crypto.randomUUID(),\n    };\n\n    columnHeaders.forEach((col, index) => {\n      dataPoint[col.id] = match(data?.[index]?.value)\n        .with(P.string, (val) => val.trim())\n        .with(P.nullish, () => '')\n        .otherwise((val) => val.toString());\n    });\n\n    return dataPoint;\n  });\n\n  return parseDecisionTable({\n    inputs,\n    outputs,\n    rules,\n    hitPolicy: 'first',\n  });\n};\n\nexport const readFromExcel = async (buffer: ArrayBuffer) => {\n  const ExcelJS = await import('exceljs');\n  const excelWorkbook = new ExcelJS.Workbook();\n  const workbook = await excelWorkbook.xlsx.load(buffer);\n  const nodes: DecisionNode[] = [];\n\n  workbook.eachSheet((sheet) => {\n    const spreadsheetData: any[] = [];\n    const spreadsheetName = sheet.name;\n\n    sheet.eachRow((row) => {\n      const rowData: any[] = [];\n\n      for (let i = 1; i <= row.cellCount; i++) {\n        const cell = row.getCell(i);\n\n        const cellNote = cell.note\n          ? typeof cell.note === 'object'\n            ? cell.note.texts?.map((obj) => obj.text).join('')\n            : cell.note\n          : null;\n\n        rowData.push({ value: cell.value, note: cellNote });\n      }\n\n      spreadsheetData.push(rowData);\n    });\n    const nodeId: string = spreadsheetData[0][0].value;\n\n    nodes.push({\n      id: nodeId,\n      name: spreadsheetName,\n      type: NodeKind.DecisionTable,\n      content: parseSpreadsheetData(spreadsheetData),\n      position: { x: 0, y: 0 },\n    });\n  });\n\n  return nodes;\n};\n","import { CloudDownloadOutlined, CloudUploadOutlined } from '@ant-design/icons';\nimport type { MenuProps } from 'antd';\nimport { Button, Dropdown, Tooltip, message } from 'antd';\nimport React, { useRef } from 'react';\n\nimport { exportExcelFile, readFromExcel } from '../../../helpers/excel-file-utils';\nimport { decisionModelSchema } from '../../../helpers/schema';\nimport { useDecisionGraphActions, useDecisionGraphRaw, useDecisionGraphState } from '../context/dg-store.context';\nimport { type DecisionEdge, type DecisionNode } from '../dg-types';\nimport { NodeKind } from '../nodes/specifications/specification-types';\n\nconst DecisionContentType = 'application/vnd.gorules.decision';\n\nexport type GraphSideToolbarProps = {\n  //\n};\n\nexport const GraphSideToolbar: React.FC<GraphSideToolbarProps> = () => {\n  const decisionGraphRaw = useDecisionGraphRaw();\n  const fileInput = useRef<HTMLInputElement>(null);\n  const excelFileInput = useRef<HTMLInputElement>(null);\n\n  const { setDecisionGraph, setActivePanel } = useDecisionGraphActions();\n  const { disabled, panels, activePanel } = useDecisionGraphState(({ disabled, panels, activePanel }) => ({\n    disabled,\n    panels,\n    activePanel,\n  }));\n\n  const handleUploadInput = async (event: any) => {\n    const fileList = event?.target?.files as FileList;\n    const reader = new FileReader();\n    reader.onload = function (e) {\n      try {\n        const parsed: any = JSON.parse(e?.target?.result as string);\n        if (parsed?.contentType !== DecisionContentType) {\n          throw new Error('Invalid content type');\n        }\n\n        const nodes: DecisionNode[] = Array.isArray(parsed?.nodes) ? parsed.nodes : [];\n        const nodeIds = nodes.map((node) => node.id);\n\n        const edges: DecisionEdge[] = (parsed.edges as DecisionEdge[]).filter(\n          (edge) => nodeIds.includes(edge?.targetId) && nodeIds.includes(edge?.sourceId),\n        );\n\n        const modelParsed = decisionModelSchema.safeParse({\n          nodes,\n          edges,\n          settings: parsed?.settings,\n        });\n\n        if (!modelParsed.success) {\n          console.log(modelParsed.error?.message);\n          message.error(modelParsed.error?.message);\n          return;\n        }\n\n        setDecisionGraph(modelParsed.data);\n      } catch (e: any) {\n        message.error(e.message);\n      }\n    };\n\n    reader.readAsText(Array.from(fileList)?.[0], 'UTF-8');\n  };\n\n  const uploadJDMExcel = (event: any) => {\n    const file = event?.target?.files[0];\n    const fileReader = new FileReader();\n\n    try {\n      fileReader.readAsArrayBuffer(file);\n      fileReader.onload = async () => {\n        const buffer = fileReader.result as ArrayBuffer;\n\n        if (!buffer) return;\n\n        const nodesFromExcel = await readFromExcel(buffer);\n\n        const { decisionGraph } = decisionGraphRaw.stateStore.getState();\n        const updatedNodes = decisionGraph.nodes.map((node) => {\n          let _node = node;\n          // updating existing nodes\n          nodesFromExcel.forEach((excelNode) => {\n            if (excelNode.id === node.id) _node = { ...node, content: excelNode.content };\n          });\n\n          return _node;\n        });\n\n        // filtering new nodes and setting them proper position\n        const newNodes = nodesFromExcel\n          .filter((node) => !updatedNodes.some((existingNode) => existingNode.id === node.id))\n          .map((newNode, index) => ({ ...newNode, position: { x: index * 250, y: 0 } }));\n\n        const modelParsed = decisionModelSchema.safeParse({\n          nodes: [...updatedNodes, ...newNodes],\n          edges: decisionGraph.edges,\n          settings: decisionGraph.settings,\n        });\n\n        if (!modelParsed.success) {\n          console.log(modelParsed.error?.message);\n          message.error(modelParsed.error?.message);\n          return;\n        }\n\n        setDecisionGraph(modelParsed.data);\n        message.success('Excel file has been uploaded successfully!');\n      };\n    } catch {\n      message.error('Failed to upload Excel!');\n    }\n  };\n\n  const downloadJDM = async () => {\n    try {\n      const { name } = decisionGraphRaw.stateStore.getState();\n      const { decisionGraph } = decisionGraphRaw.stateStore.getState();\n      // create file in browser\n      const fileName = `${name.replaceAll('.json', '')}.json`;\n      const json = JSON.stringify(\n        {\n          contentType: DecisionContentType,\n          nodes: decisionGraph.nodes,\n          edges: decisionGraph.edges,\n          settings: decisionGraph.settings,\n        },\n        null,\n        2,\n      );\n      const blob = new Blob([json], { type: 'application/json' });\n      const href = URL.createObjectURL(blob);\n\n      // create \"a\" HTLM element with href to file\n      const link = window.document.createElement('a');\n      link.href = href;\n      link.download = fileName;\n      window.document.body.appendChild(link);\n      link.click();\n\n      // clean up \"a\" element & remove ObjectURL\n      window.document.body.removeChild(link);\n      URL.revokeObjectURL(href);\n    } catch (e: any) {\n      message.error(e.message);\n    }\n  };\n\n  const downloadJDMExcel = async (name: string = 'decision tables') => {\n    try {\n      const { decisionGraph } = decisionGraphRaw.stateStore.getState();\n      const decisionTableNodes = decisionGraph.nodes\n        .filter((node) => node.type === NodeKind.DecisionTable)\n        .map((decisionTable) => ({\n          ...decisionTable.content,\n          id: decisionTable.id,\n          name: decisionTable.name,\n        }));\n\n      await exportExcelFile(name, decisionTableNodes);\n      message.success('Excel file has been downloaded successfully!');\n    } catch {\n      message.error('Failed to download Excel file!');\n    }\n  };\n\n  const uploadItems: MenuProps['items'] = [\n    {\n      key: 'upload-json',\n      label: 'Upload JSON',\n      onClick: () => fileInput?.current?.click?.(),\n    },\n    {\n      key: 'upload-excel',\n      label: 'Upload Excel',\n      onClick: () => excelFileInput?.current?.click?.(),\n    },\n  ];\n\n  const downloadItems: MenuProps['items'] = [\n    {\n      key: 'download-json',\n      label: 'Download JSON',\n      onClick: () => downloadJDM(),\n    },\n    {\n      key: 'download-excel',\n      label: 'Download Excel',\n      onClick: () => downloadJDMExcel(),\n    },\n  ];\n\n  return (\n    <div className={'grl-dg__aside'}>\n      <input\n        hidden\n        accept='application/json'\n        type='file'\n        ref={fileInput}\n        onChange={handleUploadInput}\n        onClick={(event) => {\n          (event.target as any).value = null;\n        }}\n      />\n      <input\n        hidden\n        accept='.xlsx'\n        type='file'\n        ref={excelFileInput}\n        onChange={uploadJDMExcel}\n        onClick={(event) => {\n          (event.target as any).value = null;\n        }}\n      />\n      <div className={'grl-dg__aside__side-bar'}>\n        <div className={'grl-dg__aside__side-bar__top'}>\n          {!disabled && (\n            <Dropdown menu={{ items: uploadItems }} placement='bottomRight' trigger={['click']} arrow>\n              <Button type={'text'} disabled={disabled} icon={<CloudUploadOutlined />} />\n            </Dropdown>\n          )}\n          <Dropdown menu={{ items: downloadItems }} placement='bottomRight' trigger={['click']} arrow>\n            <Button type={'text'} icon={<CloudDownloadOutlined />} />\n          </Dropdown>\n        </div>\n        <div className={'grl-dg__aside__side-bar__bottom'}>\n          {(panels || []).map((panel) => {\n            const isActive = activePanel === panel.id;\n            return (\n              <Tooltip\n                key={panel.id}\n                title={`${!isActive ? 'Open' : 'Close'} ${panel.title.toLowerCase()} panel`}\n                placement={'right'}\n              >\n                <Button\n                  key={panel.id}\n                  type='text'\n                  icon={panel.icon}\n                  style={{ background: isActive ? 'rgba(0, 0, 0, 0.1)' : undefined }}\n                  onClick={() => {\n                    if (panel?.onClick) return panel.onClick();\n                    if (panel?.renderPanel) setActivePanel(isActive ? undefined : panel.id);\n                  }}\n                />\n              </Tooltip>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { CloseOutlined, DeploymentUnitOutlined } from '@ant-design/icons';\nimport type { TabsProps } from 'antd';\nimport { Avatar, Button, Dropdown, Tabs } from 'antd';\nimport clsx from 'clsx';\nimport React from 'react';\n\nimport { DiffIcon } from '../../diff-icon';\nimport { useDecisionGraphActions, useDecisionGraphState } from '../context/dg-store.context';\nimport type { DiffStatus } from '../dg-types';\nimport { NodeColor } from '../nodes/specifications/colors';\nimport type { NodeKind } from '../nodes/specifications/specification-types';\nimport { nodeSpecification } from '../nodes/specifications/specifications';\n\nexport type GraphTabsProps = {\n  disabled?: boolean;\n  tabBarExtraContent?: TabsProps['tabBarExtraContent'];\n};\n\ntype NonUndefined<T> = T extends undefined ? never : T;\ntype TabItem = NonUndefined<TabsProps['items']>[number];\n\nexport const GraphTabs: React.FC<GraphTabsProps> = ({ disabled, tabBarExtraContent }) => {\n  const graphActions = useDecisionGraphActions();\n  const { openNodes, activeNodeId } = useDecisionGraphState(({ decisionGraph, activeTab, openTabs }) => ({\n    activeNodeId: (decisionGraph?.nodes ?? []).find((node) => node.id === activeTab)?.id,\n    openNodes: (openTabs || [])\n      .map((tab) => {\n        const node = (decisionGraph?.nodes ?? []).find((node) => node.id === tab);\n        if (!node) return undefined;\n        return {\n          id: node?.id,\n          name: node.name,\n          type: node.type,\n          diff: node?._diff,\n        };\n      })\n      .filter((node) => !!node),\n  }));\n\n  return (\n    <div>\n      <Tabs\n        type='line'\n        size='small'\n        className={clsx('grl-graph-tabs')}\n        activeKey={activeNodeId || 'graph'}\n        onChange={(val) => graphActions.openTab(val)}\n        tabBarExtraContent={tabBarExtraContent}\n        items={[\n          {\n            closable: false,\n            key: 'graph',\n            label: (\n              <TabLabel\n                total={openNodes?.length}\n                icon={<DeploymentUnitOutlined />}\n                name='Graph'\n                active={!activeNodeId || activeNodeId === 'graph'}\n                onContextClick={(action) => {\n                  graphActions.closeTab('graph', action);\n                }}\n              />\n            ),\n          },\n          ...openNodes.map((node, index) => {\n            const specification = nodeSpecification[node.type as NodeKind];\n\n            return {\n              disabled,\n              key: node.id,\n              label: (\n                <TabLabel\n                  onContextClick={(action) => {\n                    graphActions.closeTab(node.id, action);\n                  }}\n                  icon={specification?.icon}\n                  name={node?.name ?? node?.type}\n                  diffStatus={node?.diff?.status}\n                  color={specification?.color}\n                  index={index}\n                  active={node.id === activeNodeId}\n                  total={openNodes?.length}\n                  onClose={() => graphActions.closeTab(node.id)}\n                />\n              ),\n              closable: true,\n            } satisfies TabItem;\n          }),\n        ]}\n      />\n    </div>\n  );\n};\n\nconst TabLabel: React.FC<{\n  index?: number;\n  total?: number;\n  icon?: React.ReactNode;\n  name?: string;\n  color?: string;\n  diffStatus?: string;\n  onClose?: () => void;\n  active?: boolean;\n  onContextClick?: (action: string) => void;\n}> = ({ total = 0, index = -1, icon, name, active, diffStatus, color = NodeColor.Blue, onClose, onContextClick }) => {\n  const items = [\n    total > 0 &&\n      index !== -1 && {\n        key: 'close',\n        label: 'Close',\n        onClick: () => onContextClick?.('close'),\n      },\n    total > 0 &&\n      index !== -1 && {\n        key: 'close-all',\n        label: 'Close all Tabs',\n        onClick: () => onContextClick?.('close-all'),\n      },\n    total > 0 &&\n      index !== -1 && {\n        key: 'close-other',\n        label: 'Close other Tabs',\n        onClick: () => onContextClick?.('close-other'),\n      },\n    total > 0 &&\n      index + 1 < total && {\n        key: 'close-right',\n        label: 'Close Tabs to the right',\n        onClick: () => onContextClick?.('close-right'),\n      },\n    total > 0 &&\n      index > 0 &&\n      index > 0 && {\n        key: 'close-left',\n        label: 'Close Tabs to the left',\n        onClick: () => onContextClick?.('close-left'),\n      },\n  ].filter((item) => !!item);\n\n  return (\n    <Dropdown menu={{ items }} trigger={['contextMenu']}>\n      <div className='grl-graph-tabs__tab' data-active={active}>\n        {/*<span style={{ color: 'black' }}>{icon}</span>*/}\n        <Avatar\n          size='small'\n          shape='square'\n          style={{\n            background: color,\n            fontSize: 11,\n            width: 18,\n            height: 18,\n            lineHeight: '18px',\n            borderRadius: 3,\n          }}\n          icon={icon}\n        />\n        {name}\n        <DiffIcon\n          status={diffStatus as DiffStatus}\n          style={{\n            fontSize: 16,\n          }}\n        />\n        {onClose && (\n          <Button\n            className='grl-graph-tabs__closeIcon'\n            type='text'\n            size='small'\n            style={{ height: 20, width: 20, color: 'black', borderRadius: '50%', lineHeight: 0 }}\n            icon={<CloseOutlined style={{ fontSize: 10 }} />}\n            onClick={(e) => {\n              e.stopPropagation();\n              onClose?.();\n            }}\n          />\n        )}\n      </div>\n    </Dropdown>\n  );\n};\n","import clsx from 'clsx';\nimport { createDragDropManager } from 'dnd-core';\nimport React, { forwardRef, useMemo, useRef, useState } from 'react';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport type { ProOptions } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { match } from 'ts-pattern';\n\nimport { useDecisionGraphState } from './context/dg-store.context';\nimport { GraphPanel } from './dg-panel';\nimport './dg.scss';\nimport type { GraphRef } from './graph/graph';\nimport { Graph } from './graph/graph';\nimport { GraphSideToolbar } from './graph/graph-side-toolbar';\nimport type { GraphTabsProps } from './graph/graph-tabs';\nimport { GraphTabs } from './graph/graph-tabs';\nimport { decisionTableSpecification } from './nodes/specifications/decision-table.specification';\nimport { expressionSpecification } from './nodes/specifications/expression.specification';\nimport { functionSpecification } from './nodes/specifications/function.specification';\nimport { inputSpecification } from './nodes/specifications/input.specification';\nimport { outputSpecification } from './nodes/specifications/output.specification';\nimport { NodeKind } from './nodes/specifications/specification-types';\n\nexport type DecisionGraphWrapperProps = {\n  reactFlowProOptions?: ProOptions;\n  tabBarExtraContent?: GraphTabsProps['tabBarExtraContent'];\n};\n\nexport const DecisionGraphWrapper = React.memo(\n  forwardRef<GraphRef, DecisionGraphWrapperProps>(function DecisionGraphWrapperInner(\n    { reactFlowProOptions, tabBarExtraContent },\n    ref,\n  ) {\n    const [disableTabs, setDisableTabs] = useState(false);\n    const hasActiveNode = useDecisionGraphState(({ decisionGraph, activeTab }) => {\n      return (decisionGraph?.nodes ?? []).some((node) => node.id === activeTab);\n    });\n\n    return (\n      <>\n        <GraphSideToolbar />\n        <div className={'grl-dg__graph'}>\n          <GraphTabs disabled={disableTabs} tabBarExtraContent={tabBarExtraContent} />\n          <Graph\n            ref={ref}\n            className={clsx([!hasActiveNode && 'active'])}\n            reactFlowProOptions={reactFlowProOptions}\n            onDisableTabs={setDisableTabs}\n          />\n          <TabContents />\n        </div>\n        <GraphPanel />\n      </>\n    );\n  }),\n);\n\nconst TabContents: React.FC = React.memo(() => {\n  const { openNodes, activeNodeId, components } = useDecisionGraphState(\n    ({ decisionGraph, openTabs, activeTab, components }) => {\n      const activeNodeId = (decisionGraph?.nodes ?? []).find((node) => node.id === activeTab)?.id;\n      const openNodes = (decisionGraph?.nodes ?? []).filter((node) => openTabs.includes(node.id));\n\n      return {\n        openNodes: openNodes.map(({ id, type }) => ({ id, type })),\n        activeNodeId,\n        components,\n      };\n    },\n  );\n\n  const containerRef = useRef<HTMLDivElement>(null);\n  const dndManager = useMemo(() => {\n    return createDragDropManager(HTML5Backend, undefined, {\n      rootElement: containerRef.current,\n    });\n  }, [containerRef.current]);\n\n  return (\n    <div style={{ display: 'contents' }} ref={containerRef}>\n      {openNodes.map((node) => (\n        <div key={node?.id} className={clsx(['tab-content', activeNodeId === node?.id && 'active'])}>\n          {match(node?.type)\n            .with(NodeKind.DecisionTable, () =>\n              decisionTableSpecification?.renderTab?.({ id: node?.id, manager: dndManager }),\n            )\n            .with(NodeKind.Function, () => functionSpecification?.renderTab?.({ id: node?.id, manager: dndManager }))\n            .with(NodeKind.Expression, () =>\n              expressionSpecification?.renderTab?.({ id: node?.id, manager: dndManager }),\n            )\n            .with(NodeKind.Input, () => inputSpecification?.renderTab?.({ id: node?.id, manager: dndManager }))\n            .with(NodeKind.Output, () => outputSpecification?.renderTab?.({ id: node?.id, manager: dndManager }))\n\n            .otherwise(() => {\n              const component = components.find((cmp) => cmp.type === node.type);\n              if (component) {\n                return component?.renderTab?.({ id: node.id, manager: dndManager });\n              }\n\n              return null;\n            })}\n        </div>\n      ))}\n    </div>\n  );\n});\n","import type { DragDropManager } from 'dnd-core';\nimport React, { forwardRef } from 'react';\nimport { ReactFlowProvider } from 'reactflow';\n\nimport type { DecisionGraphContextProps } from './context/dg-store.context';\nimport { DecisionGraphProvider } from './context/dg-store.context';\nimport type { DecisionGraphEmptyType } from './dg-empty';\nimport { DecisionGraphEmpty } from './dg-empty';\nimport { DecisionGraphInferTypes } from './dg-infer';\nimport type { DecisionGraphWrapperProps } from './dg-wrapper';\nimport { DecisionGraphWrapper } from './dg-wrapper';\nimport './dg.scss';\nimport type { GraphRef } from './graph/graph';\n\nexport type DecisionGraphProps = {\n  manager?: DragDropManager;\n} & DecisionGraphWrapperProps &\n  DecisionGraphContextProps &\n  DecisionGraphEmptyType;\n\nexport type DecisionGraphRef = GraphRef;\n\nexport const DecisionGraph = forwardRef<DecisionGraphRef, DecisionGraphProps>(\n  ({ manager: _, reactFlowProOptions, tabBarExtraContent, ...props }, ref) => {\n    return (\n      <div className={'grl-dg'}>\n        <ReactFlowProvider>\n          <DecisionGraphProvider>\n            <DecisionGraphWrapper\n              ref={ref}\n              reactFlowProOptions={reactFlowProOptions}\n              tabBarExtraContent={tabBarExtraContent}\n            />\n            <DecisionGraphInferTypes />\n            <DecisionGraphEmpty {...props} />\n          </DecisionGraphProvider>\n        </ReactFlowProvider>\n      </div>\n    );\n  },\n);\n","import { DownOutlined } from '@ant-design/icons';\nimport { type VariableType } from '@gorules/zen-engine-wasm';\nimport { Button, Checkbox, Form, Typography, theme } from 'antd';\nimport type { DragDropManager } from 'dnd-core';\nimport React, { useState } from 'react';\nimport type { Position } from 'reactflow';\nimport { match } from 'ts-pattern';\n\nimport { CodeEditor } from '../../../code-editor';\nimport { useDecisionGraphActions, useDecisionGraphState } from '../../context/dg-store.context';\nimport { type DecisionNode } from '../../dg-types';\nimport { GraphNode } from '../graph-node';\nimport type { InferTypeData, MinimalNodeProps, MinimalNodeSpecification } from '../specifications/specification-types';\n\ntype CustomDecisionNode<T> = {\n  id: string;\n  name: string;\n  description?: string;\n  type?: string;\n  content?: T;\n  position: Position;\n};\n\ntype GenerateNodeParams = {\n  index: number;\n};\n\nexport type CustomNodeSpecification<Data extends object, Component extends string> = {\n  kind: Component;\n  color?: string;\n  icon?: React.ReactNode;\n  displayName: string;\n  group?: string;\n  documentationUrl?: string;\n  shortDescription?: string;\n  renderTab?: (props: { id: string; manager?: DragDropManager }) => React.ReactNode;\n  calculateDiff?: (current: any, previous: any) => [any, any];\n  generateNode: (params: GenerateNodeParams) => Omit<DecisionNode, 'position' | 'id' | 'type' | 'content'> & {\n    config?: Data;\n  };\n  renderNode: React.FC<MinimalNodeProps & { specification: MinimalNodeSpecification }>;\n\n  inferTypes?: {\n    needsUpdate: (state: InferTypeData<Data>, prevState: InferTypeData<Data>) => boolean;\n    determineOutputType: (state: InferTypeData<Data>) => VariableType;\n  };\n\n  onNodeAdd?: (node: CustomDecisionNode<{ kind: Component; config: Data }>) => Promise<\n    CustomDecisionNode<{\n      kind: Component;\n      config: Data;\n    }>\n  >;\n};\n\ntype BoolInput = {\n  control: 'bool';\n  label?: string;\n};\n\ntype TextInput = {\n  control: 'text';\n  label?: string;\n};\n\ntype InputTypeMap = {\n  bool: boolean;\n  text: string;\n};\n\ntype InputSchema<Name extends string> = {\n  name: Name;\n} & (BoolInput | TextInput);\n\ntype ControlToType<T> = T extends keyof InputTypeMap ? InputTypeMap[T] : never;\n\ntype SplitPath<Path extends string, Obj> = Path extends `${infer Prefix}.${infer Rest}`\n  ? { [K in Prefix]: SplitPath<Rest, Obj> }\n  : { [K in Path]: Obj };\n\n// eslint-disable-next-line\ntype CreateDynamicType<T extends ReadonlyArray<unknown>, Result = {}> = T extends readonly [infer First, ...infer Rest]\n  ? First extends { control: infer Control extends string; name: infer Name extends string }\n    ? CreateDynamicType<Rest, Result & SplitPath<Name, ControlToType<Control>>>\n    : Result\n  : Result;\n\nexport type BaseNode<\n  Component extends string,\n  InputName extends string,\n  Inputs extends InputSchema<InputName>[],\n  NodeData extends object = CreateDynamicType<Inputs>,\n> = {\n  kind: Component;\n  icon?: React.ReactNode;\n  color?: string;\n  displayName: string;\n  shortDescription?: string;\n  group?: string;\n  handleLeft?: boolean;\n  handleRight?: boolean;\n  inputs?: [...Inputs];\n  generateNode?: CustomNodeSpecification<NodeData, Component>['generateNode'];\n  renderNode?: CustomNodeSpecification<NodeData, Component>['renderNode'];\n  onNodeAdd?: CustomNodeSpecification<NodeData, Component>['onNodeAdd'];\n};\n\nexport const createJdmNode = <\n  Component extends string,\n  InputName extends string,\n  Inputs extends InputSchema<InputName>[],\n>(\n  n: BaseNode<Component, InputName, Inputs>,\n): CustomNodeSpecification<any, Component> => {\n  return {\n    kind: n.kind,\n    icon: n.icon,\n    color: n.color,\n    displayName: n.displayName,\n    group: n.group,\n    shortDescription: n.shortDescription,\n    generateNode:\n      n.generateNode ||\n      (({ index }) => ({\n        name: `${n.kind || n.displayName}${index}`,\n      })),\n    onNodeAdd: n.onNodeAdd,\n    renderNode: n.renderNode\n      ? n.renderNode\n      : ({ id, specification, data, selected }) => {\n          const [open, setOpen] = useState(false);\n          const { token } = theme.useToken();\n          const { updateNode } = useDecisionGraphActions();\n          const node = useDecisionGraphState((state) => (state.decisionGraph?.nodes || []).find((n) => n.id === id));\n          const nodeData = node?.content?.config;\n          return (\n            <GraphNode\n              id={id}\n              specification={specification}\n              name={data.name}\n              isSelected={selected}\n              noBodyPadding\n              handleLeft={n.handleLeft}\n              handleRight={n.handleRight}\n              actions={\n                n?.inputs\n                  ? [\n                      <Button\n                        key='edit-table'\n                        type='text'\n                        style={{ marginLeft: 'auto', transform: open ? 'rotate(180deg)' : undefined }}\n                        onClick={() => setOpen((o) => !o)}\n                      >\n                        <DownOutlined />\n                      </Button>,\n                    ]\n                  : undefined\n              }\n            >\n              {open && n?.inputs && (\n                <Form\n                  className='grl-dn__cn__form'\n                  layout='vertical'\n                  initialValues={nodeData}\n                  onValuesChange={(_, values) => {\n                    updateNode(id, (draft) => {\n                      draft.content.config = values;\n                      return draft;\n                    });\n                  }}\n                >\n                  {(n?.inputs || []).map(({ name, control, label }) => {\n                    const formItem = match({ control })\n                      .with({ control: 'text' }, () => <CodeEditor type='template' />)\n                      .with({ control: 'bool' }, () => (\n                        <Checkbox>\n                          <Typography.Text style={{ fontSize: token.fontSizeSM }}>{label}</Typography.Text>\n                        </Checkbox>\n                      ))\n                      .exhaustive();\n\n                    const outerLabel = match({ control })\n                      .with({ control: 'bool' }, () => null)\n                      .otherwise(() => (\n                        <Typography.Text style={{ fontSize: token.fontSizeSM }}>{label}</Typography.Text>\n                      ));\n\n                    const valuePropName = match({ control })\n                      .with({ control: 'bool' }, () => 'checked')\n                      .otherwise(() => undefined);\n\n                    return (\n                      <Form.Item\n                        key={name}\n                        name={name as string}\n                        label={outerLabel}\n                        valuePropName={valuePropName}\n                        style={{\n                          marginBottom: 4,\n                        }}\n                      >\n                        {formItem}\n                      </Form.Item>\n                    );\n                  })}\n                </Form>\n              )}\n            </GraphNode>\n          );\n        },\n  };\n};\n","import type { Monaco } from '@monaco-editor/react';\nimport { loader } from '@monaco-editor/react';\n\ndeclare global {\n  interface Window {\n    monaco?: Monaco;\n  }\n}\n\nif (self.monaco) {\n  loader.config({ monaco: self.monaco });\n}\n","import { Editor } from '@monaco-editor/react';\nimport { Spin, message, theme } from 'antd';\nimport json5 from 'json5';\nimport React from 'react';\n\nimport { copyToClipboard } from '../../../helpers/utility';\n\ntype SimulatorEditorProps = {\n  value?: string;\n  onChange?: (value: string | undefined) => void;\n  readOnly?: boolean;\n};\n\nexport const SimulatorEditor: React.FC<SimulatorEditorProps> = ({ value, onChange, readOnly }) => {\n  const { token } = theme.useToken();\n\n  return (\n    <Editor\n      loading={<Spin size='large' />}\n      language='javascript'\n      value={value}\n      onChange={onChange}\n      theme={token.mode === 'dark' ? 'vs-dark' : 'light'}\n      height='100%'\n      onMount={(editor, monaco) => {\n        monaco.languages.typescript.javascriptDefaults.setDiagnosticsOptions({\n          noSyntaxValidation: true,\n        });\n\n        monaco.languages.typescript.javascriptDefaults.setModeConfiguration({\n          codeActions: false,\n          inlayHints: false,\n        });\n\n        editor.addAction({\n          id: 'copy-json',\n          label: 'Copy JSON',\n          contextMenuGroupId: 'utils',\n          run: async (editor) => {\n            try {\n              await copyToClipboard(JSON.stringify(json5.parse(editor.getValue())));\n              message.success('Copied to clipboard!');\n            } catch {\n              message.error('Failed to copy to clipboard.');\n            }\n          },\n        });\n\n        editor.addAction({\n          id: 'format',\n          label: 'Format',\n          contextMenuGroupId: 'utils',\n          precondition: '!editorReadonly',\n          run: (editor) => {\n            const formatted = JSON.stringify(json5.parse(editor.getValue()), null, 2);\n            editor.setValue(formatted);\n          },\n        });\n      }}\n      options={{\n        readOnly: readOnly,\n        automaticLayout: true,\n        minimap: { enabled: false },\n        fontSize: 12,\n        fontFamily: 'var(--mono-font-family)',\n        tabSize: 2,\n        lineDecorationsWidth: 2,\n        find: {\n          addExtraSpaceOnTop: false,\n          seedSearchStringFromSelection: 'never',\n        },\n        scrollbar: {\n          verticalSliderSize: 4,\n          verticalScrollbarSize: 4,\n          horizontalScrollbarSize: 4,\n          horizontalSliderSize: 4,\n        },\n        lineNumbersMinChars: 3,\n      }}\n    />\n  );\n};\n","import { InfoCircleOutlined, PlayCircleOutlined } from '@ant-design/icons';\nimport { VariableType } from '@gorules/zen-engine-wasm';\nimport { Button, Tooltip, Typography, notification } from 'antd';\nimport json5 from 'json5';\nimport React, { useEffect, useState } from 'react';\n\nimport { isWasmAvailable } from '../../../helpers/wasm';\nimport { NodeTypeKind, useDecisionGraphRaw } from '../context/dg-store.context';\nimport type { DecisionGraphType } from '../dg-types';\nimport { SimulatorEditor } from './simulator-editor';\n\nconst requestTooltip =\n  'Your business context that enters through the Request node, starting the decision process. Supply JSON or JSON5 format.';\n\nexport type SimulatorRequestPanelProps = {\n  defaultRequest?: string;\n  onChange?: (contextJson: string) => void;\n  hasInputNode?: boolean;\n  loading?: boolean;\n  onRun?: (payload: { graph: DecisionGraphType; context: unknown }) => void;\n};\n\nexport const SimulatorRequestPanel: React.FC<SimulatorRequestPanelProps> = ({\n  onChange,\n  hasInputNode,\n  loading,\n  onRun,\n  defaultRequest,\n}) => {\n  const [requestValue, setRequestValue] = useState(defaultRequest);\n  const { stateStore, actions } = useDecisionGraphRaw();\n\n  useEffect(() => {\n    if (!isWasmAvailable()) {\n      return;\n    }\n\n    const { decisionGraph } = stateStore.getState();\n    const requestNode = decisionGraph.nodes.find((n) => n.type === 'inputNode');\n    if (!requestNode) {\n      return;\n    }\n\n    try {\n      const value = requestValue ? json5.parse(requestValue) : 'Any';\n      actions.setNodeType(requestNode.id, NodeTypeKind.InferredOutput, new VariableType(value));\n    } catch {\n      // Skip\n    }\n  }, [requestValue]);\n\n  return (\n    <>\n      <div className={'grl-dg__simulator__section__bar grl-dg__simulator__section__bar--request'}>\n        <Tooltip title={requestTooltip}>\n          <Typography.Text style={{ fontSize: 13, cursor: 'help' }}>\n            Request\n            <InfoCircleOutlined style={{ fontSize: 10, marginLeft: 4, opacity: 0.5, verticalAlign: 'text-top' }} />\n          </Typography.Text>\n        </Tooltip>\n        <div className={'grl-dg__simulator__section__bar__actions'}>\n          {onRun && (\n            <Tooltip\n              title={\n                !hasInputNode\n                  ? 'Request node is required to run the graph. Drag-and-drop it from the Components panel.'\n                  : undefined\n              }\n            >\n              <Button\n                size={'small'}\n                type={'primary'}\n                loading={loading}\n                icon={<PlayCircleOutlined />}\n                disabled={!hasInputNode}\n                onClick={() => {\n                  try {\n                    const parsed = (requestValue || '').trim().length === 0 ? null : json5.parse(requestValue || '');\n                    onRun?.({ graph: stateStore.getState().decisionGraph, context: parsed });\n                  } catch {\n                    notification.error({\n                      message: 'Invalid format',\n                      description: 'Unable to format request, invalid JSON format',\n                      placement: 'top',\n                    });\n                  }\n                }}\n              >\n                Run\n              </Button>\n            </Tooltip>\n          )}\n        </div>\n      </div>\n      <div className={'grl-dg__simulator__section__content'}>\n        <SimulatorEditor\n          value={requestValue}\n          onChange={(text) => {\n            setRequestValue(text);\n            onChange?.(text ?? '');\n          }}\n        />\n      </div>\n    </>\n  );\n};\n","import { CheckCircleTwoTone, ClearOutlined, CloseCircleTwoTone, CloseOutlined } from '@ant-design/icons';\nimport { Button, Spin, Tabs, Tooltip, Typography } from 'antd';\nimport clsx from 'clsx';\nimport json5 from 'json5';\nimport React, { useMemo, useState } from 'react';\nimport { Panel, PanelGroup, PanelResizeHandle } from 'react-resizable-panels';\nimport { P, match } from 'ts-pattern';\n\nimport '../../../helpers/monaco';\nimport { usePersistentState } from '../../../helpers/use-persistent-state';\nimport { useDecisionGraphRaw, useDecisionGraphState } from '../context/dg-store.context';\nimport { NodeKind } from '../nodes/specifications/specification-types';\nimport type { SimulationTrace } from './simulation.types';\nimport { SimulatorEditor } from './simulator-editor';\nimport { SimulatorRequestPanel, type SimulatorRequestPanelProps } from './simulator-request-panel';\n\nenum SimulationSegment {\n  Output = 'Output',\n  Input = 'Input',\n  Trace = 'Trace',\n}\n\nexport type GraphSimulatorProps = {\n  onClear?: () => void;\n  loading?: boolean;\n  defaultRequest?: SimulatorRequestPanelProps['defaultRequest'];\n  onChange?: SimulatorRequestPanelProps['onChange'];\n  onRun?: SimulatorRequestPanelProps['onRun'];\n  leftPanel?: React.FC<SimulatorRequestPanelProps>;\n};\n\nexport const GraphSimulator: React.FC<GraphSimulatorProps> = ({\n  defaultRequest,\n  onChange,\n  onRun,\n  onClear,\n  loading = false,\n  leftPanel: LeftPanel = SimulatorRequestPanel,\n}) => {\n  const [search, setSearch] = usePersistentState<string>('simulation.search', '');\n  const [segment, setSegment] = usePersistentState<SimulationSegment>('simulation.segment', SimulationSegment.Output);\n\n  const { actions } = useDecisionGraphRaw();\n  const { nodeTypes, simulate, hasInputNode } = useDecisionGraphState(({ decisionGraph, simulate }) => ({\n    simulate,\n    hasInputNode: decisionGraph.nodes.some((n) => n.type === NodeKind.Input),\n    nodeTypes: (decisionGraph.nodes ?? []).reduce<Record<string, string | undefined>>(\n      (acc, curr) => ({\n        ...acc,\n        [curr.id]: curr.type,\n      }),\n      {},\n    ),\n  }));\n\n  const [selectedNode, setSelectedNode] = useState<string>('graph');\n\n  const traces = useMemo<Array<SimulationTrace & { nodeId: string }>>(() => {\n    if (!simulate) {\n      return [];\n    }\n\n    if (!('result' in simulate)) {\n      return [];\n    }\n\n    return Object.entries(simulate.result?.trace ?? {})\n      .map(([key, data]) => ({ ...data, nodeId: key }))\n      .filter((t) => ![NodeKind.Input].includes(nodeTypes?.[t.nodeId] as NodeKind))\n      .filter((t) => t.name.toLowerCase().includes(search?.toLowerCase() ?? ''))\n      .sort((a, b) => (a.order ?? 0) - (b.order ?? 0));\n  }, [simulate, search]);\n\n  return (\n    <PanelGroup className='grl-dg__simulator' direction='horizontal' autoSaveId='jdm-editor:simulator:layout'>\n      <Panel minSize={20} defaultSize={30} className='grl-dg__simulator__section grl-dg__simulator__request'>\n        <LeftPanel\n          defaultRequest={defaultRequest}\n          loading={loading}\n          hasInputNode={hasInputNode}\n          onRun={onRun}\n          onChange={onChange}\n        />\n      </Panel>\n      <PanelResizeHandle />\n      <Panel minSize={20} maxSize={20} className={'grl-dg__simulator__section grl-dg__simulator__nodes'}>\n        <div className={'grl-dg__simulator__section__bar grl-dg__simulator__section__bar--nodes'}>\n          <input\n            className='grl-dg__simulator__search'\n            type='text'\n            placeholder='Search nodes...'\n            value={search}\n            onChange={(e) => setSearch(e.target.value)}\n          />\n          <div className={'grl-dg__simulator__section__bar__actions'}>\n            {onClear && (\n              <Tooltip title={'Clear'}>\n                <Button\n                  size={'small'}\n                  type={'text'}\n                  icon={<ClearOutlined />}\n                  onClick={() => {\n                    onClear?.();\n                    setSelectedNode('graph');\n                    setSearch('');\n                  }}\n                />\n              </Tooltip>\n            )}\n          </div>\n        </div>\n        <div className={'grl-dg__simulator__section__content'}>\n          <Spin spinning={loading}>\n            <div className={'grl-dg__simulator__nodes-list'}>\n              {!simulate && (\n                <Typography.Text type='secondary' style={{ textAlign: 'center', marginTop: 60, fontSize: 13 }}>\n                  Ready to simulate!\n                  <br />\n                  Run a request to see the node trace in action.\n                  <br />\n                  <Typography.Link\n                    href='https://docs.gorules.io/docs/simulator'\n                    target='_blank'\n                    style={{ fontSize: 13, marginTop: 4, display: 'inline-block' }}\n                  >\n                    Learn more\n                  </Typography.Link>\n                </Typography.Text>\n              )}\n              {'graph'.includes(search?.toLowerCase() ?? '') && simulate && (\n                <div\n                  className={clsx('grl-dg__simulator__nodes-list__node', selectedNode === 'graph' && 'active')}\n                  onClick={() => setSelectedNode('graph')}\n                >\n                  <Typography.Text data-role='name' ellipsis>\n                    <StatusIcon\n                      status={match(simulate)\n                        .with({ error: P.nonNullable }, () => 'error' as const)\n                        .with({ result: P.nonNullable }, () => 'success' as const)\n                        .otherwise(() => 'not-run' as const)}\n                    />\n                    Graph\n                  </Typography.Text>\n                  <Typography.Text type={'secondary'} data-role='performance'>\n                    {match(simulate)\n                      .with({ result: P._ }, ({ result }) => result?.performance)\n                      .otherwise(() => undefined)}\n                  </Typography.Text>\n                </div>\n              )}\n              {traces.map((trace) => (\n                <div\n                  key={trace.nodeId}\n                  className={clsx('grl-dg__simulator__nodes-list__node', trace.nodeId === selectedNode && 'active')}\n                  onClick={() => setSelectedNode(trace.nodeId)}\n                  onDoubleClick={() => actions.goToNode(trace.nodeId)}\n                >\n                  <Typography.Text data-role='name' ellipsis={{ tooltip: trace.name }}>\n                    <StatusIcon status={trace.nodeId === simulate?.error?.data?.nodeId ? 'error' : 'success'} />\n                    {trace.name}\n                  </Typography.Text>\n                  <Typography.Text type={'secondary'} data-role='performance'>\n                    {trace.performance}\n                  </Typography.Text>\n                </div>\n              ))}\n            </div>\n          </Spin>\n        </div>\n      </Panel>\n      <PanelResizeHandle />\n      <Panel minSize={30} defaultSize={50} className={'grl-dg__simulator__section grl-dg__simulator__response'}>\n        <div className={'grl-dg__simulator__section__bar grl-dg__simulator__section__bar--response'}>\n          <Tabs\n            rootClassName='grl-inline-tabs'\n            size='small'\n            style={{ width: '100%' }}\n            onChange={(tab) => setSegment(tab as SimulationSegment)}\n            items={Object.values(SimulationSegment).map((s) => ({\n              key: s,\n              label: s,\n            }))}\n            tabBarExtraContent={\n              <Tooltip title='Close panel'>\n                <Button\n                  type='text'\n                  icon={<CloseOutlined style={{ fontSize: 12 }} />}\n                  onClick={() => actions.setActivePanel(undefined)}\n                />\n              </Tooltip>\n            }\n          />\n        </div>\n        <div className={'grl-dg__simulator__section__content'}>\n          <SimulatorEditor\n            readOnly\n            value={match(simulate)\n              .with({ result: P._ }, ({ result }) =>\n                match(selectedNode)\n                  .with('graph', () =>\n                    displaySegment(\n                      {\n                        traceData: result?.trace,\n                        output: result?.result,\n                      },\n                      segment ?? SimulationSegment.Output,\n                    ),\n                  )\n                  .otherwise(() => displaySegment(result?.trace[selectedNode], segment ?? SimulationSegment.Output)),\n              )\n              .otherwise(() => '')}\n          />\n        </div>\n      </Panel>\n    </PanelGroup>\n  );\n};\n\nconst displaySegment = (data: unknown, segment: SimulationSegment) => {\n  const jsonData = match([segment, data])\n    .with([SimulationSegment.Output, { output: P._ }], ([, { output }]) => output)\n    .with([SimulationSegment.Input, { input: P._ }], ([, { input }]) => input)\n    .with([SimulationSegment.Trace, { trace: P._ }], ([, { trace }]) => trace)\n    .with([SimulationSegment.Trace, { traceData: P._ }], ([, { traceData }]) => traceData)\n    .otherwise(() => ({}));\n\n  return json5.stringify(jsonData, undefined, 2);\n};\n\nconst StatusIcon: React.FC<{ status: 'success' | 'error' | 'not-run' }> = ({ status }) => {\n  if (status === 'not-run') {\n    return null;\n  }\n\n  if (status === 'success') {\n    return (\n      <CheckCircleTwoTone\n        twoToneColor={['var(--grl-color-success)', 'var(--grl-color-success-bg)']}\n        style={{ marginRight: 6, fontSize: 12, opacity: 0.5 }}\n      />\n    );\n  }\n\n  return (\n    <CloseCircleTwoTone\n      twoToneColor={['var(--grl-color-error)', 'var(--grl-color-error-bg)']}\n      style={{ marginRight: 5, fontSize: 12 }}\n    />\n  );\n};\n","type RenderDiagnosticMessageParams = {\n  text: string;\n  className?: string;\n};\n\nexport const renderDiagnosticMessage = ({ text, className }: RenderDiagnosticMessageParams) => {\n  return text.replace(/`([^`]+)`/g, (match, content) => {\n    let color;\n    if (/^[\"'].*[\"']$/.test(content)) {\n      color = '#077d16'; // Strings\n    } else if (/^\\d+$/.test(content)) {\n      color = '#015cc5'; // Numbers\n    } else {\n      color = '#CE8E6D'; // Everything else\n    }\n    return `<span class=\"${className}\" style=\"color: ${color};\">${content}</span>`;\n  });\n};\n","import { linter } from '@codemirror/lint';\n\nexport const codemirror = {\n  linter: linter,\n};\n","import type { Diagnostic } from '@codemirror/lint';\nimport { VariableType, validateExpression, validateUnaryExpression } from '@gorules/zen-engine-wasm';\nimport { P, match } from 'ts-pattern';\n\nimport { codemirror } from '../../../helpers/codemirror';\nimport { isWasmAvailable } from '../../../helpers/wasm';\nimport { renderDiagnosticMessage } from './diagnostic';\nimport type { ZenType } from './types';\nimport {\n  typeField,\n  updateExpectedVariableTypeEffect,\n  updateExpressionTypeEffect,\n  updateStrictModeEffect,\n  updateVariableTypeEffect,\n  zenKindToString,\n} from './types';\n\ntype ExpressionError = {\n  type: string;\n  source: string;\n};\n\nconst extractPosition = (error: string): [number, number] | number | null => {\n  try {\n    const splitError = error.split(' at ');\n    if (splitError.length <= 1) {\n      return null;\n    }\n\n    const positions = splitError.pop()!;\n    const trimmed = positions.replace('(', '').replace(')', '');\n    const [left, right] = trimmed.split(', ');\n\n    if (right) {\n      return [parseInt(left), parseInt(right)];\n    }\n\n    return parseInt(left);\n  } catch {\n    return null;\n  }\n};\n\nconst lintExpression = (type: string, source: string): Diagnostic[] => {\n  if (!isWasmAvailable()) {\n    return [];\n  }\n\n  const error: ExpressionError = match(type)\n    .with('standard', () => validateExpression(source))\n    .with('unary', () => validateUnaryExpression(source))\n    .otherwise(() => null);\n  if (!error) {\n    return [];\n  }\n\n  const position = match(extractPosition(error.source))\n    .with(P.number, (n) => ({ from: n, to: n }))\n    .with([P.number, P.number], ([l, r]) => ({ from: l, to: r }))\n    .otherwise(() => ({ from: 0, to: source.length }));\n\n  const errorSource = match(error.type)\n    .with('parserError', () => 'Parser error')\n    .with('lexerError', () => 'Lexer error')\n    .with('compilerError', () => 'Compiler error')\n    .with('vmError', () => 'VM error')\n    .otherwise((n) => n);\n\n  return [\n    {\n      from: position.from,\n      to: position.to,\n      message: error.source,\n      source: errorSource,\n      severity: 'error',\n    },\n  ];\n};\n\nexport const zenLinter = (type: string) => {\n  if (!isWasmAvailable()) {\n    return [];\n  }\n\n  return codemirror.linter(\n    (view) => {\n      view.dom.setAttribute('data-severity', 'none');\n      const tFields = view.state.field(typeField);\n\n      const source = view.state.doc.toString();\n      const diagnostics = validateZenExpression({\n        source,\n        expressionType: type as 'standard',\n        strict: tFields.strict,\n        types: tFields.types,\n        expectedVariableType: tFields.expectedVariableType,\n      });\n\n      if (diagnostics.some((d) => d.severity === 'error')) {\n        view.dom.setAttribute('data-severity', 'error');\n      } else if (diagnostics.some((d) => d.severity === 'warning')) {\n        view.dom.setAttribute('data-severity', 'warning');\n      } else if (diagnostics.some((d) => d.severity === 'info')) {\n        view.dom.setAttribute('data-severity', 'info');\n      } else if (diagnostics.some((d) => d.severity === 'hint')) {\n        view.dom.setAttribute('data-severity', 'hint');\n      }\n\n      return diagnostics;\n    },\n    {\n      needsRefresh: (update) => {\n        return update.transactions.some((t) =>\n          t.effects.some(\n            (effect) =>\n              effect.is(updateExpressionTypeEffect) ||\n              effect.is(updateVariableTypeEffect) ||\n              effect.is(updateExpectedVariableTypeEffect) ||\n              effect.is(updateStrictModeEffect),\n          ),\n        );\n      },\n    },\n  );\n};\n\ntype ValidateZenExpressionParams = {\n  source: string;\n  expressionType?: 'standard' | 'unary';\n  strict?: boolean;\n  /** Generated by variableType.typeCheckUnary and variableType.typeCheckUnary **/\n  types: ZenType[];\n  expectedVariableType?: VariableType;\n};\n\nexport const validateZenExpression = ({\n  source,\n  expressionType = 'standard',\n  strict = false,\n  types,\n  expectedVariableType,\n}: ValidateZenExpressionParams): Diagnostic[] => {\n  if (source.trim().length === 0) {\n    return [];\n  }\n\n  const expressionDiagnostics = source ? lintExpression(expressionType, source) : [];\n  const typeDiagnostics: Diagnostic[] = types\n    .filter((t) => !!t.error)\n    .map((t) =>\n      createDiagnostic({\n        from: t.span[0],\n        to: t.span[1],\n        severity: match(t.error as string)\n          .with(P.string.startsWith('Hint:'), () => 'hint' as const)\n          .with(P.string.startsWith('Info:'), () => 'info' as const)\n          .otherwise(() => 'warning' as const),\n        message: t.error as string,\n        source: 'Type check',\n      }),\n    );\n\n  const diagnostics = [...expressionDiagnostics, ...typeDiagnostics];\n\n  if (expressionType === 'unary' && types.length > 0) {\n    const expressionResultKind = types[0].kind;\n    if (expressionResultKind !== 'Bool') {\n      diagnostics.push(\n        createDiagnostic({\n          from: 0,\n          to: source.length,\n          severity: strict ? 'error' : 'warning',\n          message: `Expected unary expression to evaluate to type \\`bool\\`, received \\`${zenKindToString(expressionResultKind)}\\` instead.`,\n          source: 'Type check',\n        }),\n      );\n    }\n  } else if (expectedVariableType && types.length > 0) {\n    const expressionResultKind = types[0].kind;\n    const expressionResultVt = VariableType.fromJson(expressionResultKind);\n    const typesEqual = match(strict)\n      .with(true, () => expressionResultVt.equal(expectedVariableType))\n      .otherwise(() => expressionResultVt.satisfies(expectedVariableType));\n\n    if (!typesEqual) {\n      diagnostics.push(\n        createDiagnostic({\n          from: 0,\n          to: source.length,\n          severity: strict ? 'error' : 'warning',\n          message: `Expected expression to evaluate to type \\`${zenKindToString(expectedVariableType.toJson())}\\`, received \\`${zenKindToString(expressionResultKind)}\\` instead.`,\n          source: 'Type check',\n        }),\n      );\n    }\n  }\n\n  return diagnostics;\n};\n\nconst createDiagnostic = (diagnostic: Diagnostic): Diagnostic => {\n  diagnostic.renderMessage = (_) => {\n    const element = document.createElement('div');\n    element.innerHTML = renderDiagnosticMessage({\n      text: diagnostic.message,\n      className: 'cm-diagnosticMessageToken',\n    });\n\n    return element;\n  };\n\n  return diagnostic;\n};\n","import {\n  type Completion,\n  type CompletionContext,\n  type CompletionResult,\n  autocompletion,\n  closeBrackets,\n  closeBracketsKeymap,\n} from '@codemirror/autocomplete';\nimport { history, historyKeymap, insertNewlineAndIndent } from '@codemirror/commands';\nimport { HighlightStyle, LRLanguage, LanguageSupport, syntaxHighlighting, syntaxTree } from '@codemirror/language';\nimport type { EditorView } from '@codemirror/view';\nimport { hoverTooltip, keymap } from '@codemirror/view';\nimport { parser as zenParser } from '@gorules/lezer-zen';\nimport { parser as zenTemplateParser } from '@gorules/lezer-zen-template';\nimport { NodeProp, type SyntaxNode, parseMixed } from '@lezer/common';\nimport { tags as t } from '@lezer/highlight';\nimport { match } from 'ts-pattern';\n\nimport baseCompletion from '../../../completion.json';\nimport { renderDiagnosticMessage } from './diagnostic';\nimport { zenLinter } from './linter';\nimport { buildTypeCompletion, typeField, zenKindToString } from './types';\nimport { SchemaSelectProps } from '../../../helpers/components';\n\nlet completion = baseCompletion;\n\nexport const applyCompletion = (view: EditorView, completion: Completion, from: number, to: number) => {\n  const transaction = match(completion.type)\n    .with('function', () => {\n      const insert = `${completion.label}()`;\n\n      return view.state.update({\n        changes: { from: from, to: to, insert },\n        selection: { anchor: from + insert.length - 1 }, // Place the caret inside the parentheses\n      });\n    })\n    .otherwise(() =>\n      view.state.update({\n        changes: { from: from, to: to, insert: completion.label },\n        selection: { anchor: from + completion.label.length },\n      }),\n    );\n\n  view.dispatch(transaction);\n};\n\nconst hasAutoComplete = (n: SyntaxNode | null): boolean => {\n  if (!n) {\n    return false;\n  }\n\n  const isAutoComplete = n?.type.prop(NodeProp.group)?.includes('autoComplete') || false;\n  return isAutoComplete || hasAutoComplete(n?.parent);\n};\n\nconst makeExpressionCompletion =\n  () =>\n  (context: CompletionContext): CompletionResult | null => {\n    const tree = syntaxTree(context.state);\n\n    const word = context.state.wordAt(context.pos);\n    const node = tree.resolveInner(context.pos, -1);\n    if (\n      !hasAutoComplete(node) ||\n      (!context.explicit && context.pos === 0) ||\n      (!context.explicit && !word && node.name !== '.')\n    ) {\n      return null;\n    }\n\n    const extendedCompletion = completion.map((c) =>\n      ({\n        ...c,\n        detail: c.detail.replaceAll('`', ''),\n        apply: applyCompletion,\n      }) satisfies Completion,\n    );\n\n    const from = word?.from ?? context.pos;\n    switch (node.name) {\n      case 'Standard':\n      case 'VariableName': {\n        const tField = context.state.field(typeField);\n\n        return {\n          from,\n          options: [...buildTypeCompletion({ type: 'variable', kind: tField.rootKind }), ...extendedCompletion],\n          validFor: /\\w*/,\n        };\n      }\n      case 'String': {\n        const tField = context.state.field(typeField);\n        const tBase = autoCompleteSpan(node);\n        const targetType = (tField.types ?? []).find((t) => t.span[0] === tBase?.[0] && t.span[1] === tBase[1]);\n        if (!targetType) {\n          return null;\n        }\n\n        return {\n          from: node.from + 1,\n          options: buildTypeCompletion({ kind: targetType.kind }),\n          validFor: /\\w*/,\n        };\n      }\n      case '.':\n      case 'PropertyName': {\n        const tField = context.state.field(typeField);\n        const tBase = autoCompleteSpan(node);\n        const targetType = (tField.types ?? []).find((t) => t.span[0] === tBase?.[0] && t.span[1] === tBase[1]);\n        if (!targetType) {\n          return null;\n        }\n\n        return {\n          from,\n          options: buildTypeCompletion({ kind: targetType.kind }),\n          validFor: /\\w*/,\n        };\n      }\n      default:\n        return null;\n    }\n  };\n\nconst autoCompleteSpan = (node: SyntaxNode): [number, number] | null => {\n  let lastNode = node;\n  if (['PropertyExpression', 'PropertyAccess'].includes(lastNode.parent?.name ?? '') && lastNode.parent?.prevSibling) {\n    lastNode = lastNode.parent.prevSibling;\n  }\n\n  let firstNode = lastNode;\n  while (firstNode.prevSibling) {\n    firstNode = firstNode.prevSibling;\n  }\n\n  return [firstNode.from, lastNode.to];\n};\n\nconst hoverSpan = (node: SyntaxNode): [number, number] | null => {\n  let lastNode = node;\n  if (lastNode.parent && ['PropertyExpression', 'PropertyAccess'].includes(lastNode.parent.name)) {\n    lastNode = lastNode.parent;\n  }\n\n  let firstNode = lastNode;\n  while (firstNode.prevSibling) {\n    firstNode = firstNode.prevSibling;\n  }\n\n  return [firstNode.from, lastNode.to];\n};\n\nexport const completionExtension = (schema: SchemaSelectProps[] = []) => {\n  const schemaCompletion = schema.map(({field, name}) => ({\n    \"label\": field,\n    \"type\": \"variable\",\n    \"detail\": name || \"\",\n    \"info\": \"\"\n  }));\n  completion = [...baseCompletion, ...schemaCompletion];\n  return autocompletion({\n    override: [makeExpressionCompletion()],\n  });\n}\n\nexport const hoverExtension = () =>\n  hoverTooltip((view, pos) => {\n    const word = view.state.wordAt(pos);\n    if (!word) {\n      return null;\n    }\n\n    const data = view.state.doc.sliceString(word.from, word.to);\n    const details = completion.find((cmp) => cmp.label === data);\n    if (details) {\n      return {\n        pos: word.from,\n        end: word.to,\n        above: true,\n        create() {\n          const dom = document.createElement('div');\n          dom.classList.add('grl-ce-hover-tooltip');\n          dom.style.whiteSpace = 'pre';\n          dom.innerHTML = renderDiagnosticMessage({\n            text: `<span style=\"font-size: 12px\">${details.info}</span>\\n${details.label}: ${details.detail}\\n`,\n            className: 'cm-hoverTooltipMessageToken',\n          });\n          return { dom };\n        },\n      };\n    }\n\n    const tree = syntaxTree(view.state);\n    const node = tree.resolveInner(pos, -1);\n\n    const tField = view.state.field(typeField);\n    const tBase = hoverSpan(node);\n    const targetType = (tField.types ?? []).find((t) => t.span[0] === tBase?.[0] && t.span[1] === tBase[1]);\n    if (targetType && tBase) {\n      const source = view.state.doc.toString();\n\n      return {\n        pos: tBase[0],\n        end: tBase[1],\n        above: true,\n        create() {\n          const dom = document.createElement('div');\n          dom.classList.add('grl-ce-hover-tooltip');\n          dom.style.whiteSpace = 'pre';\n          dom.innerHTML = renderDiagnosticMessage({\n            text: `${source.slice(tBase[0], tBase[1])}: \\`${zenKindToString(targetType.kind)}\\``,\n            className: 'cm-hoverTooltipMessageToken',\n          });\n          return { dom };\n        },\n      };\n    }\n\n    return null;\n  });\n\nexport const zenHighlightLight = syntaxHighlighting(\n  HighlightStyle.define([\n    { tag: [t.bracket, t.operator, t.variableName, t.propertyName, t.content, t.punctuation], color: '#080808' },\n    { tag: [t.number, t.bool], color: '#015cc5' },\n    { tag: [t.function(t.variableName), t.keyword, t.self, t.special(t.brace), t.logicOperator], color: '#6f42c1' },\n    { tag: [t.string, t.meta, t.name, t.quote], color: '#077d16' },\n    { tag: t.invalid, color: '#cb2431' },\n  ]),\n);\n\nexport const zenHighlightDark = syntaxHighlighting(\n  HighlightStyle.define([\n    { tag: [t.bracket, t.operator, t.variableName, t.propertyName, t.content, t.punctuation], color: '#bdbec4' },\n    { tag: [t.number, t.bool], color: '#57a8f5' },\n    { tag: [t.function(t.variableName), t.keyword, t.self, t.special(t.brace), t.logicOperator], color: '#c87dbb' },\n    { tag: [t.string, t.meta, t.name, t.quote], color: '#6aab73' },\n    { tag: t.invalid, color: '#cb2431' },\n  ]),\n);\n\nconst zenLanguage = new LanguageSupport(\n  LRLanguage.define({\n    parser: zenParser,\n    name: 'zen',\n    languageData: {\n      closeBrackets: { brackets: ['(', '[', '{', \"'\", '\"', '`'] },\n      wordChars: '$',\n    },\n  }),\n);\n\nconst zenTemplateLanguage = new LanguageSupport(\n  LRLanguage.define({\n    parser: zenTemplateParser.configure({\n      wrap: parseMixed((node) => {\n        if (node.name === 'ExpressionInner') {\n          return { parser: zenParser };\n        }\n\n        return null;\n      }),\n    }),\n    name: 'zenTemplate',\n    languageData: {\n      closeBrackets: { brackets: ['(', '[', \"'\", '\"', '{', '`'] },\n      wordChars: '$',\n    },\n  }),\n);\n\ntype extensionOptions = {\n  type: 'unary' | 'standard' | 'template';\n  lint?: boolean;\n  schema: SchemaSelectProps[];\n};\n\nexport const zenExtensions = ({ type, lint = true, schema }: extensionOptions) =>\n  [\n    type !== 'template' ? zenLanguage : zenTemplateLanguage,\n    completionExtension(schema),\n    hoverExtension(),\n    closeBrackets(),\n    lint && zenLinter(type),\n    typeField,\n    history(),\n    keymap.of([\n      ...closeBracketsKeymap,\n      ...historyKeymap,\n      { key: 'Enter', run: insertNewlineAndIndent, shift: insertNewlineAndIndent },\n    ]),\n  ].filter((ext) => !!ext);\n","import type { Completion } from '@codemirror/autocomplete';\nimport { StateEffect, StateField } from '@codemirror/state';\nimport type { VariableType } from '@gorules/zen-engine-wasm';\nimport { P, match } from 'ts-pattern';\n\nimport { applyCompletion } from './zen';\n\nexport type ZenType = {\n  error: string | null;\n  kind: any;\n  nodeKind: string;\n  span: [number, number];\n};\n\ntype TypeField = {\n  root?: VariableType;\n  expectedVariableType?: VariableType;\n  source?: string;\n  types: ZenType[];\n  rootKind: any;\n  expressionType: 'standard' | 'unary';\n  strict: boolean;\n};\n\nconst defaultTypeField: TypeField = { types: [], rootKind: 'Any', expressionType: 'standard', strict: false };\n\nexport const updateVariableTypeEffect = StateEffect.define<VariableType | null>();\nexport const updateExpressionTypeEffect = StateEffect.define<'standard' | 'unary'>();\nexport const updateExpectedVariableTypeEffect = StateEffect.define<VariableType | null>();\nexport const updateStrictModeEffect = StateEffect.define<boolean>();\n\nexport const typeField = StateField.define<TypeField>({\n  create() {\n    return defaultTypeField;\n  },\n  update(value, transaction) {\n    const updateExpressionType = transaction.effects.find((e) => e.is(updateExpressionTypeEffect));\n    const expressionType: TypeField['expressionType'] = match(updateExpressionType)\n      .with({ value: P.string }, (e) => e.value)\n      .otherwise(() => value.expressionType);\n\n    const updateExpectedVariableType = transaction.effects.find((e) => e.is(updateExpectedVariableTypeEffect));\n    const expectedVariableType = match(updateExpectedVariableType)\n      .with({ value: P.nonNullable }, ({ value }) => value)\n      .with({ value: P.nullish }, () => undefined)\n      .otherwise(() => value.expectedVariableType);\n\n    const updateVariableType = transaction.effects.find((e) => e.is(updateVariableTypeEffect));\n    const variableType: VariableType | null = match(updateVariableType)\n      .with({ value: P._ }, (e) => e.value)\n      .otherwise(() => value.root || null);\n\n    const updateStrictMode = transaction.effects.find((e) => e.is(updateStrictModeEffect));\n    const strict: boolean = match(updateStrictMode)\n      .with({ value: P.boolean }, ({ value }) => value)\n      .otherwise(() => value.strict);\n\n    if (!variableType) {\n      return { ...value, expressionType, expectedVariableType, strict };\n    }\n\n    // Triggered without effect and no changes, bail\n    if (!transaction.docChanged && !updateExpressionType && !updateVariableType) {\n      return { ...value, expressionType, expectedVariableType, strict };\n    }\n\n    const source = transaction.newDoc.toString();\n    return {\n      source,\n      expressionType,\n      expectedVariableType,\n      strict,\n      root: variableType,\n      rootKind: variableType.toJson(),\n      types: match(expressionType)\n        .with('unary', () => variableType.typeCheckUnary(source))\n        .otherwise(() => variableType.typeCheck(source)),\n    } satisfies TypeField;\n  },\n  compare(a, b) {\n    return (\n      a.source === b.source &&\n      a.expressionType === b.expressionType &&\n      a.root === b.root &&\n      a.expectedVariableType === b.expectedVariableType &&\n      a.strict === b.strict\n    );\n  },\n});\n\ntype BuildTypeCompletionParams = {\n  kind: any;\n  type?: string;\n};\n\nexport const buildTypeCompletion = ({ kind, type = 'property' }: BuildTypeCompletionParams): Completion[] => {\n  return match(kind)\n    .with({ Object: P._ }, (t) =>\n      Object.entries(t.Object as object).map(([k, v]) => ({\n        label: k,\n        type,\n        boost: 10,\n        detail: zenKindToString(v),\n        apply: applyCompletion,\n      })),\n    )\n    .otherwise(() => []);\n};\n\nexport const zenKindToString = (type: unknown): string =>\n  match(type)\n    .with(P.string, (s) => s.toLowerCase())\n    .with({ Object: P._ }, () => 'object')\n    .with({ Array: P._ }, (t) => `${zenKindToString(t.Array)}[]`)\n    .otherwise(() => 'unknown');\n","import { bracketMatching } from '@codemirror/language';\nimport { Compartment, EditorState, type Extension, Text } from '@codemirror/state';\nimport { EditorView, placeholder as placeholderExt } from '@codemirror/view';\nimport { createVariableType } from '@gorules/zen-engine-wasm';\nimport { theme } from 'antd';\nimport clsx from 'clsx';\nimport React, { useEffect, useMemo, useRef } from 'react';\nimport { match } from 'ts-pattern';\n\nimport { composeRefs } from '../../helpers/compose-refs';\nimport { useDecisionGraphState } from '../decision-graph';\nimport { isWasmAvailable } from '../../helpers/wasm';\nimport './ce.scss';\nimport {\n  updateExpectedVariableTypeEffect,\n  updateExpressionTypeEffect,\n  updateStrictModeEffect,\n  updateVariableTypeEffect,\n} from './extensions/types';\nimport { zenExtensions, zenHighlightDark, zenHighlightLight } from './extensions/zen';\n\nconst updateListener = (onChange?: (data: string) => void, onStateChange?: (state: EditorState) => void) =>\n  EditorView.updateListener.of((update) => {\n    onStateChange?.(update.state);\n    if (!update.docChanged) {\n      return;\n    }\n\n    onChange?.(update.state.doc.toString());\n  });\n\nconst editorTheme = (isDark = false) => (isDark ? zenHighlightDark : zenHighlightLight);\n\ntype ExtensionParams = {\n  type?: 'standard' | 'unary' | 'template';\n};\n\nexport type CodeEditorProps = {\n  maxRows?: number;\n  value?: string;\n  onChange?: (value: string) => void;\n  onStateChange?: (state: EditorState) => void;\n  placeholder?: string;\n  disabled?: boolean;\n  type?: 'unary' | 'standard' | 'template';\n  lint?: boolean;\n  strict?: boolean;\n  fullHeight?: boolean;\n  noStyle?: boolean;\n  extension?: (params: ExtensionParams) => Extension;\n  variableType?: any;\n  expectedVariableType?: any;\n} & Omit<React.HTMLAttributes<HTMLDivElement>, 'disabled' | 'onChange'>;\n\nexport const CodeEditor = React.forwardRef<HTMLDivElement, CodeEditorProps>(\n  (\n    {\n      noStyle = false,\n      fullHeight = false,\n      strict = false,\n      maxRows,\n      disabled,\n      value,\n      onChange,\n      placeholder,\n      className,\n      onStateChange,\n      type = 'standard',\n      extension,\n      variableType,\n      expectedVariableType,\n      lint = true,\n      ...props\n    },\n    ref,\n  ) => {\n    const container = useRef<HTMLDivElement>(null);\n    const codeMirror = useRef<EditorView>(null);\n    const { token } = theme.useToken();\n\n    const { inputsSchema, outputsSchema } = useDecisionGraphState(\n      ({ inputsSchema = [], outputsSchema = [] }) => ({ inputsSchema, outputsSchema }),\n    );\n    const schema = [...inputsSchema, ...outputsSchema];\n\n    const compartment = useMemo(\n      () => ({\n        zenExtension: new Compartment(),\n        theme: new Compartment(),\n        placeholder: new Compartment(),\n        readOnly: new Compartment(),\n        updateListener: new Compartment(),\n        userProvided: new Compartment(),\n      }),\n      [],\n    );\n\n    useEffect(() => {\n      if (!container.current) {\n        return;\n      }\n\n      const editorView = new EditorView({\n        parent: container.current,\n        state: EditorState.create({\n          doc: value,\n          extensions: [\n            EditorView.lineWrapping,\n            bracketMatching(),\n            compartment.zenExtension.of(zenExtensions({ type, lint, schema })),\n            compartment.updateListener.of(updateListener(onChange, onStateChange)),\n            compartment.theme.of(editorTheme(token.mode === 'dark')),\n            compartment.placeholder.of(placeholder ? placeholderExt(placeholder) : []),\n            compartment.readOnly.of(EditorView.editable.of(!disabled)),\n            compartment.userProvided.of(extension?.({ type }) ?? []),\n          ],\n        }),\n      });\n\n      (codeMirror as any).current = editorView;\n\n      return () => {\n        editorView.destroy();\n        (codeMirror as any).current = null;\n      };\n    }, []);\n\n    useEffect(() => {\n      if (!codeMirror.current || value === undefined) {\n        return;\n      }\n\n      const cm = codeMirror.current;\n      if (cm.state.doc.eq(Text.of(value.split('\\n')))) {\n        return;\n      }\n\n      cm.dispatch({\n        changes: {\n          from: 0,\n          to: cm.state.doc.length,\n          insert: value,\n        },\n      });\n    }, [value]);\n\n    useEffect(() => {\n      if (!codeMirror.current) {\n        return;\n      }\n\n      codeMirror.current.dispatch({\n        effects: compartment.theme.reconfigure(editorTheme(token.mode === 'dark')),\n      });\n    }, [token.mode]);\n\n    useEffect(() => {\n      if (!codeMirror.current) {\n        return;\n      }\n\n      codeMirror.current.dispatch({\n        effects: compartment.placeholder.reconfigure(placeholder ? placeholderExt(placeholder) : []),\n      });\n    }, [placeholder]);\n\n    useEffect(() => {\n      if (!codeMirror.current) {\n        return;\n      }\n\n      codeMirror.current.dispatch({\n        effects: compartment.readOnly.reconfigure(EditorView.editable.of(!disabled)),\n      });\n    }, [disabled]);\n\n    useEffect(() => {\n      if (!codeMirror.current) {\n        return;\n      }\n\n      codeMirror.current.dispatch({\n        effects: compartment.updateListener.reconfigure(updateListener(onChange, onStateChange)),\n      });\n    }, [onChange, onStateChange]);\n\n    useEffect(() => {\n      if (!codeMirror.current) {\n        return;\n      }\n\n      codeMirror.current.dispatch({\n        effects: [\n          compartment.zenExtension.reconfigure(zenExtensions({ type, lint, schema })),\n          updateExpressionTypeEffect.of(\n            match(type)\n              .with('unary', () => 'unary' as const)\n              .otherwise(() => 'standard' as const),\n          ),\n        ],\n      });\n    }, [type, lint, schema]);\n\n    useEffect(() => {\n      if (!codeMirror.current) {\n        return;\n      }\n\n      codeMirror.current.dispatch({\n        effects: compartment.userProvided.reconfigure(extension?.({ type }) ?? []),\n      });\n    }, [extension, type]);\n\n    useEffect(() => {\n      if (!codeMirror.current || !isWasmAvailable()) {\n        return;\n      }\n\n      if (variableType === null || variableType === undefined) {\n        codeMirror.current.dispatch({\n          effects: updateVariableTypeEffect.of(null),\n        });\n        return;\n      }\n\n      codeMirror.current.dispatch({\n        effects: updateVariableTypeEffect.of(createVariableType(variableType)),\n      });\n    }, [variableType]);\n\n    useEffect(() => {\n      if (!codeMirror.current || !isWasmAvailable()) {\n        return;\n      }\n\n      if (expectedVariableType === null || expectedVariableType === undefined) {\n        codeMirror.current.dispatch({\n          effects: updateExpectedVariableTypeEffect.of(null),\n        });\n        return;\n      }\n\n      codeMirror.current.dispatch({\n        effects: updateExpectedVariableTypeEffect.of(createVariableType(expectedVariableType)),\n      });\n    }, [expectedVariableType]);\n\n    useEffect(() => {\n      if (!codeMirror.current) {\n        return;\n      }\n\n      codeMirror.current.dispatch({\n        effects: updateStrictModeEffect.of(strict),\n      });\n    }, [strict]);\n\n    return (\n      <div\n        ref={composeRefs(container, ref)}\n        className={clsx(\n          'grl-ce',\n          maxRows && !fullHeight && 'max-rows',\n          fullHeight && 'full-height',\n          noStyle && 'no-style',\n          className,\n        )}\n        style={{ '--editorMaxRows': maxRows } as any}\n        data-type={type}\n        {...props}\n      />\n    );\n  },\n);\n","import { Cascader, Form, Input, Modal } from 'antd';\nimport React, { useEffect } from 'react';\n\nimport type { SchemaSelectProps } from '../../../helpers/components';\nimport { recursiveSelect } from '../../../helpers/components';\nimport { AutosizeTextArea } from '../../autosize-text-area';\nimport { CodeEditor } from '../../code-editor';\nimport type { ColumnType, TableSchemaItem } from '../context/dt-store.context';\nimport { useDecisionTableState } from '../context/dt-store.context';\n\nexport type FieldAddProps = {\n  id?: string;\n  onSuccess?: (column: TableSchemaItem) => void;\n  onDismiss?: () => void;\n  isOpen?: boolean;\n  schema?: SchemaSelectProps[];\n  columnType?: ColumnType;\n  getContainer?: () => HTMLElement;\n};\n\nexport const FieldAdd: React.FC<FieldAddProps> = (props) => {\n  const { isOpen, onDismiss, onSuccess, schema, getContainer } = props;\n  const { inputVariableType } = useDecisionTableState(({ inputVariableType }) => ({ inputVariableType }));\n  const [form] = Form.useForm<TableSchemaItem>();\n  const type = Form.useWatch('type', form);\n\n  useEffect(() => {\n    if (isOpen) {\n      form.resetFields();\n    }\n  }, [isOpen, form]);\n\n  return (\n    <Modal\n      title='Add a column'\n      open={isOpen}\n      destroyOnClose\n      onCancel={onDismiss}\n      width={360}\n      okText='Add'\n      okButtonProps={{\n        form: 'field-add-dialog',\n        htmlType: 'submit',\n      }}\n      getContainer={getContainer}\n    >\n      <Form\n        id='field-add-dialog'\n        requiredMark={false}\n        form={form}\n        layout='vertical'\n        initialValues={{ type: 'expression' }}\n        onFinish={({ field, name, defaultValue }) => {\n          onSuccess?.({\n            id: crypto.randomUUID(),\n            field: (field || '')?.trim?.()?.length > 0 ? field : undefined,\n            name,\n            defaultValue,\n          });\n        }}\n      >\n        {schema && (\n          <Form.Item label={'Choose from list'}>\n            <Cascader\n              fieldNames={{ label: 'name', value: 'field', children: 'items' }}\n              options={schema}\n              onChange={(val) => {\n                const field = recursiveSelect(val as string[], schema);\n                if (field) {\n                  form.setFieldsValue({\n                    name: field?.name,\n                    field: field?.field,\n                  });\n                }\n              }}\n            ></Cascader>\n          </Form.Item>\n        )}\n        <Form.Item name='name' label='Label' rules={[{ required: true }]}>\n          <Input autoComplete='off' />\n        </Form.Item>\n        <Form.Item\n          name='field'\n          label={type === 'expression' ? 'Selector' : 'Field'}\n          rules={[{ required: props.columnType === 'outputs' }]}\n        >\n          {props.columnType === 'inputs' ? (\n            <CodeEditor variableType={inputVariableType} />\n          ) : (\n            <AutosizeTextArea maxRows={3} />\n          )}\n        </Form.Item>\n        <Form.Item name='defaultValue' label='Default Value'>\n          <Input autoComplete='off' />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n","import { Cascader, Form, Input, Modal } from 'antd';\nimport React, { useEffect, useState } from 'react';\n\nimport type { SchemaSelectProps } from '../../../helpers/components';\nimport { getPath, recursiveSelect } from '../../../helpers/components';\nimport { AutosizeTextArea } from '../../autosize-text-area';\nimport { CodeEditor } from '../../code-editor';\nimport type { ColumnType, TableSchemaItem } from '../context/dt-store.context';\nimport { useDecisionTableState } from '../context/dt-store.context';\n\nexport type FieldUpdateProps = {\n  id?: string;\n  field?: TableSchemaItem;\n  onSuccess?: (column: TableSchemaItem) => void;\n  onDismiss?: () => void;\n  isOpen?: boolean;\n  schema?: SchemaSelectProps[];\n  columnType?: ColumnType;\n  getContainer?: () => HTMLElement;\n};\n\nexport const FieldUpdate: React.FC<React.PropsWithChildren<FieldUpdateProps>> = (props) => {\n  const { isOpen, onDismiss, onSuccess, field, schema, getContainer } = props;\n  const { inputVariableType } = useDecisionTableState(({ inputVariableType }) => ({ inputVariableType }));\n  const [form] = Form.useForm();\n\n  const [selectorValue, setSelectorValue] = useState<(string | number)[]>();\n\n  useEffect(() => {\n    if (isOpen) {\n      form.resetFields();\n      form.setFieldsValue({\n        name: field?.name,\n        field: field?.field,\n        defaultValue: field?.defaultValue,\n      });\n      setSelectorValue(getPath(field?.field as string, schema as SchemaSelectProps[]));\n    }\n  }, [isOpen, form, field, schema]);\n\n  return (\n    <Modal\n      title='Update column'\n      open={isOpen}\n      onCancel={onDismiss}\n      destroyOnClose\n      okText='Update'\n      okButtonProps={{\n        form: 'field-update-dialog',\n        htmlType: 'submit',\n      }}\n      width={360}\n      getContainer={getContainer}\n    >\n      <Form\n        id='field-update-dialog'\n        form={form}\n        layout='vertical'\n        requiredMark={false}\n        initialValues={{\n          name: field?.name,\n          field: field?.field,\n          defaultValue: field?.defaultValue,\n        }}\n        onFinish={(data) => {\n          onSuccess?.({\n            ...field,\n            ...data,\n            field: data?.field?.trim?.()?.length > 0 ? data?.field : undefined,\n          });\n        }}\n      >\n        {schema && (\n          <Form.Item label={'Choose from list'}>\n            <Cascader\n              fieldNames={{ label: 'name', value: 'field', children: 'items' }}\n              options={schema}\n              value={selectorValue}\n              onChange={(val) => {\n                setSelectorValue(val);\n                const field = recursiveSelect(val as string[], schema);\n                if (field) {\n                  form.setFieldsValue({\n                    name: field?.name,\n                    field: field?.field,\n                  });\n                }\n              }}\n            ></Cascader>\n          </Form.Item>\n        )}\n        <Form.Item name='name' label='Label' rules={[{ required: true }]}>\n          <Input />\n        </Form.Item>\n        <Form.Item name='field' label='Selector' rules={[{ required: props.columnType === 'outputs' }]}>\n          {props.columnType === 'inputs' ? (\n            <CodeEditor variableType={inputVariableType} />\n          ) : (\n            <AutosizeTextArea maxRows={3} />\n          )}\n        </Form.Item>\n        <Form.Item name='defaultValue' label='Default Value'>\n          <Input autoComplete='off' />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n","import { Card, Form, Modal, Typography } from 'antd';\nimport React, { useEffect, useRef, useState } from 'react';\nimport type { XYCoord } from 'react-dnd';\nimport { useDrag, useDrop } from 'react-dnd';\n\nimport { Stack } from '../../stack';\nimport type { TableSchemaItem } from '../context/dt-store.context';\n\nexport type FieldsReorderProps = {\n  fields?: TableSchemaItem[];\n  onSuccess?: (columns: TableSchemaItem[]) => void;\n  onDismiss?: () => void;\n  isOpen?: boolean;\n  getContainer?: () => HTMLElement;\n};\n\ninterface DragItem {\n  index: number;\n  id: string;\n  type: string;\n}\n\nconst FieldCard: React.FC<{\n  col: TableSchemaItem;\n  index: number;\n  moveCard: (dragIndex: number, hoverIndex: number) => void;\n}> = ({ col, index, moveCard }) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const [, drop] = useDrop<DragItem, void>({\n    accept: 'col',\n    collect(monitor) {\n      return {\n        handlerId: monitor.getHandlerId(),\n      };\n    },\n    hover(item: DragItem, monitor) {\n      if (!ref.current) {\n        return;\n      }\n      const dragIndex = item.index;\n      const hoverIndex = index;\n\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n\n      const hoverBoundingRect = ref.current?.getBoundingClientRect();\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n\n      const clientOffset = monitor.getClientOffset();\n      const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top;\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n\n      moveCard(dragIndex, hoverIndex);\n      item.index = hoverIndex;\n    },\n  });\n\n  const [{ isDragging }, drag] = useDrag({\n    type: 'col',\n    item: () => {\n      return { id: col.id, index };\n    },\n    collect: (monitor: any) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  drag(drop(ref));\n  return (\n    <Card ref={ref} style={{ opacity: isDragging ? 0 : 1 }} bodyStyle={{ padding: '0.5rem' }}>\n      <div className='grl-dt__fields-reorder__item'>\n        <Stack horizontal verticalAlign='center'>\n          <div className='grl-dt__fields-reorder__handle'>=</div>\n          <Stack grow gap={0}>\n            <Typography.Text>{col.name}</Typography.Text>\n            <Typography.Text type='secondary' style={{ fontSize: 12 }}>\n              {col.field}\n            </Typography.Text>\n          </Stack>\n        </Stack>\n      </div>\n    </Card>\n  );\n};\n\nexport const FieldsReorder: React.FC<FieldsReorderProps> = (props) => {\n  const { isOpen, onDismiss, onSuccess, fields, getContainer } = props;\n\n  const [columns, setColumns] = useState<TableSchemaItem[]>([]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setColumns([...(fields || [])]);\n    }\n  }, [isOpen, fields]);\n\n  const moveCard = (from: number, to?: number) => {\n    if (to === undefined) {\n      return;\n    }\n\n    const tmpList = [...columns];\n    const element = tmpList.splice(from, 1)[0];\n    tmpList.splice(to, 0, element);\n    setColumns(tmpList);\n  };\n\n  return (\n    <Modal\n      title='Reorder fields'\n      open={isOpen}\n      onCancel={onDismiss}\n      width={360}\n      destroyOnClose\n      bodyStyle={{ paddingTop: 17 }}\n      okText='Update'\n      okButtonProps={{\n        htmlType: 'submit',\n        form: 'fields-reorder-dialog',\n      }}\n      getContainer={getContainer}\n    >\n      <Form id='fields-reorder-dialog' onFinish={() => onSuccess?.(columns)}>\n        <Stack gap={8} horizontalAlign='stretch'>\n          {columns.map((column, index) => (\n            <FieldCard key={column.id} col={column} index={index} moveCard={moveCard} />\n          ))}\n        </Stack>\n      </Form>\n    </Modal>\n  );\n};\n","import React from 'react';\n\nimport { useDecisionTableDialog } from '../context/dt-dialog.context';\nimport { type TableSchemaItem, useDecisionTableActions, useDecisionTableState } from '../context/dt-store.context';\nimport { FieldAdd } from './field-add-dialog';\nimport { FieldUpdate } from './field-update-dialog';\nimport { FieldsReorder } from './fields-reorder-dialog';\n\nexport const DecisionTableDialogs: React.FC = () => {\n  const { dialog, setDialog, isDialogActive, getContainer } = useDecisionTableDialog();\n\n  const id = 'test';\n  const tableActions = useDecisionTableActions();\n  const { decisionTableFields, inputsSchema, outputsSchema } = useDecisionTableState(\n    ({ decisionTable, inputsSchema, outputsSchema }) => ({\n      decisionTableFields: dialog?.columnType ? decisionTable[dialog.columnType] : undefined,\n      inputsSchema,\n      outputsSchema,\n    }),\n  );\n\n  return (\n    <>\n      <FieldAdd\n        id={id}\n        columnType={dialog?.columnType}\n        isOpen={isDialogActive('add')}\n        schema={dialog?.columnType === 'inputs' ? inputsSchema : outputsSchema}\n        onDismiss={() => setDialog(undefined)}\n        onSuccess={(data: TableSchemaItem) => {\n          if (!dialog) return;\n          tableActions.addColumn(dialog.columnType, data);\n          setDialog(undefined);\n        }}\n        getContainer={getContainer}\n      />\n      <FieldUpdate\n        id={id}\n        columnType={dialog?.columnType}\n        isOpen={isDialogActive('edit')}\n        schema={dialog?.columnType === 'inputs' ? inputsSchema : outputsSchema}\n        field={dialog?.item as TableSchemaItem}\n        onDismiss={() => setDialog(undefined)}\n        onSuccess={(data) => {\n          if (!dialog) return;\n          tableActions.updateColumn(dialog.columnType, data.id, data);\n          setDialog(undefined);\n        }}\n        getContainer={getContainer}\n      />\n      <FieldsReorder\n        isOpen={isDialogActive('reorder')}\n        fields={decisionTableFields}\n        onDismiss={() => setDialog(undefined)}\n        onSuccess={(data) => {\n          if (!dialog) return;\n          tableActions.reorderColumns(dialog.columnType, data);\n          setDialog(undefined);\n        }}\n        getContainer={getContainer}\n      />\n    </>\n  );\n};\n","import {\n  ArrowDownOutlined,\n  ArrowUpOutlined,\n  CloseOutlined,\n  DeleteOutlined,\n  ExportOutlined,\n  ImportOutlined,\n} from '@ant-design/icons';\nimport { Button, Divider, Popconfirm, Tooltip, message } from 'antd';\nimport React, { useRef } from 'react';\n\nimport { exportExcelFile, readFromExcel } from '../../helpers/excel-file-utils';\nimport type { DecisionNode } from '../decision-graph';\nimport { DiffSelect } from '../shared';\nimport { Stack } from '../stack';\nimport {\n  type HitPolicy,\n  type TableExportOptions,\n  useDecisionTableActions,\n  useDecisionTableRaw,\n  useDecisionTableState,\n} from './context/dt-store.context';\n\nexport const DecisionTableCommandBar: React.FC = () => {\n  const tableActions = useDecisionTableActions();\n  const { disableHitPolicy, disabled, configurable, hitPolicy, diffHitPolicy, cursor } = useDecisionTableState(\n    ({ disableHitPolicy, disabled, configurable, decisionTable, cursor }) => ({\n      disableHitPolicy,\n      disabled,\n      configurable,\n      cursor,\n      hitPolicy: decisionTable.hitPolicy,\n      diffHitPolicy: decisionTable?._diff?.fields?.hitPolicy,\n    }),\n  );\n\n  const { listenerStore, stateStore } = useDecisionTableRaw();\n  const fileInput = useRef<HTMLInputElement>(null);\n\n  const exportExcel = async (options: TableExportOptions) => {\n    const { name } = options;\n\n    try {\n      const decisionTable = stateStore.getState().decisionTable;\n      await exportExcelFile(name, [{ ...decisionTable, name: 'decision table', id: crypto.randomUUID() }]);\n      message.success('Excel file has been downloaded successfully!');\n    } catch {\n      message.error('Failed to download Excel file!');\n    }\n  };\n\n  const importExcel = () => {\n    fileInput?.current?.click?.();\n  };\n\n  const readExcelFile = async (event: any) => {\n    const file = event?.target?.files[0];\n    const reader = new FileReader();\n\n    try {\n      reader.readAsArrayBuffer(file);\n      reader.onload = async () => {\n        const buffer = reader.result as ArrayBuffer;\n\n        if (!buffer) return;\n\n        const nodes: DecisionNode[] = await readFromExcel(buffer);\n        const newTable = nodes[0].content;\n\n        tableActions.setDecisionTable(newTable);\n        listenerStore.getState().onChange?.(newTable);\n      };\n      message.success('Excel file has been uploaded successfully!');\n    } catch {\n      message.error('Failed to upload Excel!');\n    }\n  };\n\n  return (\n    <>\n      <Stack horizontal horizontalAlign={'space-between'} verticalAlign={'center'} className={'grl-dt__command-bar'}>\n        <Stack gap={8} horizontal className='full-width'>\n          <Button\n            type='text'\n            size={'small'}\n            color='secondary'\n            icon={<ExportOutlined />}\n            onClick={() => exportExcel({ name: 'table' })}\n          >\n            Export Excel\n          </Button>\n          <Button\n            type='text'\n            size={'small'}\n            color='secondary'\n            disabled={disabled}\n            icon={<ImportOutlined />}\n            onClick={() => importExcel()}\n          >\n            Import Excel\n          </Button>\n          {cursor && !disabled && (\n            <>\n              <Divider\n                type={'vertical'}\n                style={{\n                  height: 24,\n                }}\n              />\n              <Tooltip title={'Add row below'}>\n                <Button\n                  type='text'\n                  size={'small'}\n                  color='secondary'\n                  icon={<ArrowDownOutlined />}\n                  onClick={() => tableActions.addRowBelow(cursor?.y)}\n                />\n              </Tooltip>\n              <Tooltip title={'Add row above'}>\n                <Button\n                  type='text'\n                  size={'small'}\n                  color='secondary'\n                  icon={<ArrowUpOutlined />}\n                  onClick={() => tableActions.addRowAbove(cursor?.y)}\n                />\n              </Tooltip>\n              <Tooltip>\n                <Popconfirm title='Remove row?' okText='Remove' onConfirm={() => tableActions.removeRow(cursor?.y)}>\n                  <Button type='text' size={'small'} icon={<DeleteOutlined />} />\n                </Popconfirm>\n              </Tooltip>\n              <Button\n                type='text'\n                size={'small'}\n                color='secondary'\n                icon={<CloseOutlined />}\n                onClick={() => tableActions.setCursor(null)}\n              >\n                Deselect\n              </Button>\n            </>\n          )}\n        </Stack>\n        <DiffSelect\n          displayDiff={diffHitPolicy?.status === 'modified'}\n          style={{ width: 140 }}\n          previousValue={diffHitPolicy?.previousValue}\n          size={'small'}\n          disabled={disabled || !configurable || disableHitPolicy}\n          value={hitPolicy}\n          onSelect={(data) => tableActions.updateHitPolicy(data as HitPolicy)}\n          options={[\n            {\n              key: 'first',\n              label: 'First',\n              value: 'first',\n            },\n            {\n              key: 'collect',\n              label: 'Collect',\n              value: 'collect',\n            },\n          ]}\n        />\n      </Stack>\n      <input\n        multiple\n        hidden\n        accept='.xlsx'\n        type='file'\n        ref={fileInput}\n        onChange={readExcelFile}\n        onClick={(event) => {\n          (event.target as any).value = null;\n        }}\n      />\n    </>\n  );\n};\n","import { createVariableType } from '@gorules/zen-engine-wasm';\nimport equal from 'fast-deep-equal/es6/react';\nimport type React from 'react';\nimport { useEffect, useRef } from 'react';\nimport { useDebouncedCallback } from 'use-debounce';\n\nimport type { SchemaSelectProps } from '../../helpers/components';\nimport { isWasmAvailable } from '../../helpers/wasm';\nimport {\n  type DecisionTableType,\n  parseDecisionTable,\n  useDecisionTableActions,\n  useDecisionTableRaw,\n  useDecisionTableState,\n} from './context/dt-store.context';\nimport type { TableCellProps } from './table/table-default-cell';\n\nexport type DecisionTableEmptyType = {\n  id?: string;\n  defaultValue?: DecisionTableType;\n  value?: DecisionTableType;\n  disabled?: boolean;\n  configurable?: boolean;\n  disableHitPolicy?: boolean;\n  activeRules?: string[];\n  cellRenderer?: (props: TableCellProps) => JSX.Element | null | undefined;\n  inputsSchema?: SchemaSelectProps[];\n  outputsSchema?: SchemaSelectProps[];\n  inputData?: unknown;\n  minColWidth?: number;\n  colWidth?: number;\n  onChange?: (val: DecisionTableType) => void;\n};\nexport const DecisionTableEmpty: React.FC<DecisionTableEmptyType> = ({\n  id,\n  defaultValue,\n  value,\n  disabled = false,\n  configurable = true,\n  disableHitPolicy = false,\n  activeRules,\n  inputsSchema,\n  outputsSchema,\n  inputData,\n  colWidth,\n  minColWidth,\n  cellRenderer,\n  onChange,\n}) => {\n  const mountedRef = useRef(false);\n  const { stateStore, listenerStore } = useDecisionTableRaw();\n  const tableActions = useDecisionTableActions();\n  const { decisionTable } = useDecisionTableState(({ decisionTable }) => ({\n    decisionTable,\n  }));\n\n  const innerChange = useDebouncedCallback((table: DecisionTableType) => {\n    onChange?.(table);\n  }, 100);\n\n  useEffect(() => {\n    stateStore.setState({\n      id,\n      disabled,\n      configurable,\n      disableHitPolicy,\n      activeRules,\n      inputsSchema,\n      outputsSchema,\n      colWidth: colWidth || 200,\n      minColWidth: minColWidth || 150,\n    });\n  }, [id, disabled, configurable, disableHitPolicy, activeRules, inputsSchema, minColWidth, colWidth, outputsSchema]);\n\n  useEffect(() => {\n    listenerStore.setState({\n      cellRenderer,\n      onChange: innerChange,\n    });\n  }, [cellRenderer, innerChange]);\n\n  useEffect(() => {\n    if (mountedRef.current && value !== undefined && !equal(value, decisionTable)) {\n      tableActions.setDecisionTable(parseDecisionTable(value));\n    }\n  }, [value]);\n\n  useEffect(() => {\n    tableActions.setDecisionTable(parseDecisionTable(value === undefined ? defaultValue : value));\n    mountedRef.current = true;\n\n    return () => {\n      const { derivedVariableTypes } = stateStore.getState();\n\n      Object.values(derivedVariableTypes).forEach((vt) => {\n        vt.free();\n      });\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!isWasmAvailable()) {\n      return;\n    }\n\n    stateStore.setState({ inputVariableType: createVariableType(inputData) });\n  }, [inputData]);\n\n  return null;\n};\n","import { Dropdown } from 'antd';\nimport React from 'react';\n\nimport { SpacedText } from '../../spaced-text';\nimport { useDecisionTableActions, useDecisionTableState } from '../context/dt-store.context';\n\nconst ContextMenu: React.FC<React.PropsWithChildren> = (props) => {\n  const { children } = props;\n\n  const tableActions = useDecisionTableActions();\n  const { cursor, disabled } = useDecisionTableState(({ cursor, disabled }) => ({\n    cursor,\n    disabled,\n  }));\n\n  return (\n    <Dropdown\n      destroyPopupOnHide\n      transitionName=''\n      disabled={disabled}\n      overlayStyle={{\n        minWidth: 270,\n      }}\n      menu={{\n        items: [\n          {\n            key: 'addRowAbove',\n            label: <SpacedText left='Add row above' />,\n            onClick: () => {\n              if (cursor) tableActions.addRowAbove(cursor?.y);\n            },\n          },\n          {\n            key: 'addRowBelow',\n            label: <SpacedText left='Add row below' />,\n            onClick: () => {\n              if (cursor) tableActions.addRowBelow(cursor?.y);\n            },\n          },\n          {\n            type: 'divider',\n          },\n          {\n            key: 'remove',\n            label: <SpacedText left='Remove row' />,\n            onClick: () => {\n              if (cursor) tableActions.removeRow(cursor?.y);\n            },\n          },\n        ],\n      }}\n      trigger={['contextMenu']}\n    >\n      {children}\n    </Dropdown>\n  );\n};\n\nexport const TableContextMenu = React.memo(ContextMenu);\n","import type { CellContext } from '@tanstack/react-table';\nimport React, { memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\nimport { P, match } from 'ts-pattern';\n\nimport { columnIdSelector } from '../../../helpers/components';\nimport type { DiffMetadata } from '../../decision-graph';\nimport { DiffAutosizeTextArea } from '../../shared';\nimport { DiffCodeEditor } from '../../shared/diff-ce';\nimport {\n  type TableSchemaItem,\n  useDecisionTableActions,\n  useDecisionTableRaw,\n  useDecisionTableState,\n} from '../context/dt-store.context';\n\nexport type TableDefaultCellProps = {\n  context: CellContext<Record<string, string>, string>;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nexport const TableDefaultCell = memo<TableDefaultCellProps>(({ context, ...props }) => {\n  const {\n    row: { index },\n    column: { id },\n    table,\n  } = context;\n\n  const tableActions = useDecisionTableActions();\n  const { disabled, value, diff } = useDecisionTableState(({ decisionTable, disabled }) => ({\n    value: decisionTable?.rules?.[index]?.[id],\n    diff: (decisionTable?.rules?.[index] as any)?._diff?.fields?.[id],\n    disabled,\n  }));\n\n  const column = useDecisionTableState(\n    columnIdSelector(id),\n    (a, b) => a?.id !== undefined && b?.id !== undefined && a?.id === b?.id,\n  );\n\n  const [inner, setInner] = useState(value);\n  useLayoutEffect(() => {\n    if (inner !== value) {\n      setInner(value);\n    }\n  }, [value]);\n\n  const commit = useCallback(\n    (val: string) => {\n      setInner(val);\n      tableActions.commitData(val, { x: id, y: index });\n    },\n    [tableActions, setInner],\n  );\n\n  return (\n    <div\n      className='cell-wrapper'\n      onFocus={() => tableActions.setCursor({ x: id, y: index })}\n      onContextMenu={() => tableActions.setCursor({ x: id, y: index })}\n      {...props}\n    >\n      {(table.options.meta as any)?.getCell?.({\n        disabled,\n        column,\n        value: inner,\n        diff,\n        onChange: commit,\n      }) || <TableInputCell disabled={disabled} column={column} value={inner} onChange={commit} diff={diff} />}\n    </div>\n  );\n});\n\nexport type TableCellProps = {\n  column?: { colType: string } & TableSchemaItem;\n  value: string;\n  diff?: DiffMetadata;\n  onChange: (value: string) => void;\n  disabled?: boolean;\n};\n\nenum LocalVariableKind {\n  Root,\n  Derived,\n}\n\nconst TableInputCell: React.FC<TableCellProps> = ({ column, value, onChange, disabled, diff }) => {\n  const id = useMemo(() => crypto.randomUUID(), []);\n  const textareaRef = useRef<HTMLTextAreaElement | HTMLDivElement>(null);\n  const raw = useDecisionTableRaw();\n\n  const { inputVariableType, localVariableType } = useDecisionTableState(\n    ({ inputVariableType, derivedVariableTypes }) => ({\n      inputVariableType,\n      localVariableType: match(column)\n        .with({ colType: 'input', field: P.string }, (c) => ({\n          type: LocalVariableKind.Derived,\n          value: derivedVariableTypes[c.field] ?? null,\n        }))\n        .otherwise(() => ({ type: LocalVariableKind.Root, value: inputVariableType })),\n    }),\n  );\n\n  useEffect(() => {\n    if (!inputVariableType) {\n      return;\n    }\n\n    if (!column?.field || localVariableType.type !== LocalVariableKind.Derived) {\n      return;\n    }\n\n    const state = raw.stateStore.getState();\n\n    const resultingType = inputVariableType.clone();\n    const calculatedType = inputVariableType.calculateType(column.field);\n    resultingType.set('$', calculatedType);\n\n    raw.stateStore.setState({\n      derivedVariableTypes: {\n        ...state.derivedVariableTypes,\n        [column.field]: resultingType,\n      },\n    });\n  }, [inputVariableType, column]);\n\n  useEffect(() => {\n    if (!textareaRef.current) {\n      return;\n    }\n\n    const parentContainer = textareaRef.current.closest('div.cell-wrapper')! as HTMLElement;\n    const eventListener = (e: Event) => {\n      if (e.target === textareaRef.current || !textareaRef.current) {\n        return;\n      }\n\n      if ('selectionStart' in textareaRef.current) {\n        textareaRef.current.focus();\n        textareaRef.current.selectionStart = textareaRef.current.value.length;\n      } else {\n        textareaRef.current.querySelector<HTMLDivElement>('.cm-editor')!.focus();\n      }\n    };\n\n    parentContainer.style.cursor = 'text';\n    parentContainer.addEventListener('click', eventListener);\n\n    return () => {\n      parentContainer.style.cursor = '';\n      parentContainer.removeEventListener('click', eventListener);\n    };\n  }, []);\n\n  if (!column) {\n    return (\n      <DiffAutosizeTextArea\n        id={id}\n        ref={textareaRef as any}\n        className='grl-dt__cell__input'\n        maxRows={3}\n        value={value}\n        disabled={disabled}\n        displayDiff={diff?.status === 'modified'}\n        previousValue={diff?.previousValue}\n        spellCheck={false}\n        onChange={(e) => onChange(e.target.value)}\n      />\n    );\n  }\n\n  return (\n    <DiffCodeEditor\n      ref={textareaRef as any}\n      id={id}\n      type={match(column)\n        .with({ colType: 'input', field: P.string }, () => 'unary' as const)\n        .otherwise(() => 'standard' as const)}\n      className='grl-dt__cell__input'\n      noStyle\n      displayDiff={diff?.status === 'modified'}\n      previousValue={diff?.previousValue}\n      variableType={localVariableType.value}\n      maxRows={3}\n      value={value}\n      disabled={disabled}\n      onChange={onChange}\n    />\n  );\n};\n","import { MoreOutlined, PlusOutlined, SwapOutlined } from '@ant-design/icons';\nimport { Button, Dropdown, Modal, Tooltip, Typography } from 'antd';\nimport clsx from 'clsx';\nimport React from 'react';\n\nimport { DiffIcon } from '../../diff-icon';\nimport { Stack } from '../../stack';\nimport { useDecisionTableDialog } from '../context/dt-dialog.context';\nimport { type TableSchemaItem, useDecisionTableActions, useDecisionTableState } from '../context/dt-store.context';\n\nexport type TableHeadCellProps = {\n  configurable?: boolean;\n  disabled?: boolean;\n};\n\nexport type TableHeadCellFieldProps = {\n  configurable?: boolean;\n  disabled?: boolean;\n  schema: TableSchemaItem;\n};\n\nexport const TableHeadCellInput: React.FC<TableHeadCellProps> = ({ configurable, disabled }) => {\n  const inputs = useDecisionTableState((store) => store.decisionTable?.inputs);\n  const { setDialog } = useDecisionTableDialog();\n\n  return (\n    <div className={'head-cell'}>\n      <Stack horizontal horizontalAlign='space-between' verticalAlign='center'>\n        <Stack gap={0} className={'text-wrapper'} verticalAlign={'center'}>\n          <Typography.Text className={'span-overflow grl-dt-text-primary'}>Inputs</Typography.Text>\n        </Stack>\n        {configurable && (\n          <div className={'cta-wrapper'}>\n            {inputs?.length > 1 && (\n              <Tooltip title='Reorder fields'>\n                <Button\n                  className='grl-dt-text-secondary'\n                  icon={<SwapOutlined />}\n                  size={'small'}\n                  type={'text'}\n                  disabled={disabled}\n                  onClick={() => {\n                    setDialog({\n                      type: 'reorder',\n                      columnType: 'inputs',\n                      item: null,\n                    });\n                  }}\n                />\n              </Tooltip>\n            )}\n            <Tooltip title='Add input'>\n              <Button\n                className='grl-dt-text-secondary'\n                size={'small'}\n                type={'text'}\n                icon={<PlusOutlined />}\n                disabled={disabled}\n                onClick={() => {\n                  setDialog({\n                    type: 'add',\n                    columnType: 'inputs',\n                    item: null,\n                  });\n                }}\n              />\n            </Tooltip>\n          </div>\n        )}\n      </Stack>\n    </div>\n  );\n};\n\nexport const TableHeadCellOutput: React.FC<TableHeadCellProps> = ({ configurable, disabled }) => {\n  const outputs = useDecisionTableState((store) => store.decisionTable?.outputs);\n  const { setDialog } = useDecisionTableDialog();\n\n  return (\n    <div className={'head-cell'}>\n      <Stack horizontal horizontalAlign={'space-between'} verticalAlign={'center'}>\n        <Stack gap={0} className={'text-wrapper'} verticalAlign={'center'}>\n          <Typography.Text className={'span-overflow grl-dt-text-primary'}>Outputs</Typography.Text>\n        </Stack>\n        {configurable && (\n          <div className={'cta-wrapper'}>\n            {outputs?.length > 1 && (\n              <Tooltip title='Reorder fields'>\n                <Button\n                  className='grl-dt-text-secondary'\n                  icon={<SwapOutlined />}\n                  size={'small'}\n                  type={'text'}\n                  disabled={disabled}\n                  onClick={() => {\n                    setDialog({\n                      type: 'reorder',\n                      columnType: 'outputs',\n                      item: null,\n                    });\n                  }}\n                />\n              </Tooltip>\n            )}\n            <Tooltip title='Add output'>\n              <Button\n                className='grl-dt-text-secondary'\n                size={'small'}\n                type={'text'}\n                icon={<PlusOutlined />}\n                disabled={disabled}\n                onClick={() => {\n                  setDialog({\n                    type: 'add',\n                    columnType: 'outputs',\n                    item: null,\n                  });\n                }}\n              />\n            </Tooltip>\n          </div>\n        )}\n      </Stack>\n    </div>\n  );\n};\n\nexport const TableHeadCellInputField: React.FC<TableHeadCellFieldProps> = ({ configurable, disabled, schema }) => {\n  const { setDialog, getContainer } = useDecisionTableDialog();\n  const tableActions = useDecisionTableActions();\n\n  return (\n    <div className={clsx(['head-cell'])}>\n      <Stack horizontal horizontalAlign={'space-between'} verticalAlign={'center'}>\n        <Stack gap={0} className={'text-wrapper'}>\n          {schema?._diff?.fields?.name?.status === 'modified' && (\n            <Typography.Text className={clsx(['span-overflow', 'grl-dt-text-primary', 'text-removed'])}>\n              {schema?._diff?.fields?.name?.previousValue}\n            </Typography.Text>\n          )}\n          <Typography.Text className={clsx(['span-overflow', 'grl-dt-text-primary'])}>{schema.name}</Typography.Text>\n          {schema?._diff?.fields?.field?.status && (\n            <Typography.Text\n              className={clsx(['span-overflow', 'grl-dt-text-secondary', 'text-removed'])}\n              type='secondary'\n              style={{ fontSize: 12 }}\n            >\n              {schema?._diff?.fields?.field?.previousValue}\n            </Typography.Text>\n          )}\n          <Typography.Text\n            className={clsx(['span-overflow', 'grl-dt-text-secondary'])}\n            type='secondary'\n            style={{ fontSize: 12 }}\n          >\n            {schema.field}\n          </Typography.Text>\n        </Stack>\n        <Stack\n          horizontal\n          gap={2}\n          verticalAlign={'center'}\n          style={{\n            width: 'auto',\n          }}\n        >\n          <DiffIcon\n            status={schema?._diff?.status}\n            style={{\n              fontSize: 16,\n            }}\n          />\n          {configurable && (\n            <div>\n              <Dropdown\n                trigger={['click']}\n                overlayStyle={{ minWidth: 140 }}\n                disabled={disabled}\n                menu={{\n                  items: [\n                    {\n                      key: 'edit',\n                      label: 'Edit column',\n                      onClick: () => {\n                        setDialog({\n                          type: 'edit',\n                          columnType: 'inputs',\n                          item: schema,\n                        });\n                      },\n                    },\n                    {\n                      key: 'remove',\n                      label: 'Remove column',\n                      onClick: () => {\n                        Modal.confirm({\n                          title: 'Remove column',\n                          icon: false,\n                          getContainer,\n                          content: (\n                            <Typography.Paragraph>\n                              You are about to delete <strong>{schema.name}</strong> column.\n                            </Typography.Paragraph>\n                          ),\n                          okText: 'Remove',\n                          okButtonProps: { danger: true },\n                          onOk: () => tableActions.removeColumn('inputs', schema.id),\n                        });\n                      },\n                    },\n                  ],\n                }}\n              >\n                <Tooltip title='Settings'>\n                  <Button className='grl-dt-text-secondary' type='text' size={'small'} icon={<MoreOutlined />} />\n                </Tooltip>\n              </Dropdown>\n            </div>\n          )}\n        </Stack>\n      </Stack>\n    </div>\n  );\n};\n\nexport const TableHeadCellOutputField: React.FC<TableHeadCellFieldProps> = ({ configurable, disabled, schema }) => {\n  const { setDialog, getContainer } = useDecisionTableDialog();\n  const tableActions = useDecisionTableActions();\n\n  return (\n    <div className={clsx(['head-cell'])}>\n      <Stack horizontal horizontalAlign='space-between' verticalAlign={'center'}>\n        <Stack gap={0} className={'text-wrapper'} verticalAlign={'center'}>\n          {schema?._diff?.fields?.name?.status === 'modified' && (\n            <Typography.Text className={clsx(['span-overflow', 'grl-dt-text-primary', 'text-removed'])}>\n              {schema?._diff?.fields?.name?.previousValue}\n            </Typography.Text>\n          )}\n          <Typography.Text className={'span-overflow grl-dt-text-primary'}>{schema.name}</Typography.Text>\n          {schema?._diff?.fields?.field?.status === 'modified' && (\n            <Typography.Text\n              className={clsx(['span-overflow', 'grl-dt-text-secondary', 'text-removed'])}\n              type='secondary'\n              style={{ fontSize: 12 }}\n            >\n              {schema?._diff?.fields?.field?.previousValue}\n            </Typography.Text>\n          )}\n          <Typography.Text className={'span-overflow grl-dt-text-secondary'} type='secondary' style={{ fontSize: 12 }}>\n            {schema.field}\n          </Typography.Text>\n        </Stack>\n        <Stack\n          horizontal\n          gap={2}\n          verticalAlign={'center'}\n          style={{\n            width: 'auto',\n          }}\n        >\n          <DiffIcon\n            status={schema?._diff?.status}\n            style={{\n              fontSize: 16,\n            }}\n          />\n          {configurable && (\n            <div>\n              <Dropdown\n                trigger={['click']}\n                overlayStyle={{ minWidth: 140 }}\n                disabled={disabled}\n                menu={{\n                  items: [\n                    {\n                      key: 'edit',\n                      label: 'Edit column',\n                      onClick: () => {\n                        setDialog({\n                          type: 'edit',\n                          columnType: 'outputs',\n                          item: schema,\n                        });\n                      },\n                    },\n                    {\n                      key: 'remove',\n                      label: 'Remove column',\n                      onClick: () => {\n                        Modal.confirm({\n                          title: 'Remove column',\n                          content: (\n                            <Typography.Paragraph>\n                              You are about to delete <strong>{schema.name}</strong> column.\n                            </Typography.Paragraph>\n                          ),\n                          getContainer,\n                          icon: false,\n                          okText: 'Remove',\n                          okButtonProps: {\n                            danger: true,\n                          },\n                          onOk: () => tableActions.removeColumn('outputs', schema.id),\n                        });\n                      },\n                    },\n                  ],\n                }}\n              >\n                <Tooltip title='Settings'>\n                  <Button className='grl-dt-text-secondary' type='text' size={'small'} icon={<MoreOutlined />} />\n                </Tooltip>\n              </Dropdown>\n            </div>\n          )}\n        </Stack>\n      </Stack>\n    </div>\n  );\n};\n","import type { HeaderGroup } from '@tanstack/react-table';\nimport { flexRender } from '@tanstack/react-table';\nimport clsx from 'clsx';\nimport React from 'react';\nimport { match } from 'ts-pattern';\n\nexport const TableHeadRow: React.FC<{ headerGroup: HeaderGroup<any> }> = ({ headerGroup }) => (\n  <tr key={headerGroup.id}>\n    <th colSpan={1} style={{ width: 72 }} />\n    {headerGroup.headers.map((header) => {\n      const context = header.getContext();\n      const parent = context.header.column.parent?.id;\n\n      const parentKind = match(parent)\n        .with('inputs', () => 'input')\n        .with('outputs', () => 'output')\n        .otherwise(() => undefined);\n\n      const selfKind = match(context.column.id)\n        .with('inputs', () => 'input')\n        .with('outputs', () => 'output')\n        .with('_description', () => 'description')\n        .otherwise(() => undefined);\n\n      return (\n        <th\n          key={header.id}\n          colSpan={header.colSpan}\n          data-self={selfKind}\n          data-parent={parentKind}\n          style={{\n            width: header.getSize(),\n          }}\n        >\n          {!header.isPlaceholder && flexRender(header.column.columnDef.header, context)}\n          {header.column.getCanResize() && (\n            <div\n              className={clsx('resizer', header.column.getIsResizing() && 'isResizing')}\n              onMouseDown={header.getResizeHandler()}\n              onTouchStart={header.getResizeHandler()}\n            />\n          )}\n        </th>\n      );\n    })}\n  </tr>\n);\n","import type { Row } from '@tanstack/react-table';\nimport { flexRender } from '@tanstack/react-table';\nimport type { VirtualItem } from '@tanstack/react-virtual';\nimport { Typography } from 'antd';\nimport clsx from 'clsx';\nimport React, { useEffect, useMemo, useRef } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\n\nimport type { DiffMetadata } from '../../decision-graph';\nimport { useDecisionTableActions, useDecisionTableState } from '../context/dt-store.context';\n\nexport const TableRow: React.FC<{\n  row: Row<Record<string, string>>;\n  disabled?: boolean;\n  virtualItem: VirtualItem;\n  onResize?: (node: HTMLElement) => void;\n}> = ({ row, disabled, virtualItem, onResize }) => {\n  const trRef = useRef<HTMLTableRowElement>(null);\n  const tableActions = useDecisionTableActions();\n  const { cursor, isActive } = useDecisionTableState(({ cursor, activeRules }) => ({\n    cursor,\n    isActive: Array.isArray(activeRules) && activeRules.includes(row.id),\n  }));\n\n  const [{ isDropping, direction }, dropRef] = useDrop({\n    accept: 'row',\n    collect: (monitor) => ({\n      isDropping: monitor.isOver({ shallow: true }),\n      direction: (monitor.getDifferenceFromInitialOffset()?.y || 0) > 0 ? 'down' : 'up',\n    }),\n    drop: (draggedRow: Row<Record<string, string>>) => tableActions.swapRows(draggedRow.index, row.index),\n  });\n\n  const [{ isDragging }, dragRef, previewRef] = useDrag({\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n    item: () => row,\n    type: 'row',\n  });\n\n  previewRef(dropRef(trRef));\n\n  useEffect(() => {\n    if (!trRef.current) {\n      return;\n    }\n\n    onResize?.(trRef.current);\n    const resizeObserver = new ResizeObserver((entries) => {\n      entries.forEach((entry) => {\n        if (!entry.target.hasAttribute('data-virtual-index')) {\n          return;\n        }\n\n        onResize?.(entry.target as HTMLElement);\n      });\n    });\n\n    resizeObserver.observe(trRef.current);\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  const { rowValue } = useDecisionTableState(({ decisionTable }) => ({\n    rowValue: (decisionTable?.rules || [])?.find((rule) => rule._id === row?.original?._id),\n  }));\n\n  const diff = useMemo(() => {\n    return rowValue?._diff as DiffMetadata;\n  }, [rowValue]);\n  const diffStatus = diff?.status;\n\n  return (\n    <tr\n      ref={trRef}\n      className={clsx(\n        'table-row',\n        isDropping && direction === 'down' && 'dropping-down',\n        isDropping && direction === 'up' && 'dropping-up',\n        !diffStatus && isActive && 'active',\n        !diffStatus && disabled && 'disabled',\n        !diffStatus && cursor?.y === virtualItem.index && !disabled && 'selected',\n        diffStatus && `diff-${diffStatus}`,\n      )}\n      style={{\n        opacity: isDragging ? 0.5 : 1,\n      }}\n      data-virtual-index={virtualItem.index}\n    >\n      <td\n        className={clsx('sort-handler', !disabled && 'draggable', diffStatus && 'diff')}\n        ref={disabled ? undefined : dragRef}\n        onContextMenuCapture={() => tableActions.setCursor({ x: 'id', y: virtualItem.index })}\n      >\n        <div className={'text'}>\n          <Typography>{virtualItem.index + 1}</Typography>\n        </div>\n      </td>\n      {row.getVisibleCells().map((cell) => (\n        <td\n          key={cell.id}\n          className={clsx(\n            !disabled && cursor?.x === cell.column.id && cursor?.y === virtualItem.index && 'selected',\n            diff?.fields?.[cell?.column?.id]?.status && `diff-${diff?.fields?.[cell?.column?.id]?.status}`,\n          )}\n          style={{ width: cell.column.getSize() }}\n        >\n          {flexRender(cell.column.columnDef.cell, cell.getContext())}\n        </td>\n      ))}\n    </tr>\n  );\n};\n","import { PlusCircleOutlined } from '@ant-design/icons';\nimport type { ColumnDef, Table as ReactTable } from '@tanstack/react-table';\nimport { getCoreRowModel, useReactTable } from '@tanstack/react-table';\nimport { useVirtualizer } from '@tanstack/react-virtual';\nimport { Button, Typography, theme } from 'antd';\nimport clsx from 'clsx';\nimport equal from 'fast-deep-equal/es6/react';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { z } from 'zod';\n\nimport { useDecisionTableActions, useDecisionTableListeners, useDecisionTableState } from '../context/dt-store.context';\nimport { TableContextMenu } from './table-context-menu';\nimport { TableDefaultCell } from './table-default-cell';\nimport {\n  TableHeadCellInput,\n  TableHeadCellInputField,\n  TableHeadCellOutput,\n  TableHeadCellOutputField,\n} from './table-head-cell';\nimport { TableHeadRow } from './table-head-row';\nimport { TableRow } from './table-row';\n\nexport type TableProps = {\n  id?: string;\n  maxHeight: string | number;\n};\n\ntype ColumnSizing = Record<string, number>;\n\nconst columnSizeKey = (id: string) => `jdm-editor:decisionTable:columns:${id}`;\n\nconst loadColumnSizing = (id?: string) => {\n  if (!id) {\n    return {};\n  }\n\n  try {\n    const sizeData = localStorage.getItem(columnSizeKey(id));\n    const jsonData = JSON.parse(sizeData ?? '{}');\n    return z.record(z.string(), z.number()).parse(jsonData);\n  } catch {\n    return {};\n  }\n};\n\nexport const Table: React.FC<TableProps> = ({ id, maxHeight }) => {\n  const { token } = theme.useToken();\n\n  const tableActions = useDecisionTableActions();\n  const { cellRenderer } = useDecisionTableListeners(({ cellRenderer }) => ({ cellRenderer }));\n  const [columnSizing, setColumnSizing] = useState<ColumnSizing>(() => loadColumnSizing(id));\n\n  const { configurable, disabled, inputs, outputs, colWidth, minColWidth } = useDecisionTableState(\n    ({ configurable, disabled, minColWidth, colWidth, decisionTable }) => ({\n      configurable,\n      disabled,\n      minColWidth,\n      colWidth,\n      inputs: decisionTable.inputs,\n      outputs: decisionTable.outputs,\n    }),\n  );\n\n  const { rules } = useDecisionTableState(\n    ({ decisionTable }) => ({\n      rules: decisionTable.rules,\n    }),\n    (prev, curr) =>\n      equal(\n        prev.rules.map((i: any) => i?._id),\n        curr.rules.map((i: any) => i?._id),\n      ),\n  );\n\n  const columns = React.useMemo<ColumnDef<any>[]>(\n    () => [\n      {\n        id: 'inputs',\n        minSize: minColWidth,\n        size: colWidth,\n        enableResizing: true,\n        header: () => <TableHeadCellInput configurable={configurable} disabled={disabled} />,\n        columns: [\n          ...(inputs || []).map((input: any) => {\n            return {\n              accessorKey: input.id,\n              id: input.id,\n              minSize: minColWidth,\n              size: colWidth,\n              header: () => <TableHeadCellInputField schema={input} configurable={configurable} disabled={disabled} />,\n            };\n          }),\n        ],\n      },\n      {\n        id: 'outputs',\n        minSize: minColWidth,\n        size: minColWidth,\n        header: () => <TableHeadCellOutput disabled={disabled} configurable={configurable} />,\n        columns: [\n          ...(outputs || []).map((output: any) => {\n            return {\n              accessorKey: output.id,\n              minSize: minColWidth,\n              size: colWidth,\n              header: () => (\n                <TableHeadCellOutputField schema={output} configurable={configurable} disabled={disabled} />\n              ),\n            };\n          }),\n        ],\n      },\n      {\n        id: '_description',\n        accessorKey: '_description',\n        header: () => (\n          <div className={'head-cell'}>\n            <Typography.Text className='grl-dt-text-primary'>Description</Typography.Text>\n          </div>\n        ),\n        minSize: minColWidth,\n        size: colWidth,\n      },\n    ],\n    [configurable, disabled, inputs, outputs],\n  );\n\n  const table = useReactTable({\n    data: rules,\n    columnResizeMode: 'onChange',\n    getRowId: (row) => row._id,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    defaultColumn: {\n      cell: (context) => <TableDefaultCell context={context} />,\n    },\n    meta: {\n      getCell: cellRenderer,\n    },\n    ...(!id\n      ? {}\n      : {\n          state: { columnSizing },\n          onColumnSizingChange: setColumnSizing,\n        }),\n  });\n\n  const tableContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!tableContainerRef.current) {\n      return;\n    }\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      for (const entry of entries) {\n        if (entry.target instanceof HTMLDivElement) {\n          entry.target.style.setProperty('--dt-container-width', `${entry.contentRect.width}px`);\n        }\n      }\n    });\n\n    resizeObserver.observe(tableContainerRef.current);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n\n    setColumnSizing(loadColumnSizing(id));\n  }, [id]);\n\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n\n    localStorage.setItem(columnSizeKey(id), JSON.stringify(columnSizing));\n  }, [columnSizing]);\n\n  return (\n    <div\n      ref={tableContainerRef}\n      className='grl-dt__container'\n      style={{ maxHeight, overflowY: 'auto' }}\n      data-theme={token.mode}\n    >\n      <StyledTable width={table.getCenterTotalSize()}>\n        <thead>\n          {table\n            .getHeaderGroups()\n            .filter((_, i) => i === 0)\n            .map((headerGroup) => (\n              <TableHeadRow key={headerGroup.id} headerGroup={headerGroup} />\n            ))}\n        </thead>\n      </StyledTable>\n      <StyledTable width={table.getCenterTotalSize()}>\n        <thead>\n          {table\n            .getHeaderGroups()\n            .filter((_, i) => i === 1)\n            .map((headerGroup) => (\n              <TableHeadRow key={headerGroup.id} headerGroup={headerGroup} />\n            ))}\n        </thead>\n        <TableContextMenu>\n          <TableBody tableContainerRef={tableContainerRef} table={table} />\n        </TableContextMenu>\n        <tfoot>\n          <tr>\n            <td colSpan={inputs.length + outputs.length + 2}>\n              <div className='grl-dt__add-row-wrapper'>\n                <Button\n                  className='grl-dt__add-row'\n                  type='link'\n                  disabled={disabled}\n                  icon={<PlusCircleOutlined />}\n                  onClick={() => tableActions.addRowBelow()}\n                >\n                  Add row\n                </Button>\n              </div>\n            </td>\n          </tr>\n        </tfoot>\n      </StyledTable>\n    </div>\n  );\n};\n\ntype TableBodyProps = {\n  tableContainerRef: React.RefObject<HTMLDivElement>;\n  table: ReactTable<any>;\n} & Omit<React.HTMLAttributes<HTMLTableSectionElement>, 'children'>;\n\nconst TableBody = React.forwardRef<HTMLTableSectionElement, TableBodyProps>(\n  ({ table, tableContainerRef, ...props }, ref) => {\n    const tableActions = useDecisionTableActions();\n    const { disabled, cursor } = useDecisionTableState(({ disabled, cursor }) => ({\n      disabled,\n      cursor,\n    }));\n\n    const { rows } = table.getRowModel();\n    const virtualizer = useVirtualizer({\n      getScrollElement: () => tableContainerRef.current,\n      estimateSize: () => 38,\n      indexAttribute: 'data-virtual-index',\n      count: rows.length,\n      overscan: 5,\n    });\n\n    const virtualItems = virtualizer.getVirtualItems();\n    const totalSize = virtualizer.getTotalSize();\n\n    const paddingTop = virtualItems.length > 0 ? virtualItems?.[0]?.start || 0 : 0;\n    const paddingBottom = virtualItems.length > 0 ? totalSize - (virtualItems?.[virtualItems.length - 1]?.end || 0) : 0;\n\n    const onKeyDown = useCallback((e: React.KeyboardEvent) => {\n      if (disabled) {\n        return;\n      }\n\n      if (e.code === 'ArrowUp' && (e.metaKey || e.altKey)) {\n        if (cursor) tableActions.addRowAbove(cursor.y);\n      }\n      if (e.code === 'ArrowDown' && (e.metaKey || e.altKey)) {\n        if (cursor) tableActions.addRowBelow(cursor.y);\n      }\n      if (e.code === 'Backspace' && (e.metaKey || e.altKey)) {\n        if (cursor) tableActions.removeRow(cursor.y);\n      }\n    }, []);\n\n    return (\n      <tbody ref={ref} {...props} onKeyDown={onKeyDown}>\n        {paddingTop > 0 && (\n          <tr>\n            <td style={{ height: `${paddingTop}px` }} />\n          </tr>\n        )}\n        {virtualItems.map((item) => {\n          const row = rows[item.index];\n\n          return (\n            <TableRow\n              key={item.key}\n              virtualItem={item}\n              row={row}\n              disabled={disabled}\n              onResize={(node) => virtualizer.measureElement(node)}\n            />\n          );\n        })}\n        {paddingBottom > 0 && (\n          <tr>\n            <td style={{ height: `${paddingBottom}px` }} />\n          </tr>\n        )}\n      </tbody>\n    );\n  },\n);\n\nconst StyledTable: React.FC<React.HTMLAttributes<HTMLTableElement> & { width: number }> = ({\n  style,\n  className,\n  width,\n  ...props\n}) => {\n  return <table className={clsx('table', className)} style={{ width, ...style }} {...props} />;\n};\n","import { theme } from 'antd';\nimport type { DragDropManager } from 'dnd-core';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nimport { DecisionTableDialogProvider } from './context/dt-dialog.context';\nimport type { DecisionTableContextProps } from './context/dt-store.context';\nimport { DecisionTableProvider } from './context/dt-store.context';\nimport { DecisionTableDialogs } from './dialog/dt-dialogs';\nimport { DecisionTableCommandBar } from './dt-command-bar';\nimport type { DecisionTableEmptyType } from './dt-empty';\nimport { DecisionTableEmpty } from './dt-empty';\nimport './dt.scss';\nimport { Table } from './table/table';\n\nexport type DecisionTableProps = {\n  id?: string;\n  tableHeight: string | number;\n  mountDialogsOnBody?: boolean;\n  manager?: DragDropManager;\n  inputData?: unknown;\n} & DecisionTableContextProps &\n  DecisionTableEmptyType;\n\nexport const DecisionTable: React.FC<DecisionTableProps> = ({\n  id,\n  tableHeight,\n  mountDialogsOnBody = false,\n  manager,\n  ...props\n}) => {\n  const { token } = theme.useToken();\n\n  const [_, setMounted] = useState(false);\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  const getContainer = () => ref.current as HTMLElement;\n\n  const dndProps = useMemo(() => {\n    if (manager) {\n      return {\n        manager,\n      };\n    }\n\n    return {\n      backend: HTML5Backend,\n      options: {\n        rootElement: ref.current,\n      },\n    };\n  }, [ref.current, manager]);\n\n  return (\n    <div ref={ref} className={'grl-dt'} style={{ background: token.colorBgElevated }}>\n      {ref.current && (\n        <DndProvider {...dndProps}>\n          <DecisionTableProvider>\n            <DecisionTableDialogProvider getContainer={mountDialogsOnBody ? undefined : getContainer}>\n              <DecisionTableCommandBar />\n              <Table id={id} maxHeight={tableHeight} />\n              <DecisionTableDialogs />\n              <DecisionTableEmpty {...props} />\n            </DecisionTableDialogProvider>\n          </DecisionTableProvider>\n        </DndProvider>\n      )}\n    </div>\n  );\n};\n","export default \"data:image/svg+xml,%3csvg%20id='fi_5968381'%20enable-background='new%200%200%20512%20512'%20height='512'%20viewBox='0%200%20512%20512'%20width='512'%20xmlns='http://www.w3.org/2000/svg'%3e%3cg%3e%3cpath%20d='m50%200h412c27.614%200%2050%2022.386%2050%2050v412c0%2027.614-22.386%2050-50%2050h-412c-27.614%200-50-22.386-50-50v-412c0-27.614%2022.386-50%2050-50z'%20fill='%233178c6'%3e%3c/path%3e%3cpath%20d='m50%200h412c27.614%200%2050%2022.386%2050%2050v412c0%2027.614-22.386%2050-50%2050h-412c-27.614%200-50-22.386-50-50v-412c0-27.614%2022.386-50%2050-50z'%20fill='%233178c6'%3e%3c/path%3e%3cpath%20clip-rule='evenodd'%20d='m316.939%20407.424v50.061c8.138%204.172%2017.763%207.3%2028.875%209.386s22.823%203.129%2035.135%203.129c21.219%200%2044.448-3.035%2062.602-14.784%2018.064-11.691%2026.449-31.14%2026.449-52.172%200-15.637-4.851-30.684-15.807-42.081-16.429-17.091-39.516-24.022-60.255-34.183-10.389-5.09-24.727-12.992-24.727-26.361%200-3.441.887-6.543%202.661-9.307%207.132-11.113%2022.973-13.376%2035.057-13.376%2013.717%200%2028.189%203.071%2040.926%208.76%204.434%201.982%208.529%204.276%2012.285%206.884v-46.776c-7.616-2.92-15.937-5.084-24.962-6.492s-19.381-2.112-31.066-2.112c-11.895%200-23.163%201.278-33.805%203.833s-20.006%206.544-28.093%2011.967c-8.086%205.424-14.476%2012.333-19.171%2020.729-4.695%208.395-7.043%2018.433-7.043%2030.114%200%2014.914%204.304%2027.638%2012.912%2038.172%208.607%2010.533%2021.675%2019.45%2039.204%2026.751%2011.792%204.822%2024.053%209.581%2034.665%2016.739%207.355%204.96%2014.007%2011.877%2014.007%2021.275%200%206.821-3.856%2012.604-9.468%2016.192-8.303%205.308-18.936%206.492-28.563%206.492-10.851%200-21.597-1.903-32.24-5.71-10.641-3.806-20.501-9.516-29.578-17.13zm-84.159-123.342h64.22v-41.082h-179v41.082h63.906v182.918h50.874z'%20fill='%23fff'%20fill-rule='evenodd'%3e%3c/path%3e%3c/g%3e%3c/svg%3e\"","import { Dropdown, Tooltip, message, theme } from 'antd';\nimport React from 'react';\nimport { JSONTree } from 'react-json-tree';\n\nimport { copyToClipboard } from '../../helpers/utility';\n\nexport type FunctionDebuggerLogProps = {\n  lines: string[];\n  msSinceRun: number | null;\n};\n\ntype JsonTheme = {\n  string: string;\n  constants: string;\n  number: string;\n  type: string;\n  error: string;\n  info: string;\n};\n\nconst themes: Record<'dark' | 'light', JsonTheme> = {\n  dark: {\n    string: '#CE9178',\n    number: '#B5CEA8',\n    constants: '#569CD6',\n    type: '#3DC9B0',\n    error: '#E51400',\n    info: 'rgba(0, 0, 0, 0.65)',\n  },\n  light: {\n    string: '#A31515',\n    number: '#098658',\n    constants: '#0000FF',\n    type: '#008080',\n    error: '#E51400',\n    info: 'rgba(0, 0, 0, 0.65)',\n  },\n};\n\nexport const FunctionDebuggerLog: React.FC<FunctionDebuggerLogProps> = ({ lines, msSinceRun }) => {\n  const { token } = theme.useToken();\n  const jsonTheme = themes[token.mode ?? 'light'];\n\n  return (\n    <div className='grl-function__debugger__log'>\n      <Dropdown\n        trigger={['contextMenu']}\n        menu={{\n          items: [\n            {\n              key: 'copy',\n              label: 'Copy to clipboard',\n              onClick: async () => {\n                await copyToClipboard(lines.length === 1 ? lines[0] : `[${lines.join(', ')}]`);\n                message.success('Copied to clipboard');\n              },\n            },\n          ],\n        }}\n      >\n        <div className='grl-function__debugger__log__values'>\n          {lines.map((line, i) => {\n            const data = JSON.parse(line);\n\n            return (\n              <JSONTree\n                key={i}\n                data={data}\n                shouldExpandNodeInitially={() => false}\n                labelRenderer={(keyPath: readonly (string | number)[], nodeType) => {\n                  const parts: React.ReactNode[] = [];\n\n                  const lastPart = keyPath?.[0];\n                  if (lastPart !== 'root') {\n                    parts.push(\n                      <>\n                        <span style={{ color: jsonTheme.constants }}>{lastPart}</span>\n                        {': '}\n                      </>,\n                    );\n                  }\n\n                  if (keyPath.length >= 1) {\n                    let paths = [...keyPath];\n                    paths.pop();\n                    paths = paths.reverse();\n\n                    parts.push(objectRenderer(jsonTheme)(lens(data, paths), nodeType));\n                  }\n\n                  return <>{parts}</>;\n                }}\n                valueRenderer={valueRenderer(jsonTheme)}\n                theme={{\n                  base00: token.colorBgElevated,\n                  base03: token.colorTextBase,\n                  base0B: token.colorTextBase,\n                  base0D: token.colorTextBase,\n                }}\n              />\n            );\n          })}\n        </div>\n      </Dropdown>\n      <div className='grl-function__debugger__log__time'>\n        {msSinceRun !== null && <Tooltip title='Time since start of execution of script.'>{msSinceRun}ms</Tooltip>}\n      </div>\n    </div>\n  );\n};\n\nconst objectRenderer =\n  (jsonTheme: JsonTheme) =>\n  (data: any, nodeType: string): React.ReactNode => {\n    if (nodeType === 'Object') {\n      const objectData = data as Record<string, any>;\n      const objectEntries = Object.entries(objectData);\n      const renders = objectEntries.reduce(\n        (acc: React.ReactNode[], [key, value], currentIndex) => [\n          ...acc,\n          <span key={key}>\n            {key}: {valueRenderer(jsonTheme)(stringifyJsonData(value), value)}\n            {currentIndex !== objectEntries.length - 1 && <>{', '}</>}\n          </span>,\n        ],\n        [] satisfies React.ReactNode[],\n      );\n\n      return (\n        <>\n          {' {'}\n          {renders}\n          {'}'}\n        </>\n      );\n    } else if (nodeType === 'Array') {\n      const arrayData = data as any[];\n      const renders = arrayData.reduce(\n        (acc, value, currentIndex) => [\n          ...acc,\n          <span key={currentIndex}>\n            {valueRenderer(jsonTheme)(stringifyJsonData(value), value)}\n            {currentIndex !== arrayData.length - 1 && <>{', '}</>}\n          </span>,\n        ],\n        [] satisfies React.ReactNode[],\n      );\n\n      return (\n        <>\n          {arrayData.length > 2 ? `(${arrayData.length})` : ''} [{renders}]\n        </>\n      );\n    } else {\n      return null;\n    }\n  };\n\nconst stringifyJsonData = (value: unknown): string => {\n  switch (true) {\n    case Array.isArray(value):\n      return `Array(${(value as unknown[]).length})`;\n    case typeof value === 'object':\n      return '{...}';\n    default:\n      return JSON.stringify(value);\n  }\n};\n\nconst valueRenderer =\n  (jsonTheme: JsonTheme) =>\n  (valueAsStr: unknown, value: unknown): React.ReactNode => {\n    const valueAsString = valueAsStr as string;\n    if (typeof value === 'string') {\n      if (valueAsString.startsWith('\"Error:')) {\n        return <span style={{ color: jsonTheme.error }}>{valueAsString.slice(1, -1)}</span>;\n      }\n\n      if (valueAsString.startsWith('\"Info:')) {\n        return <span style={{ color: jsonTheme.info }}>{valueAsString.slice(1, -1)}</span>;\n      }\n\n      return <span style={{ color: jsonTheme.string }}>{valueAsString}</span>;\n    } else if (typeof value === 'boolean') {\n      return <span style={{ color: jsonTheme.constants }}>{valueAsString}</span>;\n    } else if (typeof value === 'number') {\n      return <span style={{ color: jsonTheme.number }}>{valueAsString}</span>;\n    }\n\n    return valueAsString;\n  };\n\nconst lens = (obj: any, path: (string | number)[]) => path.reduce((o, key) => (o && o[key] ? o[key] : null), obj);\n","import { ExportOutlined, FormatPainterOutlined, PlusOutlined } from '@ant-design/icons';\nimport { Button, Tabs, Tooltip, Typography } from 'antd';\nimport type { editor } from 'monaco-editor';\nimport React, { useMemo, useState } from 'react';\nimport { match } from 'ts-pattern';\n\nimport typeScriptIcon from '../../assets/typescript.svg?inline';\nimport type { SimulationTrace, SimulationTraceDataFunction } from '../decision-graph/simulator/simulation.types';\nimport { FunctionDebuggerLog } from './function-debugger-log';\nimport { type FunctionLibrary } from './helpers/libs';\n\nenum TabKey {\n  Console = 'Console',\n  Libraries = 'Libraries',\n}\n\nexport type FunctionDebuggerProps = {\n  trace?: SimulationTrace<SimulationTraceDataFunction>;\n  editor?: editor.IStandaloneCodeEditor;\n  editorValue?: string;\n  libraries: FunctionLibrary[];\n};\n\nexport const FunctionDebugger: React.FC<FunctionDebuggerProps> = ({ trace, editor, libraries = [], editorValue }) => {\n  const traceLog = trace?.traceData?.log || [];\n  const [activeTab, setActiveTab] = useState<TabKey>(TabKey.Console);\n\n  return (\n    <div className='grl-function__debugger'>\n      <div className='grl-function__debugger__panel'>\n        <div className='grl-function__debugger__header'>\n          <Tabs\n            rootClassName='grl-inline-tabs'\n            size='small'\n            style={{ width: '100%' }}\n            items={Object.values(TabKey).map((t) => ({ key: t, label: t }))}\n            activeKey={activeTab}\n            onChange={(t) => setActiveTab(t as TabKey)}\n            tabBarExtraContent={\n              <div style={{ marginRight: 8 }}>\n                <Tooltip title='Format code' placement='bottomLeft'>\n                  <Button\n                    size='small'\n                    type='text'\n                    icon={<FormatPainterOutlined />}\n                    onClick={() => editor?.getAction?.('editor.action.formatDocument')?.run?.()}\n                  />\n                </Tooltip>\n              </div>\n            }\n          />\n        </div>\n        <div className='grl-function__debugger__body'>\n          {match(activeTab)\n            .with(TabKey.Console, () => (\n              <>\n                {traceLog.length === 0 && (\n                  <FunctionDebuggerLog\n                    lines={['\"Info: Use console.log and run simulation to debug your code.\"']}\n                    msSinceRun={null}\n                  />\n                )}\n\n                {traceLog.map((log, i) => (\n                  <FunctionDebuggerLog key={i} lines={log.lines} msSinceRun={log.msSinceRun} />\n                ))}\n              </>\n            ))\n            .with(TabKey.Libraries, () => (\n              <div className='grl-function__libraries'>\n                {libraries.map((lib) => (\n                  <FunctionLibraryItem\n                    key={lib.name}\n                    lib={lib}\n                    editorValue={editorValue}\n                    onImport={() => {\n                      if (!editor) {\n                        return;\n                      }\n\n                      const importStatement = `import ${lib.importName ?? lib.name} from '${lib.name}';`;\n                      editor.setValue(importStatement + '\\n' + editor.getValue());\n                    }}\n                  />\n                ))}\n              </div>\n            ))\n            .exhaustive()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst FunctionLibraryItem: React.FC<{ lib: FunctionLibrary; onImport?: () => void; editorValue?: string }> = ({\n  lib,\n  onImport,\n  editorValue,\n}) => {\n  const canImport = useMemo(() => {\n    if (!editorValue) {\n      return true;\n    }\n\n    return !editorValue.includes(`from \"${lib.name}\"`) && !editorValue.includes(`from '${lib.name}'`);\n  }, [lib.name, editorValue]);\n\n  return (\n    <div key={lib.name} className='grl-function__libraries__item'>\n      <img alt='TypeScript Library' src={typeScriptIcon} height={18} />\n      <Typography.Text strong>{lib.name}</Typography.Text>\n      <Typography.Text type='secondary' style={{ fontSize: 12, marginTop: 1.5 }}>\n        {lib.tagline}\n      </Typography.Text>\n      <div className='grl-function__libraries__item__actions'>\n        <Tooltip title='Import library' placement='bottomLeft'>\n          <Button type='text' size='small' icon={<PlusOutlined />} disabled={!canImport} onClick={onImport} />\n        </Tooltip>\n        <Tooltip title='Go to documentation' placement='bottomLeft'>\n          <Button\n            type='text'\n            size='small'\n            icon={<ExportOutlined />}\n            href={lib.documentationUrl}\n            target='_blank'\n            disabled={!lib.documentationUrl}\n          />\n        </Tooltip>\n      </div>\n    </div>\n  );\n};\n","import type { VariableType, VariableTypeJson } from '@gorules/zen-engine-wasm';\nimport { P, match } from 'ts-pattern';\n\nexport const variableTypeToTypescript = (variableType: VariableType) => {\n  const json = variableType.toJson();\n  return vtJsonToTypescript(json);\n};\n\nconst vtJsonToTypescript = (vtj: VariableTypeJson): string =>\n  match(vtj)\n    .with('String', () => 'string')\n    .with('Bool', () => 'boolean')\n    .with('Number', () => 'number')\n    .with('Null', () => 'null')\n    .with('Any', () => 'any')\n    .with({ Object: P.select() }, (obj) => {\n      const innerObject = Object.entries(obj)\n        .map(([key, value]) => [key, vtJsonToTypescript(value)].join(':'))\n        .join(',');\n\n      return `{${innerObject}}`;\n    })\n    .with({ Array: P.select() }, (arr) => `${vtJsonToTypescript(arr)}[]`)\n    .with({ Constant: P.select() }, (c) => {\n      try {\n        return JSON.stringify(c);\n      } catch {\n        return 'any';\n      }\n    })\n    .exhaustive();\n","import { createVariableType } from '@gorules/zen-engine-wasm';\nimport { DiffEditor, Editor, type Monaco, useMonaco } from '@monaco-editor/react';\nimport { Spin, theme } from 'antd';\nimport { MarkerSeverity, type editor } from 'monaco-editor';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Panel, PanelGroup, PanelResizeHandle } from 'react-resizable-panels';\nimport { useDebouncedCallback, useThrottledCallback } from 'use-debounce';\n\nimport '../../helpers/monaco';\nimport { isWasmAvailable } from '../../helpers/wasm';\nimport type { SimulationTrace, SimulationTraceDataFunction } from '../decision-graph/simulator/simulation.types';\nimport { FunctionDebugger } from './function-debugger';\nimport './function.scss';\nimport { variableTypeToTypescript } from './helpers/determine-type';\nimport { type FunctionLibrary, functionDefinitions, functionLibraries } from './helpers/libs';\n\nexport type FunctionProps = {\n  disabled?: boolean;\n  defaultValue?: string;\n  disableDebug?: boolean;\n  language?: string;\n  value?: string;\n  previousValue?: string;\n  onChange?: (value: string) => void;\n  trace?: SimulationTrace<SimulationTraceDataFunction>;\n  onMonacoReady?: (monaco: Monaco) => void;\n  libraries?: FunctionLibrary[];\n  inputData?: unknown;\n  error?: {\n    data: { nodeId: string; source?: string };\n  };\n};\n\nexport const Function: React.FC<FunctionProps> = ({\n  disabled = false,\n  disableDebug,\n  language = 'javascript',\n  defaultValue,\n  value,\n  onChange,\n  trace,\n  onMonacoReady,\n  error,\n  inputData,\n  previousValue,\n  libraries = functionLibraries,\n}) => {\n  const monaco = useMonaco();\n  const mountedRef = useRef(false);\n  const { token } = theme.useToken();\n  const [innerValue, setInnerValue] = useState<string>();\n  const [decorations, setDecorations] = useState<editor.IEditorDecorationsCollection>();\n\n  const innerChange = useDebouncedCallback((val: string) => {\n    onChange?.(val);\n  }, 100);\n\n  const [editor, setEditor] = useState<editor.IStandaloneCodeEditor>();\n  const [diffEditor, setDiffEditor] = useState<editor.IStandaloneDiffEditor>();\n  const resizeEditor = useThrottledCallback(() => editor?.layout(), 100, { trailing: true });\n  const resizeDiffEditor = useThrottledCallback(() => diffEditor?.layout(), 100, { trailing: true });\n\n  useEffect(() => {\n    window.addEventListener('resize', resizeEditor);\n    return () => window.removeEventListener('resize', resizeEditor);\n  }, [resizeEditor, editor]);\n\n  useEffect(() => {\n    window.addEventListener('resize', resizeDiffEditor);\n    return () => window.removeEventListener('resize', resizeDiffEditor);\n  }, [resizeDiffEditor, diffEditor]);\n\n  useEffect(() => {\n    if (!monaco) return;\n\n    monaco.languages.typescript.javascriptDefaults.setCompilerOptions({\n      target: monaco.languages.typescript.ScriptTarget.ES2020,\n      module: monaco.languages.typescript.ModuleKind.ESNext,\n      moduleResolution: monaco.languages.typescript.ModuleResolutionKind.NodeJs,\n      allowSyntheticDefaultImports: true,\n      allowNonTsExtensions: true,\n      allowJs: true,\n      checkJs: true,\n      lib: ['es2023'],\n    });\n\n    monaco.languages.typescript.javascriptDefaults.setDiagnosticsOptions({\n      noSyntaxValidation: false,\n      noSemanticValidation: false,\n      noSuggestionDiagnostics: false,\n      onlyVisible: false,\n    });\n\n    monaco.languages.typescript.javascriptDefaults.setExtraLibs(\n      functionLibraries.map((lib) => ({\n        content: `declare module '${lib.name}' { ${lib.typeDef} }`,\n        filePath: lib.name,\n      })),\n    );\n\n    Object.entries(functionDefinitions.globals).forEach(([pkg, types]) => {\n      monaco.languages.typescript.javascriptDefaults.addExtraLib(types, `ts:${pkg}`);\n    });\n\n    onMonacoReady?.(monaco);\n  }, [monaco, libraries]);\n\n  useEffect(() => {\n    if (mountedRef.current && value !== undefined && value !== innerValue) {\n      setInnerValue(value);\n    }\n  }, [value]);\n\n  useEffect(() => {\n    setInnerValue(value === undefined ? defaultValue : value);\n    mountedRef.current = true;\n  }, []);\n\n  useEffect(() => {\n    if (!monaco) return;\n\n    let data = 'any';\n    if (isWasmAvailable()) {\n      data = variableTypeToTypescript(createVariableType(inputData));\n    }\n\n    monaco.languages.typescript.javascriptDefaults.addExtraLib(\n      `\n    type Input = ${data};\n    type Output = Promise<any>;\n    \n    type Handler = (input: Input) => Output; \n    `,\n      'ts:input.d.ts',\n    );\n  }, [monaco, inputData]);\n\n  useEffect(() => {\n    if (!monaco) {\n      return;\n    }\n\n    const model = monaco.editor.getModels()?.[0];\n    if (!model) {\n      return;\n    }\n\n    monaco.editor.setModelMarkers(model, 'gorules', []);\n  }, [innerValue, monaco]);\n\n  useEffect(() => {\n    if (!decorations) {\n      return;\n    }\n\n    decorations.clear();\n    setDecorations(undefined);\n  }, [innerValue]);\n\n  useEffect(() => {\n    try {\n      if (!error || !monaco) {\n        return;\n      }\n\n      const results = /Error:(\\[.*])?(:?\\d+)?(:\\d+)?(.*)/s.exec(error.data.source ?? '');\n      if (!results || results.length === 0) {\n        return;\n      }\n\n      const line = parseFloat((results?.[2] ?? '').replace(/^:/, ''));\n      const errorMessage = results?.[4] ?? '';\n      if (!line || !errorMessage) {\n        return;\n      }\n\n      const model = monaco.editor.getModels()[0];\n      if (!model) {\n        return;\n      }\n\n      const range = new monaco.Range(\n        line,\n        model.getLineFirstNonWhitespaceColumn(line),\n        line,\n        model.getLineLastNonWhitespaceColumn(line),\n      );\n\n      monaco.editor.setModelMarkers(model, 'gorules', [\n        {\n          severity: MarkerSeverity.Error,\n          message: errorMessage,\n          startLineNumber: range.startLineNumber,\n          endLineNumber: range.endLineNumber,\n          startColumn: range.startColumn,\n          endColumn: range.endColumn,\n        },\n      ]);\n\n      const editor = monaco.editor.getEditors()[0];\n      if (!editor) {\n        return;\n      }\n\n      const decorations = editor.createDecorationsCollection([\n        {\n          range,\n          options: {\n            hoverMessage: { value: errorMessage },\n            isWholeLine: true,\n            className: 'grl-function__errorLineContent',\n          },\n        },\n      ]);\n\n      setDecorations((curr) => {\n        curr?.clear?.();\n        return decorations;\n      });\n    } catch {\n      //\n    }\n  }, [error, editor]);\n\n  return (\n    <div\n      className='grl-function'\n      data-theme={token.mode}\n      style={\n        {\n          'height': '100%',\n          '--color-text': token.colorTextBase,\n          '--color-background-elevated': token.colorBgElevated,\n          '--color-border': token.colorBorder,\n          '--line-height': token.lineHeight,\n        } as any\n      }\n    >\n      <PanelGroup className='grl-function__content' direction='horizontal' autoSaveId='jdm-editor:function:layout'>\n        <Panel defaultSize={70} minSize={50}>\n          {previousValue ? (\n            <DiffEditor\n              loading={<Spin size='large' />}\n              language={language}\n              original={previousValue}\n              modified={innerValue}\n              onMount={(editor) => setDiffEditor(editor)}\n              theme={token.mode === 'dark' ? 'vs-dark' : 'light'}\n              height='100%'\n              options={{\n                ...monacoOptions,\n                readOnly: true,\n              }}\n            />\n          ) : (\n            <Editor\n              loading={<Spin size='large' />}\n              language={language}\n              value={innerValue}\n              onMount={(editor) => setEditor(editor)}\n              onChange={(value) => {\n                setInnerValue(value ?? '');\n                innerChange(value ?? '');\n              }}\n              theme={token.mode === 'dark' ? 'vs-dark' : 'light'}\n              height='100%'\n              options={{\n                ...monacoOptions,\n                readOnly: disabled,\n              }}\n            />\n          )}\n        </Panel>\n        {!disableDebug && (\n          <>\n            <PanelResizeHandle />\n            <Panel minSize={25}>\n              {!disableDebug && (\n                <FunctionDebugger libraries={functionLibraries} trace={trace} editor={editor} editorValue={value} />\n              )}\n            </Panel>\n          </>\n        )}\n      </PanelGroup>\n    </div>\n  );\n};\n\nconst monacoOptions: editor.IStandaloneEditorConstructionOptions = {\n  automaticLayout: true,\n  contextmenu: false,\n  fontSize: 13,\n  fontFamily: 'var(--mono-font-family)',\n  tabSize: 2,\n  minimap: { enabled: false },\n  overviewRulerBorder: false,\n  scrollbar: {\n    verticalSliderSize: 4,\n    verticalScrollbarSize: 4,\n    horizontalScrollbarSize: 4,\n    horizontalSliderSize: 4,\n  },\n};\n","import type { ThemeConfig as AntThemeConfig } from 'antd';\nimport { ConfigProvider, theme as antTheme, theme } from 'antd';\nimport React, { useMemo } from 'react';\n\ndeclare module 'antd/es/theme/interface/alias' {\n  export interface AliasToken {\n    mode: 'dark' | 'light';\n  }\n}\n\nexport type ThemeConfig = Omit<AntThemeConfig, 'algorithm'> & {\n  mode?: 'light' | 'dark';\n};\n\nexport type JdmConfigProviderProps = {\n  theme?: ThemeConfig;\n  prefixCls?: string;\n  children?: React.ReactNode;\n};\n\nexport const JdmConfigProvider: React.FC<JdmConfigProviderProps> = ({\n  theme: { mode = 'light', token = {}, ...restTheme } = {},\n  prefixCls,\n  children,\n}) => {\n  const algorithm = useMemo(() => {\n    switch (mode) {\n      case 'dark':\n        return antTheme.darkAlgorithm;\n      case 'light':\n      default:\n        return antTheme.defaultAlgorithm;\n    }\n  }, [mode]);\n\n  return (\n    <ConfigProvider prefixCls={prefixCls} theme={{ ...restTheme, algorithm, token: { ...token, mode } }}>\n      <GlobalCssVariables mode={mode} />\n      {children}\n    </ConfigProvider>\n  );\n};\n\nconst GlobalCssVariables: React.FC<{ mode: 'light' | 'dark' }> = ({ mode }) => {\n  const { token } = theme.useToken();\n\n  const exposedTokens = useMemo(\n    () => ({\n      '--grl-color-border': token.colorBorder,\n      '--grl-color-border-hover': mode === 'light' ? '#c3c3c3' : '#555555',\n      '--grl-color-border-fade': mode === 'light' ? '#e9e9e9' : '#333333',\n      '--grl-color-primary': token.colorPrimary,\n      '--grl-color-primary-bg': token.colorPrimaryBg,\n      '--grl-color-primary-bg-fade': mode === 'light' ? '#f7f9fc' : '#141414',\n      '--grl-color-primary-bg-hover': token.colorPrimaryBgHover,\n      '--grl-color-primary-border': token.colorPrimaryBorder,\n      '--grl-color-primary-border-hover': token.colorPrimaryBorderHover,\n      '--grl-color-primary-text-hover': token.colorPrimaryTextHover,\n      '--grl-color-success': token.colorSuccess,\n      '--grl-color-success-bg': token.colorSuccessBg,\n      '--grl-color-success-border': token.colorSuccessBorder,\n      '--grl-color-error': token.colorError,\n      '--grl-color-error-bg': token.colorErrorBg,\n      '--grl-color-error-border': token.colorErrorBorder,\n      '--grl-color-warning': token.colorWarning,\n      '--grl-color-warning-bg': token.colorWarningBg,\n      '--grl-color-warning-border': token.colorWarningBorder,\n      '--grl-color-warning-text': token.colorWarningText,\n      '--grl-color-info': token.colorInfo,\n      '--grl-color-info-bg': token.colorInfoBg,\n      '--grl-color-info-border': token.colorInfoBorder,\n      '--grl-color-info-text': token.colorInfoText,\n      '--grl-color-bg-layout': token.colorBgLayout,\n      '--grl-color-bg-mask': token.colorBgMask,\n      '--grl-color-bg-elevated': token.colorBgElevated,\n      '--grl-color-bg-container': token.colorBgContainer,\n      '--grl-color-bg-container-disabled': token.colorBgContainerDisabled,\n      '--grl-color-bg-text-hover': token.colorBgTextHover,\n      '--grl-color-primary-hover': token.colorPrimaryHover,\n      '--grl-color-primary-active': token.colorPrimaryActive,\n      '--grl-color-text': token.colorText,\n      '--grl-color-text-placeholder': token.colorTextPlaceholder,\n      '--grl-color-text-base': token.colorTextBase,\n      '--grl-color-text-disabled': token.colorTextDisabled,\n      '--grl-color-text-secondary': token.colorTextSecondary,\n      '--grl-control-outline': token.controlOutline,\n      '--grl-primary-color': token.colorPrimary,\n      '--grl-primary-color-bg': token.colorPrimaryBg,\n      '--grl-font-family': token.fontFamily,\n      '--grl-line-height': token.lineHeight,\n      '--grl-border-radius': `${token.borderRadius}px`,\n\n      '--grl-decision-table-output': mode === 'light' ? '#eaeaea' : '#091422',\n      '--grl-decision-table-selected-row': mode === 'light' ? '#f4faff' : '#121720',\n    }),\n    [token, mode],\n  );\n\n  const cssBlock = Object.entries(exposedTokens)\n    .map(([key, value]) => `  ${key}: ${value};`)\n    .join('\\n');\n\n  return <style dangerouslySetInnerHTML={{ __html: `:root {\\n${cssBlock}\\n}` }} />;\n};\n"],"names":["TableDialogContext","React","DecisionTableDialogProvider","children","getContainer","dialog","setDialog","useState","isDialogActive","type","jsx","useDecisionTableDialog","react","equal","a","b","length","i","keys","key","cleanupTableRule","decisionTable","rule","defaultId","schemaItems","newRule","schemaItem","cleanupTableRules","rules","parseDecisionTable","dt","r","DecisionTableStoreContext","DecisionTableProvider","props","stateStore","useMemo","create","listenerStore","actions","cursor","value","updatedDecisionTable","produce","draft","x","y","source","target","input","_id","column","id","data","item","columns","hitPolicy","useDecisionTableState","selector","equals","useDecisionTableListeners","useDecisionTableActions","useDecisionTableRaw","recursiveSelect","fields","field","getPath","items","path","columnIdSelector","state","c","composeRefs","refs","composeTwoRefs","semiCombinedRef","refToInclude","composedRefCache","ref1","ref2","ref1Cache","composedRef","instance","updateRef","ref","recalculateRows","node","maxRows","computedStyles","lineHeight","paddingTop","paddingBottom","contentHeight","calculatedRows","AutosizeTextArea","className","textareaRef","useRef","useEffect","observerCallback","entries","resizeObserver","clsx","wasmAvailable","isWasmAvailable","isReady","getNodeType","nodeTypes","NodeTypeKind","VariableType","useNodeType","attachGlobals","disabled","typeInfo","useDecisionGraphState","globalType","nodeType","k","v","DiffRadio","displayDiff","previousValue","options","rest","Radio","option","ArrowDiffIcon","direction","size","fontSize","ArrowDownOutlined","ArrowRightOutlined","DiffSwitch","previousChecked","jsxs","Space","Fragment","Switch","DiffInput","Input","DiffSelect","Select","DiffCodeEditor","noStyle","CodeEditor","DiffAutosizeTextArea","forwardRef","TabDecisionTable","manager","graphActions","useDecisionGraphActions","nodeTrace","configurable","content","inputsSchema","outputsSchema","simulate","decisionGraph","match","P","result","activeRules","d","computedType","inputField","newType","DecisionTable","val","isMac","keyMaps","platform","s","acc","memoryCache","usePersistentState","defaultValue","setState","Stack","horizontal","reversed","verticalAlign","horizontalAlign","gap","height","width","grow","style","flexDirection","SpacedText","left","right","Typography","DiffIcon","status","MinusSquareOutlined","PlusSquareOutlined","DragOutlined","GraphCard","NodeColor","DecisionNode","icon","name","isSelected","noBodyPadding","color","onNameChange","menuItems","diffStatus","compactMode","listMode","helper","details","detailsOpen","detailsTitle","onDetailsClose","contentEditing","setContentEditing","nameRef","nodeColor","e","h","CloseOutlined","Dropdown","Button","MoreOutlined","Transition","stage","shouldMount","GraphNode","handleLeft","handleRight","specification","displayError","decisionNodeProps","currentDetails","setCurrentDetails","setDetailsOpen","nodeError","error","diff","useNodeDiff","Settings","BookOutlined","Modal","event","isToggle","Handle","Position","NodeKind","decisionTableSpecification","TableOutlined","current","previous","_","inputs","compareAndUnifyLists","hasNameChange","hasFieldChange","hasDefaultValueChange","outputs","hasDescriptionChange","inputChanges","outputChanges","output","prevContent","nodeInput","determinedType","calculatedType","jsonType","index","selected","passThrough","executionMode","SyncOutlined","inputType","contentDiff","updateNode","Form","ExpressionStoreContext","createExpression","ExpressionStoreProvider","store","set","expressions","sourceIndex","targetIndex","update","useExpressionStore","useExpressionStoreRaw","ExpressionController","onChange","mounted","setExpressions","prevState","ExpressionItem","expression","variableType","expressionRef","updateRow","removeRow","swapRows","onRemove","isDropping","dropRef","useDrop","monitor","draggedRow","isDragging","dragRef","previewRef","useDrag","MenuOutlined","ResultOverlay","Popconfirm","DeleteOutlined","trace","traceData","ExpressionList","addRowBelow","inputVariableType","setVariableType","resultingVariableType","expr","PlusCircleOutlined","Expression","inputData","setMounted","container","dndProps","HTML5Backend","DndProvider","SimulateDataSync","expressionStoreRaw","currentState","createVariableType","TabExpression","expressionSpecification","NumberOutlined","compareStringFields","hasKeyChange","hasValueChange","bigJs","dayjs","defaultFn","globalDts","http","zen","zod","functionLibraries","functionDefinitions","defaultFunctionValue","Function","TabFunction","kind","useFunctionKind","onFunctionReady","useDecisionGraphListeners","monaco","setMonaco","FunctionKind","extraLibs","newExtraLibs","schemaTypeDefs","Suspense","Spin","functionSpecification","hasModifications","DeprecatedFunctionWarning","FunctionKind2","n","Tooltip","WarningFilled","unsecuredCopyToClipboard","text","textArea","err","copyToClipboard","pasteFromClipboard","JsonToJsonSchemaDialog","isOpen","onDismiss","onSuccess","model","token","theme","setValue","toJsonSchema","json5","message","Editor","editor","formatted","schemaTooltip","monacoOptions","TabKey","TabJsonSchema","language","jsonToJsonSchemaOpen","setJsonToJsonSchemaOpen","activeTab","setActiveTab","setEditor","diffEditor","setDiffEditor","resizeEditor","useThrottledCallback","resizeDiffEditor","PanelGroup","Tabs","t","InfoCircleOutlined","FormatPainterOutlined","ImportOutlined","DiffEditor","schema","inputSpecification","LoginOutlined","outputSpecification","LogoutOutlined","switchSpecification","BranchesOutlined","statements","hasConditionChange","statement","SwitchNode","inViewRef","inView","useInView","isGraphActive","changeHitPolicy","SwitchHandleCompact","SwitchHandle","DownOutlined","draftStatement","condition","onDelete","isActive","isDefault","onSetIsDefault","totalStatements","inner","setInner","useLayoutEffect","handleChange","isLastIndex","isElse","field1","field2","value1","value2","calculateDiffGraph","currentGraph","previousGraph","nodes","processNodes","edges","processEdges","currentNodes","previousNodes","components","customNodes","nodesMap","newNode","oldNode","calculatedContent","component","cmp","customNode","currentEdges","previousEdges","edgesMap","newEdge","oldEdge","newList","oldList","idField","compareFields","getId","oldMap","newMap","unifiedList","insertions","removals","isRealPositionChange","oldIndex","newIndex","insertionsBefore","removalsBefore","adjustedNewIndex","oldItem","isPositionChanged","changes","insertIndex","originalIndex","isRemoved","addStrikethrough","strikethroughChar","char","buildDiffString","currentValue","privateSymbol","mapToDecisionEdge","edge","mapToGraphNode","mapToGraphNodes","mapToGraphEdge","MarkerType","mapToGraphEdges","NodeTypeKind2","DecisionGraphStoreContext","DecisionGraphProvider","referenceStore","createRef","nodesState","onNodesChange","hasChanges","newDecisionGraph","p","edgesState","change","ids","nodeIds","curr","newNodes","oldNodeIds","newEdges","graphClipboard","copyNodes","newNodeTypes","els","handleId","updater","setNodes","changedNode","graphChangedNode","existingGraphNode","graph","skipOnChangeEvent","edgeId","reactFlowInstance","openTabs","nodeId","action","tab","updatedTabs","updatedState","panel","panels","mode","vt","setEdges","chosenNode","useDecisionGraphReferences","useDecisionGraphRaw","useEdgeDiff","DecisionGraphEmpty","defaultActivePanel","onPanelsChange","onReactFlowInit","onCodeExtension","mountedRef","innerChange","useDebouncedCallback","createGraphWalker","cache","digest","decisionGraphPathDigest","walkCachedGraph","iterator","res","walkGraph","begin","beginRf","hasCycle","visited","stack","getOutgoers","incomers","getIncomers","unvisitedIncomers","incomer","decisionNode","mappedIncomers","inc","outgoers","part","recursionStack","dfs","outgoer","nodeSpecification","DecisionGraphInferTypes","nt","traceValues","graphWalker","stateDigest","inferTypesStateDigest","prevStateDigest","needUpdate","inferTypesNeedsUpdate","infer","inferNodeTypes","globalTypesStateDigest","$nodesType","nodeOutput","isModified","incomerTypes","inferredInputType","inferTypes","prevInput","inferredOutputType","edgesData","nodesData","customNodesData","cn","typesData","variableTypeHash","inputNodeId","inputNodeType","prevNode","up","typ","heightKey","GraphPanel","activePanelId","activePanel","defaultHeight","Resizable","elementRef","CustomEdge","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","markerEnd","isHovered","hoveredEdgeId","edgePath","labelX","labelY","getBezierPath","BaseEdge","EdgeLabelRenderer","edgeFunction","outer","isClipboardData","useGraphClipboard","reactFlow","wrapper","raw","useCallback","copyNodeIds","copyEdges","pasteNodes","clipboardText","clipboardData","anchor","copyAnchor","gravityCenter","position","rect","rectCenter","projection","GraphComponents","inputDisabled","customComponents","search","setSearch","onDragStart","offsetX","offsetY","positionData","innerGroups","baseNodeSpecification","extendedComponents","isRecognizedType","initialGroups","group","groups","el","customCount","DragDecisionNode","defaultNodeTypes","prevProps","nextProps","edgeTypes","Graph","reactFlowProOptions","reactFlowWrapper","useNodesState","useEdgesState","componentsOpened","setComponentsOpened","graphReferences","hasInputNode","customNodeRenderer","WarningOutlined","addNodeInner","customSpecification","existingCount","partialNode","parsed","nodeSchema","isValidConnection","connection","hasDuplicate","onDrop","reactFlowBounds","elementPosition","onDragOver","onConnect","params","useImperativeHandle","LeftOutlined","selectedNodeIds","selectedNodes","selectedEdges","ReactFlow","SelectionMode","Controls","ControlButton","CompressOutlined","Background","saveFile","filename","contents","element","exportExcelFile","fileName","decisionTableNodes","ExcelJS","workbook","decisionTableNode","worksheetName","worksheetNameIndex","worksheet","schemaMeta","record","newDataPoint","formattedVal","inputCellsLength","outputCellsLength","idCell","inputCell","outputCell","descriptionCell","ruleIdCell","cell","note","cellColor","minLength","cellLength","buffer","blob","parseSpreadsheetData","spreadSheetData","columnHeaders","header","headerMeta","dataPoint","col","readFromExcel","sheet","spreadsheetData","spreadsheetName","row","rowData","cellNote","obj","DecisionContentType","GraphSideToolbar","decisionGraphRaw","fileInput","excelFileInput","setDecisionGraph","setActivePanel","handleUploadInput","fileList","reader","modelParsed","decisionModelSchema","uploadJDMExcel","file","fileReader","nodesFromExcel","updatedNodes","_node","excelNode","existingNode","downloadJDM","json","href","link","downloadJDMExcel","CloudUploadOutlined","CloudDownloadOutlined","GraphTabs","tabBarExtraContent","openNodes","activeNodeId","TabLabel","DeploymentUnitOutlined","total","active","onClose","onContextClick","Avatar","DecisionGraphWrapper","disableTabs","setDisableTabs","hasActiveNode","TabContents","containerRef","dndManager","createDragDropManager","DecisionGraph","ReactFlowProvider","createJdmNode","open","setOpen","nodeData","o","values","control","label","formItem","Checkbox","outerLabel","valuePropName","loader","SimulatorEditor","readOnly","requestTooltip","SimulatorRequestPanel","loading","onRun","defaultRequest","requestValue","setRequestValue","requestNode","PlayCircleOutlined","notification","SimulationSegment","GraphSimulator","onClear","LeftPanel","segment","setSegment","selectedNode","setSelectedNode","traces","Panel","PanelResizeHandle","ClearOutlined","StatusIcon","displaySegment","jsonData","CheckCircleTwoTone","CloseCircleTwoTone","renderDiagnosticMessage","codemirror","linter","extractPosition","splitError","trimmed","lintExpression","validateExpression","validateUnaryExpression","errorSource","zenLinter","view","tFields","typeField","diagnostics","validateZenExpression","effect","updateExpressionTypeEffect","updateVariableTypeEffect","updateExpectedVariableTypeEffect","updateStrictModeEffect","expressionType","strict","types","expectedVariableType","expressionDiagnostics","typeDiagnostics","createDiagnostic","expressionResultKind","zenKindToString","expressionResultVt","diagnostic","completion","baseCompletion","applyCompletion","from","to","transaction","insert","hasAutoComplete","NodeProp","makeExpressionCompletion","context","tree","syntaxTree","word","extendedCompletion","tField","buildTypeCompletion","tBase","autoCompleteSpan","targetType","lastNode","firstNode","hoverSpan","completionExtension","schemaCompletion","autocompletion","hoverExtension","hoverTooltip","pos","dom","zenHighlightLight","syntaxHighlighting","HighlightStyle","zenHighlightDark","zenLanguage","LanguageSupport","LRLanguage","zenParser","zenTemplateLanguage","zenTemplateParser","parseMixed","zenExtensions","lint","closeBrackets","history","keymap","closeBracketsKeymap","historyKeymap","insertNewlineAndIndent","ext","defaultTypeField","StateEffect","StateField","updateExpressionType","updateExpectedVariableType","updateVariableType","updateStrictMode","updateListener","onStateChange","EditorView","editorTheme","isDark","fullHeight","placeholder","extension","codeMirror","compartment","Compartment","editorView","EditorState","bracketMatching","placeholderExt","cm","Text","FieldAdd","form","Cascader","FieldUpdate","selectorValue","setSelectorValue","FieldCard","moveCard","drop","dragIndex","hoverIndex","hoverBoundingRect","hoverMiddleY","hoverClientY","drag","Card","FieldsReorder","setColumns","tmpList","DecisionTableDialogs","tableActions","decisionTableFields","DecisionTableCommandBar","disableHitPolicy","diffHitPolicy","exportExcel","importExcel","readExcelFile","newTable","ExportOutlined","Divider","ArrowUpOutlined","DecisionTableEmpty","colWidth","minColWidth","cellRenderer","table","derivedVariableTypes","ContextMenu","TableContextMenu","TableDefaultCell","memo","commit","TableInputCell","localVariableType","resultingType","parentContainer","eventListener","TableHeadCellInput","SwapOutlined","PlusOutlined","TableHeadCellOutput","TableHeadCellInputField","TableHeadCellOutputField","TableHeadRow","headerGroup","parent","parentKind","selfKind","flexRender","TableRow","virtualItem","onResize","trRef","entry","rowValue","columnSizeKey","loadColumnSizing","sizeData","z","Table","maxHeight","columnSizing","setColumnSizing","prev","useReactTable","getCoreRowModel","tableContainerRef","StyledTable","TableBody","rows","virtualizer","useVirtualizer","virtualItems","totalSize","onKeyDown","tableHeight","mountDialogsOnBody","typeScriptIcon","themes","FunctionDebuggerLog","lines","msSinceRun","jsonTheme","line","JSONTree","keyPath","parts","lastPart","paths","objectRenderer","lens","valueRenderer","objectEntries","renders","currentIndex","stringifyJsonData","arrayData","valueAsStr","valueAsString","FunctionDebugger","libraries","editorValue","traceLog","log","lib","FunctionLibraryItem","importStatement","onImport","canImport","variableTypeToTypescript","vtJsonToTypescript","vtj","arr","disableDebug","onMonacoReady","useMonaco","innerValue","setInnerValue","decorations","setDecorations","pkg","results","errorMessage","range","MarkerSeverity","JdmConfigProvider","restTheme","prefixCls","algorithm","antTheme","ConfigProvider","GlobalCssVariables","exposedTokens","cssBlock"],"mappings":"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AAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GCyBFC,KAAuC;AAAA,EAClD;AAAA,IACE,MAAM;AAAA,IACN,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,SAASP;AAAA,IACT,kBAAkB;AAAA,EACpB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,SAAS;AAAA,IACT,SAASC;AAAA,IACT,kBAAkB;AAAA,EACpB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,SAAS;AAAA,IACT,SAASG;AAAA,IACT,kBAAkB;AAAA,EACpB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,SAAS;AAAA,IACT,SAASC;AAAA,IACT,kBAAkB;AAAA,EACpB;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,SAASC;AAAA,IACT,kBAAkB;AAAA,EAAA;AAEtB,GAEaE,KAAsB;AAAA,EACjC,SAAS;AAAA,IACP,eAAeL;AAAA,EAAA;AAEnB,GAEaM,KAAuBP,IClD9BQ,KAAW9V,EAAM,KAAK,aAEnB,EAAE,UADc,MAAM,OAAO,qBAAgB,GACnB,SAAS,EAC3C,GAMY+V,KAA0C,CAAC,EAAE,IAAA5S,QAAS;AAC3D,QAAA6S,IAAOC,GAAgB9S,CAAE,GACzBiG,IAAeC,GAAwB,GACvC,EAAE,cAAAI,GAAc,eAAAC,EAAA,IAAkBzC;AAAA,IACtC,CAAC,EAAE,cAAAwC,IAAe,CAAA,GAAI,eAAAC,IAAgB,UAAU,EAAE,cAAAD,GAAc,eAAAC,EAAc;AAAA,EAChF,GACMwM,IAAkBC,GAA0B,CAACzL,MAAMA,EAAE,eAAe,GACpE,CAAC0L,GAAQC,CAAS,IAAI/V,EAAiB,GACvC6G,IAAWN,GAAY1D,CAAE,GACzB,EAAE,WAAAmG,GAAW,UAAAvC,GAAU,SAAAyC,GAAS,WAAAoF,EAAc,IAAA3H;AAAA,IAClD,CAAC,EAAE,UAAA0C,GAAU,UAAA5C,GAAU,cAAAwC,GAAc,eAAAK,SAAqB;AAAA,MACxD,WAAWC,EAAMF,CAAQ,EACtB,KAAK,EAAE,QAAQG,EAAE,EAAE,GAAG,CAAC,EAAE,QAAAC,EAAA,MAAaA,GAAQ,QAAQ5G,CAAE,CAAC,EACzD,UAAU,MAAM,IAAI;AAAA,MACvB,WAAW0G,EAAMF,CAAQ,EACtB,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQxG,IAAK,EAAA,GAAK,CAAC,EAAE,OAAA0L,EAAA,MAAYA,CAAK,EAC9D,UAAU,MAAM,IAAI;AAAA,MACvB,UAAA9H;AAAAA,MACA,cAAAwC;AAAA,MACA,UAAUK,GAAe,SAAS,IAAI,KAAK,CAACvE,MAASA,EAAK,OAAOlC,CAAE,GAAG;AAAA,IACxE;AAAA,EACF,GAEM,EAAE,MAAA2L,GAAM,aAAAoC,MAAgBnC,GAAY5L,CAAE,GAEtCqE,IAAgBrF,EAAQ,MACrB6T,MAASM,GAAa,SACzBpF,GAAa,QAAQ,QAAQ,gBAC7BpC,GAAM,QAAQ,SAAS,eAC1B,CAACA,GAAMoC,CAAW,CAAC;AAEtB,SAAAjL,EAAU,MAAM;AACd,QAAI,CAACmQ;AACH;AAGF,UAAMG,IAAYH,EAAO,UAAU,WAAW,mBAAmB,aAAa,GACxEI,IAAe,OAAO,QAAQD,CAAS,EAAE,IAAI,CAAC,CAACrV,GAAKsB,CAAK,OAAO;AAAA,MACpE,UAAUtB;AAAA,MACV,SAASsB,EAAM;AAAA,IAAA,EACf,GAEIiU,IAAiB;AAAA,MACrB;AAAA,QACE,UAAU;AAAA,QACV,SAAS;AAAA;AAAA,qBAEIhN,EAAa,IAAI,CAAC,EAAC,OAAAzF,GAAO,MAAAwI,EAAI,MAAyB,qBAAqBxI,CAAK,MAAMwI,CAAI,EAAE,EAAE,KAAK;AAAA,CAAI,CAAC;AAAA;AAAA,MAAA;AAAA,IAG1H;AAEO,IAAA4J,EAAA,UAAU,WAAW,mBAAmB,aAAa,CAAC,GAAGI,GAAc,GAAGC,CAAc,CAAC,GAChGP,IAAkBE,CAAM;AAAA,KACvB,CAACA,GAAQF,GAAiBzM,GAAcC,CAAa,CAAC,GAGtD,gBAAAjJ,EAAAiW,IAAA,EAAS,UAAU,gBAAAjW,EAACkW,MAAK,GACxB,UAAA,gBAAAlW;AAAA,IAACqV;AAAAA,IAAA;AAAA,MACC,eAAe,CAACM,MAAWC,EAAUD,CAAM;AAAA,MAC3C,OAAOJ,MAASM,GAAa,SAAS9M,EAAQ,SAASA;AAAA,MACvD,eAAe,OAAOhC,KAAkB,WAAWA,IAAgB;AAAA,MACnE,OAAOoH,KAAa;AAAA,MACpB,WAAWzH;AAAA,MACX,UAAU,CAACmD,MAAQ;AACJ,QAAAlB,EAAA,WAAWjG,GAAI,CAACR,OACvBqT,MAASM,GAAa,SAClB3T,EAAA,UAAU,EAAE,QAAQ2H,EAAI,IAE9B3H,EAAM,UAAU2H,GAGX3H,EACR;AAAA,MACH;AAAA,MACA,UAAAoE;AAAA,MACA,OAAOuC;AAAA,IAAA;AAAA,EAAA,GAEX;AAEJ,GCpFasN,KAA6D;AAAA,EACxE,MAAMrH,EAAS;AAAA,EACf,MAAM,gBAAA9O,EAACqL,EAAW,MAAX,EAAgB,OAAO,EAAE,OAAO,SAAS,UAAU,UAAU,GAAG,UAAE,KAAA,CAAA;AAAA,EACzE,aAAa;AAAA,EACb,kBAAkB;AAAA,EAClB,kBAAkB;AAAA,EAClB,OAAOO,GAAU;AAAA,EACjB,WAAW,CAAC,EAAE,IAAAlJ,EAAS,MAAA,gBAAA1C,EAACsV,MAAY,IAAA5S,GAAQ;AAAA,EAC5C,gBAAgB,CAACuM,GAASC,MAAkB;AAC1C,UAAM5L,IAAiC,CAAC,GAClCiS,IAAOnM,EAAM6F,CAAO,EACvB;AAAA,MAAK5F,EAAE;AAAA,MAAQ,MAAM;AAAA;AAAA,IAAuB,EAC5C;AAAA,MAAU,MAAM;AAAA;AAAA,IAAmB;AAEtC,IAAAD,EAAM,CAAC6F,GAASC,CAAQ,CAAC,EACtB,KAAK,CAAC7F,EAAE,QAAQA,EAAE,MAAM,GAAG,CAAC,CAAC4F,GAASC,CAAQ,MAAM;AACnD,MAAID,MAAYC,KACZC,EAAA,IAAI7L,GAAQ,UAAU;AAAA,QACtB,eAAe4L;AAAAA,QACf,QAAQ;AAAA,MAAA,CACT;AAAA,IACH,CACD,EACA,KAAK,CAAC,EAAE,QAAQ7F,EAAE,OAAO,GAAG,EAAE,QAAQA,EAAE,QAAQ,GAAG,CAAC,CAAC4F,GAASC,CAAQ,MAAM;AACvED,MAAAA,GAAS,WAAWC,GAAU,UAC9BC,EAAA,IAAI7L,GAAQ,UAAU;AAAA,QACtB,eAAe4L,EAAS;AAAA,QACxB,QAAQ;AAAA,MAAA,CACT;AAAA,IACH,CACD,EACA,UAAU,MAAM;AAAA,IAAA,CAEhB;AAEH,UAAMkH,IAAmB,OAAO,KAAK9S,CAAM,EAAE,SAAS;AAC/C,WAAA;AAAA,MACL,GAAIiS,MAAS,IAA0B,EAAE,QAAQtG,EAAa,IAAAA;AAAA,MAC9D,GAAImH,KAAoB;AAAA,QACtB,OAAO;AAAA,UACL,QAAQ;AAAA,UACR,QAAA9S;AAAA,QAAA;AAAA,MACF;AAAA,IAEJ;AAAA,EACF;AAAA,EACA,cAAc,CAAC,EAAE,OAAA6M,SAAa;AAAA,IAC5B,MAAM,WAAWA,CAAK;AAAA,IACtB,SAAS;AAAA,MACP,QAAQiF;AAAA,IAAA;AAAA,EACV;AAAA,EAEF,YAAY,CAAC,EAAE,IAAA1S,GAAI,MAAAC,GAAM,UAAAyN,GAAU,eAAAvC,QAAoB;AACrD,UAAMlF,IAAeC,GAAwB,GACvC2M,IAAOC,GAAgB9S,CAAE;AAE7B,WAAA,gBAAA1C;AAAA,MAAC0N;AAAA,MAAA;AAAA,QACC,IAAAhL;AAAA,QACA,eAAe;AAAA,UACb,GAAGmL;AAAA,UACH,aACE0H,MAAS,IACP,+BAEC,QACE,EAAA,UAAA;AAAA,YAAA;AAAA,8BACAc,IAA0B,CAAA,CAAA;AAAA,UAAA,EAC7B,CAAA;AAAA,QAEN;AAAA,QACA,MAAM1T,EAAK;AAAA,QACX,YAAYyN;AAAA,QACZ,QAAQ,CAACmF,MAAS,uBAA4Bc,IAA0B,EAAA,MAAM,IAAI,CAAE;AAAA,QACpF,SAAS;AAAA,UACP,gBAAArW,EAACqN,GAA2B,EAAA,MAAK,QAAO,SAAS,MAAM1E,EAAa,QAAQjG,CAAE,GAAG,UAAA,gBAAA,GAArE,eAEZ;AAAA,QAAA;AAAA,MACF;AAAA,IACF;AAAA,EAAA;AAGN;AAEY,IAAAmT,uBAAAA,OACVA,EAAAS,EAAA,aAAA,CAAA,IAAA,cACAT,EAAAS,EAAA,SAAA,CAAA,IAAA,UAFUT,IAAAA,MAAA,CAAA,CAAA;AAKC,MAAAL,KAAkB,CAAC9S,MAAe;AAC7C,QAAM,EAAE,MAAA6S,EAAA,IAAS/O,EAAsB,CAACyD,OAAO;AAAA,IAC7C,MAAMb,EAAMa,EAAE,cAAc,MAAM,KAAK,CAACsM,MAAMA,EAAE,OAAO7T,CAAE,GAAG,OAAO,EAChE;AAAA,MAAK2G,EAAE;AAAA,MAAQ,MAAM;AAAA;AAAA,IAAuB,EAC5C;AAAA,MAAU,MAAM;AAAA;AAAA,IAAmB;AAAA,EAAA,EACtC;AAEK,SAAAkM;AACT,GAEMc,KAAyD,CAAC,EAAE,MAAA/O,EAAA,MAChE,gBAAAtH;AAAA,EAACwW;AAAA,EAAA;AAAA,IACC,WAAU;AAAA,IACV,OAAM;AAAA,IAEN,UAAA,gBAAAxW,EAACyW,MAAc,OAAO,EAAE,OAAO,iCAAiC,UAAUnP,IAAQ,CAAA;AAAA,EAAA;AACpF,GCnHIoP,KAA2B,CAACC,MAAiB;AAC3C,QAAAC,IAAW,SAAS,cAAc,UAAU;AAClD,EAAAA,EAAS,QAAQD,GACR,SAAA,KAAK,YAAYC,CAAQ,GAClCA,EAAS,MAAM,GACfA,EAAS,OAAO;AACZ,MAAA;AACF,aAAS,YAAY,MAAM;AAAA,WACpBC,GAAK;AACJ,YAAA,MAAM,+BAA+BA,CAAG;AAAA,EAAA;AAEzC,WAAA,KAAK,YAAYD,CAAQ;AACpC,GAEaE,KAAkB,OAAO/N,MAAoB;AACpD,EAAA,OAAO,mBAAmB,UAAU,YAChC,MAAA,UAAU,UAAU,UAAUA,CAAO,IAE3C2N,GAAyB3N,CAAO;AAEpC,GAEagO,KAAqB,YAA6B;AACzD,MAAA;AACK,WAAA,UAAU,UAAU,SAAS;AAAA,EAAA,QAC9B;AACC,WAAA;AAAA,EAAA;AAEX,GCtBaC,KAAgE,CAACxV,MAAU;AACtF,QAAM,EAAE,QAAAyV,GAAQ,WAAAC,GAAW,WAAAC,GAAW,OAAAC,EAAU,IAAA5V,GAE1C,EAAE,OAAA6V,EAAA,IAAUC,GAAM,SAAS,GAE3B,CAACvV,GAAOwV,CAAQ,IAAI1X,EAAiB,EAAE;AAE7C,SAAA2F,EAAU,MAAM;AACd,IAAIyR,KAAUG,KACZG,EAASH,CAAK;AAAA,EAChB,GACC,CAACH,CAAM,CAAC,GAGT,gBAAArP;AAAA,IAAC6G;AAAA,IAAA;AAAA,MACC,OAAM;AAAA,MACN,MAAMwI;AAAA,MACN,gBAAc;AAAA,MACd,UAAUC;AAAA,MACV,OAAO;AAAA,MACP,QAAO;AAAA,MACP,MAAM,MAAM;AACN,YAAA;AACU,UAAAC,IAAA;AAAA,YACV,QAAQ,KAAK,UAAUK,GAAaC,GAAM,MAAM1V,CAAK,CAAC,GAAG,MAAM,CAAC;AAAA,YAChE,OAAOA;AAAA,UAAA,CACR;AAAA,iBACMkL,GAAQ;AACP,UAAAyK,EAAA,MAAMzK,GAAG,OAAO;AAAA,QAAA;AAAA,MAE5B;AAAA,MAEA,UAAA;AAAA,QAAC,gBAAAjN,EAAAqL,EAAW,MAAX,EAAgB,UAAmE,sEAAA,CAAA;AAAA,QACpF,gBAAArL;AAAA,UAAC2X;AAAA,UAAA;AAAA,YACC,SAAS,gBAAA3X,EAACkW,IAAK,EAAA,MAAK,QAAQ,CAAA;AAAA,YAC5B,UAAS;AAAA,YACT,OAAOmB,EAAM,SAAS,SAAS,YAAY;AAAA,YAC3C,QAAO;AAAA,YACP,UAAU,CAACxN,MAAQ0N,EAAS1N,KAAO,EAAE;AAAA,YACrC,OAAO9H,KAAS;AAAA,YAChB,SAAS,CAAC6V,GAAQjC,MAAW;AACpB,cAAAA,EAAA,UAAU,WAAW,mBAAmB,sBAAsB;AAAA,gBACnE,oBAAoB;AAAA,cAAA,CACrB,GAEMA,EAAA,UAAU,WAAW,mBAAmB,qBAAqB;AAAA,gBAClE,aAAa;AAAA,gBACb,YAAY;AAAA,cAAA,CACb,GAEDiC,EAAO,UAAU;AAAA,gBACf,IAAI;AAAA,gBACJ,OAAO;AAAA,gBACP,oBAAoB;AAAA,gBACpB,KAAK,OAAOA,MAAW;AACjB,sBAAA;AACI,0BAAAd,GAAgB,KAAK,UAAUW,GAAM,MAAMG,EAAO,SAAU,CAAA,CAAC,CAAC,GACpEF,EAAQ,QAAQ,sBAAsB;AAAA,kBAAA,QAChC;AACN,oBAAAA,EAAQ,MAAM,8BAA8B;AAAA,kBAAA;AAAA,gBAC9C;AAAA,cACF,CACD,GAEDE,EAAO,UAAU;AAAA,gBACf,IAAI;AAAA,gBACJ,OAAO;AAAA,gBACP,oBAAoB;AAAA,gBACpB,cAAc;AAAA,gBACd,KAAK,CAACA,MAAW;AACT,wBAAAC,IAAY,KAAK,UAAUJ,GAAM,MAAMG,EAAO,SAAU,CAAA,GAAG,MAAM,CAAC;AACxEA,kBAAAA,EAAO,SAASC,CAAS;AAAA,gBAAA;AAAA,cAC3B,CACD;AAAA,YACH;AAAA,YACA,SAAS;AAAA,cACP,iBAAiB;AAAA,cACjB,SAAS,EAAE,SAAS,GAAM;AAAA,cAC1B,UAAU;AAAA,cACV,YAAY;AAAA,cACZ,SAAS;AAAA,cACT,sBAAsB;AAAA,cACtB,MAAM;AAAA,gBACJ,oBAAoB;AAAA,gBACpB,+BAA+B;AAAA,cACjC;AAAA,cACA,WAAW;AAAA,gBACT,oBAAoB;AAAA,gBACpB,uBAAuB;AAAA,gBACvB,yBAAyB;AAAA,gBACzB,sBAAsB;AAAA,cACxB;AAAA,cACA,qBAAqB;AAAA,YAAA;AAAA,UACvB;AAAA,QAAA;AAAA,MACF;AAAA,IAAA;AAAA,EACF;AAEJ,GCpGMC,KAAgB,0FAEhBC,KAA6D;AAAA,EACjE,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,SAAS,EAAE,SAAS,GAAM;AAAA,EAC1B,qBAAqB;AAAA,EACrB,WAAW;AAAA,IACT,oBAAoB;AAAA,IACpB,uBAAuB;AAAA,IACvB,yBAAyB;AAAA,IACzB,sBAAsB;AAAA,EAAA;AAE1B;AAEA,IAAKC,uBAAAA,OACHA,EAAA,SAAS,UADNA,IAAAA,MAAA,CAAA,CAAA;AAUE,MAAMC,KAA8C,CAAC,EAAE,IAAAvV,GAAI,MAAA3C,IAAO,cAAc;AACrF,QAAM4I,IAAeC,GAAwB,GAEvCsP,IAAW,QAEX,EAAE,OAAAb,EAAA,IAAUC,GAAM,SAAS,GAE3B,CAACa,GAAsBC,CAAuB,IAAIvY,EAAS,EAAK,GAEhE,CAACwY,GAAWC,CAAY,IAAIzY;AAAA,IAAS;AAAA;AAAA,EAAa,GAElD,CAAC+X,GAAQW,CAAS,IAAI1Y,EAAuC,GAC7D,CAAC2Y,GAAYC,CAAa,IAAI5Y,EAAuC,GACrE6Y,IAAeC,GAAqB,MAAMf,GAAQ,UAAU,KAAK,EAAE,UAAU,IAAM,GACnFgB,IAAmBD,GAAqB,MAAMH,GAAY,UAAU,KAAK,EAAE,UAAU,IAAM,GAE3F,EAAE,UAAAlS,GAAU,SAAAyC,EAAQ,IAAIvC,EAAsB,CAAC,EAAE,UAAA0C,GAAU,UAAA5C,GAAU,cAAAwC,GAAc,eAAAK,EAAA,OAAqB;AAAA,IAC5G,WAAWC,EAAMF,CAAQ,EACtB,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQxG,IAAK,EAAA,GAAK,CAAC,EAAE,OAAA0L,EAAA,MAAYA,CAAK,EAC9D,UAAU,MAAM,IAAI;AAAA,IACvB,UAAA9H;AAAAA,IACA,cAAAwC;AAAA,IACA,UAAUK,GAAe,SAAS,IAAI,KAAK,CAACvE,MAASA,EAAK,OAAOlC,CAAE,GAAG;AAAA,EAAA,EACtE,GAEI,EAAE,aAAA+N,EAAA,IAAgBnC,GAAY5L,CAAE,GAEhCqE,IAAgBrF,EAAQ,MACrB+O,GAAa,QAAQ,QAAQ,eACnC,CAACA,CAAW,CAAC;AAEhB,SAAAjL,EAAU,OACD,OAAA,iBAAiB,UAAUkT,CAAY,GACvC,MAAM,OAAO,oBAAoB,UAAUA,CAAY,IAC7D,CAACA,GAAcd,CAAM,CAAC,GAEzBpS,EAAU,OACD,OAAA,iBAAiB,UAAUoT,CAAgB,GAC3C,MAAM,OAAO,oBAAoB,UAAUA,CAAgB,IACjE,CAACA,GAAkBJ,CAAU,CAAC,GAG/B,gBAAAxY;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,WAAU;AAAA,MACV,cAAYqX,EAAM;AAAA,MAClB,OACE;AAAA,QACE,QAAU;AAAA,QACV,gBAAgBA,EAAM;AAAA,QACtB,+BAA+BA,EAAM;AAAA,QACrC,kBAAkBA,EAAM;AAAA,QACxB,iBAAiBA,EAAM;AAAA,MACzB;AAAA,MAGF,UAAA,gBAAArX;AAAA,QAAC6Y;AAAA,QAAA;AAAA,UACC,WAAU;AAAA,UACV,WAAU;AAAA,UACV,YAAY,cAAc9Y,CAAI;AAAA,UAE9B,4BAAC,OAAI,EAAA,WAAU,yBACb,UAAC,gBAAA6H,EAAA,OAAA,EAAI,WAAU,gCACb,UAAA;AAAA,YAAC,gBAAA5H,EAAA,OAAA,EAAI,WAAU,iCACb,UAAA,gBAAAA;AAAA,cAAC8Y;AAAA,cAAA;AAAA,gBACC,eAAc;AAAA,gBACd,MAAK;AAAA,gBACL,OAAO,EAAE,OAAO,OAAO;AAAA,gBACvB,OAAO,OAAO,OAAOd,EAAM,EAAE,IAAI,CAACe,OAAO;AAAA,kBACvC,KAAKA;AAAA,kBACL,yBACG,QACE,EAAA,UAAA;AAAA,oBAAAA;AAAA,oBAAG;AAAA,oBACJ,gBAAA/Y,EAACwW,GAAQ,EAAA,OAAOsB,IACd,UAAA,gBAAA9X;AAAA,sBAACgZ;AAAA,sBAAA;AAAA,wBACC,OAAO,EAAE,UAAU,IAAI,YAAY,GAAG,SAAS,KAAK,eAAe,WAAW;AAAA,sBAAA;AAAA,oBAAA,EAElF,CAAA;AAAA,kBAAA,EACF,CAAA;AAAA,gBAAA,EAEF;AAAA,gBACF,WAAWX;AAAA,gBACX,UAAU,CAACU,MAAMT,EAAaS,CAAW;AAAA,gBACzC,sCACGlR,IAAM,EAAA,OAAO,EAAE,aAAa,KAAK,MAAM,SACtC,UAAA;AAAA,kBAAA,gBAAA7H,EAACwW,GAAQ,EAAA,OAAM,eAAc,WAAU,eACrC,UAAA,gBAAAxW;AAAA,oBAACqN;AAAA,oBAAA;AAAA,sBACC,MAAK;AAAA,sBACL,MAAK;AAAA,sBACL,UAAA/G;AAAA,sBACA,wBAAO2S,IAAsB,EAAA;AAAA,sBAC7B,SAAS,MAAMrB,GAAQ,YAAY,8BAA8B,GAAG,MAAM;AAAA,oBAAA;AAAA,kBAAA,GAE9E;AAAA,kBACC,gBAAA5X,EAAAwW,GAAA,EAAQ,OAAM,oBAAmB,WAAU,eAC1C,UAAA,gBAAAxW;AAAA,oBAACqN;AAAA,oBAAA;AAAA,sBACC,MAAK;AAAA,sBACL,MAAM;AAAA,sBACN,UAAA/G;AAAA,sBACA,wBAAO4S,IAAe,EAAA;AAAA,sBACtB,SAAS,MAAM;AACb,wBAAAd,EAAwB,EAAI;AAAA,sBAAA;AAAA,oBAC9B;AAAA,kBAAA,EAEJ,CAAA;AAAA,gBAAA,EACF,CAAA;AAAA,cAAA;AAAA,YAAA,GAGN;AAAA,8BACC,OAAI,EAAA,WAAU,+BACZ,UAAAhP,EAAMiP,CAAS,EACb;AAAA,cAAK;AAAA,cAAe,MACnBtR,MAAkB,SAChB,gBAAA/G;AAAA,gBAACmZ;AAAA,gBAAA;AAAA,kBACC,SAAS,gBAAAnZ,EAACkW,IAAK,EAAA,MAAK,QAAQ,CAAA;AAAA,kBAC5B,UAAAgC;AAAA,kBACA,UAAUnR;AAAA,kBACV,UAAUgC,GAAS;AAAA,kBACnB,SAAS,CAAC6O,MAAWa,EAAcb,CAAM;AAAA,kBACzC,OAAOP,EAAM,SAAS,SAAS,YAAY;AAAA,kBAC3C,QAAO;AAAA,kBACP,SAAS;AAAA,oBACP,GAAGU;AAAAA,oBACH,UAAU;AAAA,kBAAA;AAAA,gBACZ;AAAA,cAAA,IAGF,gBAAA/X;AAAA,gBAAC2X;AAAA,gBAAA;AAAA,kBACC,SAAS,gBAAA3X,EAACkW,IAAK,EAAA,MAAK,QAAQ,CAAA;AAAA,kBAC5B,UAAAgC;AAAA,kBACA,OAAOnP,GAAS,UAAU;AAAA,kBAC1B,SAAS,CAAC6O,MAAWW,EAAUX,CAAM;AAAA,kBACrC,UAAU,CAAC7V,MAAU;AACN,oBAAA4G,EAAA,WAAWjG,GAAI,CAACR,OACrBA,EAAA,UAAU,EAAE,QAAQH,EAAM,GACzBG,EACR;AAAA,kBACH;AAAA,kBACA,OAAOmV,EAAM,SAAS,SAAS,YAAY;AAAA,kBAC3C,QAAO;AAAA,kBACP,SAAS;AAAA,oBACP,GAAGU;AAAAA,oBACH,UAAUzR;AAAA,kBAAA;AAAA,gBACZ;AAAA,cAAA;AAAA,YACF,EAGH,WACL,EAAA,CAAA;AAAA,YACA,gBAAAtG;AAAA,cAACgX;AAAA,cAAA;AAAA,gBACC,QAAQmB;AAAA,gBACR,WAAW,MAAMC,EAAwB,EAAK;AAAA,gBAC9C,WAAW,CAAC,EAAE,QAAAgB,GAAQ,OAAAhC,QAAY;AAChC,+BAAa,QAAQ,GAAG1U,CAAE,UAAU0U,CAAK,GAC5BzO,EAAA,WAAWjG,GAAI,CAACR,OACrBA,EAAA,UAAU,EAAE,QAAAkX,EAAO,GAClBlX,EACR,GACDkW,EAAwB,EAAK;AAAA,gBAC/B;AAAA,gBACA,OAAO,aAAa,QAAQ,GAAG1V,CAAE,QAAQ,KAAK;AAAA,cAAA;AAAA,YAAA;AAAA,UAChD,EAAA,CACF,EACF,CAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IACF;AAAA,EACF;AAEJ,GCzLa2W,KAAuD;AAAA,EAClE,MAAMvK,EAAS;AAAA,EACf,wBAAOwK,IAAc,EAAA;AAAA,EACrB,aAAa;AAAA,EACb,OAAO1N,GAAU;AAAA,EACjB,kBAAkB;AAAA,EAClB,kBAAkB;AAAA,EAClB,cAAc,OAAO;AAAA,IACnB,MAAM;AAAA,IACN,SAAS;AAAA,MACP,QAAQ;AAAA,IAAA;AAAA,EACV;AAAA,EAEF,WAAW,CAAC,EAAE,IAAAlJ,GAAI,SAAAgG,EAAc,MAAA,gBAAA1I,EAACiY,IAAc,EAAA,IAAAvV,GAAQ,SAAAgG,GAAkB,MAAM,QAAS,CAAA;AAAA,EACxF,YAAY,CAAC,EAAE,IAAAhG,GAAI,MAAAC,GAAM,UAAAyN,GAAU,eAAAvC,QAAoB;AACrD,UAAMlF,IAAeC,GAAwB,GACvC,EAAE,UAAAtC,MAAaE,EAAsB,CAAC,EAAE,UAAAF,SAAgB;AAAA,MAC5D,UAAAA;AAAAA,IAAA,EACA;AAGA,WAAA,gBAAAtG;AAAA,MAAC0N;AAAA,MAAA;AAAA,QACC,IAAAhL;AAAA,QACA,eAAAmL;AAAA,QACA,MAAMlL,EAAK;AAAA,QACX,YAAYyN;AAAA,QACZ,YAAY;AAAA,QACZ,SAAS;AAAA,UACP,gBAAApQ,EAACqN,GAAwB,EAAA,MAAK,QAAO,SAAS,MAAM1E,EAAa,QAAQjG,CAAE,GAAG,UAAA,YAAA,GAAlE,YAEZ;AAAA,QACF;AAAA,QACA,WAAW;AAAA,UACT;AAAA,YACE,KAAK;AAAA,YACL,wBAAO8L,IAAa,EAAA;AAAA,YACpB,OAAO;AAAA,YACP,SAAS,MAAM,OAAO,KAAKX,EAAc,kBAAkB,OAAO;AAAA,UACpE;AAAA,UACA;AAAA,YACE,KAAK;AAAA,YACL,wBAAOmF,IAAe,EAAA;AAAA,YACtB,QAAQ;AAAA,YACR,yBAAQ9H,IAAW,EAAA,MAAK,UAAS,OAAOlB,GAAS,SAAS,WAAW,GAAG;AAAA,YACxE,UAAA1D;AAAA,YACA,SAAS,MACPmI,GAAM,QAAQ;AAAA,cACZ,MAAM;AAAA,cACN,OAAO;AAAA,cACP,SACE,gBAAA7G,EAACyD,EAAW,MAAX,EAAgB,UAAA;AAAA,gBAAA;AAAA,kCACkBA,EAAW,MAAX,EAAgB,QAAM,IAAE,YAAK,MAAK;AAAA,gBAAkB;AAAA,cAAA,GACvF;AAAA,cAEF,eAAe,EAAE,QAAQ,GAAK;AAAA,cAC9B,MAAM,MAAM1C,EAAa,YAAY,CAACjG,CAAE,CAAC;AAAA,YAC1C,CAAA;AAAA,UAAA;AAAA,QACL;AAAA,MACF;AAAA,IACF;AAAA,EAEJ;AAAA,EACA,gBAAgB,CAACuM,GAASC,MAAkB;AAC1C,UAAM5L,IAAiC,CAAC;AACxC,WAAOrB,EAAQgN,KAAW,CAAC,GAAG,CAAC/M,QACxB+M,GAAS,UAAU,KAAK,OAAA,OAAcC,GAAU,UAAU,KAAK,YAChEC,EAAA,IAAI7L,GAAQ,UAAU;AAAA,MACtB,eAAe4L,GAAU,UAAU;AAAA,MACnC,QAAQ;AAAA,IAAA,CACT,GAGsB,OAAO,KAAK5L,CAAM,EAAE,SAAS,MAGpDpB,EAAM,QAAQ;AAAA,MACZ,QAAQ;AAAA,MACR,QAAAoB;AAAA,IACF,IAEKpB,EACR;AAAA,EAAA;AAEL,GCrFaqX,KAAyD;AAAA,EACpE,MAAMzK,EAAS;AAAA,EACf,wBAAO0K,IAAe,EAAA;AAAA,EACtB,OAAO5N,GAAU;AAAA,EACjB,aAAa;AAAA,EACb,kBAAkB;AAAA,EAClB,kBAAkB;AAAA,EAClB,cAAc,OAAO,EAAE,MAAM,YAAY,SAAS,EAAE,QAAQ,GAAA;EAC5D,WAAW,CAAC,EAAE,IAAAlJ,GAAI,SAAAgG,EAAc,MAAA,gBAAA1I,EAACiY,IAAc,EAAA,IAAAvV,GAAQ,SAAAgG,GAAkB,MAAM,SAAU,CAAA;AAAA,EACzF,YAAY,CAAC,EAAE,IAAAhG,GAAI,MAAAC,GAAM,UAAAyN,GAAU,eAAAvC,QAAoB;AACrD,UAAMlF,IAAeC,GAAwB;AAE3C,WAAA,gBAAA5I;AAAA,MAAC0N;AAAA,MAAA;AAAA,QACC,IAAAhL;AAAA,QACA,eAAAmL;AAAA,QACA,MAAMlL,EAAK;AAAA,QACX,YAAYyN;AAAA,QACZ,aAAa;AAAA,QACb,SAAS;AAAA,UACP,gBAAApQ,EAACqN,GAAwB,EAAA,MAAK,QAAO,SAAS,MAAM1E,EAAa,QAAQjG,CAAE,GAAG,UAAA,YAAA,GAAlE,YAEZ;AAAA,QAAA;AAAA,MACF;AAAA,IACF;AAAA,EAEJ;AAAA,EACA,gBAAgB,CAACuM,GAASC,MAAkB;AAC1C,UAAM5L,IAAiC,CAAC;AACxC,WAAOrB,EAAQgN,KAAW,CAAC,GAAG,CAAC/M,QACxB+M,GAAS,UAAU,KAAK,OAAA,OAAcC,GAAU,UAAU,KAAK,YAChEC,EAAA,IAAI7L,GAAQ,UAAU;AAAA,MACtB,eAAe4L,GAAU,UAAU;AAAA,MACnC,QAAQ;AAAA,IAAA,CACT,GAGsB,OAAO,KAAK5L,CAAM,EAAE,SAAS,MAGpDpB,EAAM,QAAQ;AAAA,MACZ,QAAQ;AAAA,MACR,QAAAoB;AAAA,IACF,IAEKpB,EACR;AAAA,EAAA;AAEL,GClCauX,KAAyD;AAAA,EACpE,MAAM3K,EAAS;AAAA,EACf,wBAAO4K,IAAiB,EAAA;AAAA,EACxB,aAAa;AAAA,EACb,kBAAkB;AAAA,EAClB,kBAAkB;AAAA,EAClB,OAAO9N,GAAU;AAAA,EACjB,gBAAgB,CAACqD,GAASC,MACjBjN,EAAQgN,GAAS,CAAC/M,MAAU;AACjC,UAAMoB,IAAiC,CAAC;AACxC,KAAK2L,EAAQ,aAAa,SAASC,EAAS,aAAa,OACrDC,EAAA,IAAI7L,GAAQ,aAAa;AAAA,MACzB,QAAQ;AAAA,MACR,eAAe2L,EAAQ;AAAA,IAAA,CACxB;AAGG,UAAA0K,IAAatK,GAAqBJ,GAAS,cAAc,CAAA,GAAIC,GAAU,cAAc,IAAI;AAAA,MAC7F,eAAe,CAACD,GAASC,MAAa;AACpC,cAAM0K,KAAsB3K,EAAQ,aAAa,QAAQC,EAAS;AAG3D,eAAA;AAAA,UACL,YAAY0K;AAAA,UACZ,QAAQ;AAAA,YACN,GAAIA,KAAsB;AAAA,cACxB,WAAW;AAAA,gBACT,QAAQ;AAAA,gBACR,eAAe1K,EAAS;AAAA,cAAA;AAAA,YAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACF;AAAA,QAQJ;AAAA,MAAA;AAAA,IACF,CACD;AAED,WAAAhN,EAAM,aAAayX,GAEjBA,EAAW;AAAA,MACT,CAACE,MACCA,GAAW,OAAO,WAAW,cAC7BA,GAAW,OAAO,WAAW,WAC7BA,GAAW,OAAO,WAAW;AAAA,IAAA,KAG/B1K,EAAA,IAAI7L,GAAQ,cAAc;AAAA,MAC1B,QAAQ;AAAA,IAAA,CACT,GAGC,OAAO,KAAKA,CAAM,EAAE,SAAS,MAC/BpB,EAAM,QAAQ;AAAA,MACZ,QAAQ;AAAA,MACR,QAAAoB;AAAA,IACF,IAEKpB;AAAA,EAAA,CACR;AAAA,EAEH,YAAY;AAAA,IACV,aAAa,MAAM;AAAA,IACnB,qBAAqB,CAAC0B,MAAUA,EAAM;AAAA,EACxC;AAAA,EACA,cAAc,CAAC,EAAE,OAAAuM,SAAa;AAAA,IAC5B,MAAM,SAASA,CAAK;AAAA,IACpB,SAAS;AAAA,MACP,WAAW;AAAA,MACX,YAAY,CAAC,EAAE,IAAI,OAAO,WAAW,GAAG,WAAW,IAAI,WAAW,GAAO,CAAA;AAAA,IAAA;AAAA,EAC3E;AAAA,EAEF,YAAY,CAAC,EAAE,eAAAtC,GAAe,GAAGrM,EAAM,MAAO,gBAAAxB,EAAA8Z,IAAA,EAAW,eAAAjM,GAA+B,GAAGrM,EAAO,CAAA;AACpG,GAEMsY,KAIF,CAAC,EAAE,IAAApX,GAAI,MAAAC,GAAM,UAAAyN,GAAU,eAAAvC,QAAoB;AAC7C,QAAMlF,IAAeC,GAAwB,GACvC,EAAE,KAAKmR,GAAW,QAAAC,EAAA,IAAWC,GAAU,EAAE,OAAO,KAAO,GACvD,EAAE,SAAAlR,GAAS,UAAAzC,GAAU,WAAAuC,GAAW,aAAAyD,GAAa,eAAA4N,MAAkB1T;AAAA,IACnE,CAAC,EAAE,eAAA2C,GAAe,UAAA7C,GAAU,UAAA4C,GAAU,aAAAoD,GAAa,WAAA+L,SAAiB;AAAA,MAClE,WAAWjP,EAAMF,CAAQ,EACtB,KAAK,EAAE,QAAQG,EAAE,EAAE,GAAG,CAAC,EAAE,QAAAC,EAAA,MAAaA,GAAQ,QAAQ5G,CAAE,CAA+C,EACvG,UAAU,MAAM,IAAI;AAAA,MACvB,UAAUyG,GAAe,SAAS,IAAI,KAAK,CAACoN,MAAMA,GAAG,OAAO7T,CAAE,GAAG;AAAA,MACjE,UAAA4D;AAAAA,MACA,aAAAgG;AAAAA,MACA,eAAe+L,MAAc;AAAA,IAC/B;AAAA,EACF,GAEM3R,IAAWN,GAAY1D,GAAI,EAAE,UAAU,CAACwX,KAAiB,CAACF,GAAQ,GAClEL,IAAgC5Q,GAAS,cAAc,CAAC,GACxDjG,IAAYiG,GAAS,aAAa,SAElCoR,IAAkB,CAACrX,MAAsB;AAChC,IAAA6F,EAAA,WAAWjG,GAAI,CAACkC,OAC3BA,EAAK,QAAQ,YAAY9B,GAClB8B,EACR;AAAA,EACH,GAEMgK,IAASlN,EAAQ,MAAO4K,IAAc8N,KAAsBC,IAAe,CAAC/N,CAAW,CAAC;AAG5F,SAAA,gBAAAtM;AAAA,IAAC0N;AAAA,IAAA;AAAA,MACC,IAAAhL;AAAA,MACA,KAAKqX;AAAA,MACL,WAAWnU,EAAK,CAAC,QAAQ,CAAC;AAAA,MAC1B,eAAAiI;AAAA,MACA,MAAMlL,EAAK;AAAA,MACX,aAAa;AAAA,MACb,QAAQ,CAAE,gBAAA3C,EAAAyH,IAAA,CAAA,GAAuB,aAAc,CAAE;AAAA,MACjD,eAAa;AAAA,MACb,YAAY2I;AAAA,MACZ,SAAS;AAAA,QACP,gBAAApQ;AAAA,UAACqN;AAAA,UAAA;AAAA,YAEC,MAAK;AAAA,YACL,UAAA/G;AAAA,YACA,SAAS,MAAM;AACb,cAAIxD,MAAc,WAAW6W,GAAY,SAAS,IACnChR,EAAA,WAAWjG,GAAI,CAACR,OACrBA,EAAA,QAAQ,cAAeA,EAAM,QAAQ,cAAc,CAAC,GAAyB,IAAI,CAAC2X,OAClFA,EAAU,cACZA,EAAU,YAAY,KAEjBA,EACR,GACD3X,EAAM,QAAQ,WAAW,KAAK,EAAE,IAAI,OAAO,WAAW,GAAG,WAAW,IAAI,WAAW,GAAA,CAAM,GAClFA,EACR,IAEYyG,EAAA,WAAWjG,GAAI,CAACR,OACrBA,EAAA,QAAQ,cAAeA,EAAM,QAAQ,cAAc,CAAC,GAAyB,IAAI,CAAC2X,OAClFA,EAAU,cACZA,EAAU,YAAY,KAEjBA,EACR,GACD3X,EAAM,QAAQ,WAAW,KAAK,EAAE,IAAI,OAAO,WAAW,GAAG,WAAW,IAAI,WAAW,GAAA,CAAO,GACnFA,EACR;AAAA,YAEL;AAAA,YACD,UAAA;AAAA,UAAA;AAAA,UA5BK;AAAA,QA8BN;AAAA,QACA,gBAAAlC;AAAA,UAACoN;AAAA,UAAA;AAAA,YAEC,SAAS,CAAC,OAAO;AAAA,YACjB,WAAU;AAAA,YACV,MAAM;AAAA,cACJ,OAAO;AAAA,gBACL;AAAA,kBACE,KAAK;AAAA,kBACL,OAAO;AAAA,kBACP,SAAS,MAAM+M,EAAgB,OAAO;AAAA,kBACtC,UAAA7T;AAAA,gBACF;AAAA,gBACA;AAAA,kBACE,KAAK;AAAA,kBACL,OAAO;AAAA,kBACP,UAAAA;AAAA,kBACA,SAAS,MAAM;AACA,oBAAAqC,EAAA,WAAWjG,GAAI,CAACR,OAC3BA,EAAM,QAAQ,cAAeA,EAAM,QAAQ,cAAc,CAAA,GAA0B;AAAA,sBACjF,CAAC2X,OACKA,EAAU,cACZA,EAAU,YAAY,KAEjBA;AAAA,oBAEX,GACO3X,EACR,GACDiY,EAAgB,SAAS;AAAA,kBAAA;AAAA,gBAC3B;AAAA,cACF;AAAA,YAEJ;AAAA,YAEA,UAAA,gBAAAvS,EAACyF,GAAO,EAAA,MAAK,QAAO,OAAO,EAAE,eAAe,cAAc,YAAY,OAAA,GACnE,UAAA;AAAA,cAAAvK;AAAA,cAAU;AAAA,gCAAEwX,IAAa,CAAA,CAAA;AAAA,YAAA,EAC5B,CAAA;AAAA,UAAA;AAAA,UAnCI;AAAA,QAAA;AAAA,MAqCR;AAAA,MAEA,4BAAC,OAAI,EAAA,WAAU,cACb,UAAC,gBAAA1S,EAAA,OAAA,EAAI,WAAU,gCACZ,UAAA;AAAA,QAAE,EAAA+R,GAAY,SAAS,MACrB,gBAAA3Z,EAAAqL,EAAW,MAAX,EAAgB,MAAM,aAAa,WAAW,iBAAiB,UAEhE,gBAAA,CAAA;AAAA,QAEDsO,EAAW,IAAI,CAACE,GAAW1J,MAC1B,gBAAAnQ;AAAA,UAAC4O;AAAAA,UAAA;AAAA,YAEC,OAAAuB;AAAA,YACA,OAAO0J,EAAU;AAAA,YACjB,MAAMA,GAAW;AAAA,YACjB,IAAIA,EAAU;AAAA,YACd,WAAWA,EAAU;AAAA,YACrB,iBAAiBF,EAAW;AAAA,YAC5B,UAAArT;AAAA,YACA,WAAAxD;AAAA,YACA,cAAc4D;AAAA,YACd,gBAAgB,CAACmD,MAAQ;AACV,cAAAlB,EAAA,WAAWjG,GAAI,CAACR,MAAU;AACrC,sBAAMqY,IAAiBrY,EAAM,QAAQ,WAAW,KAAK,CAAC+H,MAC7CA,EAAE,OAAO4P,EAAU,EAC3B;AACD,uBAAIhQ,MACF0Q,EAAe,YAAY,KAE7BA,EAAe,YAAY1Q,GACpB3H;AAAA,cAAA,CACR;AAAA,YACH;AAAA,YACA,UAAUkH,EAAMP,GAAW,SAAS,EACjC;AAAA,cAAK,EAAE,YAAYQ,EAAE,MAAMA,EAAE,CAAC,EAAE;AAAA,cAAG,CAAC,EAAE,YAAAsQ,QACrCA,EAAW,KAAK,CAAC1P,MAAM,OAAOA,KAAM,YAAYA,KAAK,QAAQA,KAAKA,EAAE,OAAO4P,GAAW,EAAE;AAAA,YAAA,EAEzF,UAAU,MAAM,EAAK;AAAA,YACxB,UAAU,MAAM;AACD,cAAAlR,EAAA,WAAWjG,GAAI,CAACR,OAC3BA,EAAM,QAAQ,aAAaA,EAAM,QAAQ,WAAW;AAAA,gBAClD,CAAC+H,MAAuBA,GAAG,OAAO4P,GAAW;AAAA,cAC/C,IAEK3X,EAAM,QAAQ,cAAc,CAAC,GAAG,WAAW,MAC9CA,EAAM,QAAQ,cAAeA,EAAM,QAAQ,cAAc,CAAA,GAA0B;AAAA,gBACjF,CAAC2X,OACKA,EAAU,cACZA,EAAU,YAAY,KAEjBA;AAAAA,cAEX,IAGK3X,EACR,GACYyG,EAAA,qBAAqBkR,GAAW,EAAY;AAAA,YAC3D;AAAA,YACA,UAAU,CAACW,MAAc;AACV,cAAA7R,EAAA,WAAWjG,GAAI,CAACR,MAAU;AACrC,sBAAMqY,IAAiBrY,EAAM,QAAQ,WAAW,KAAK,CAAC+H,MAC7CA,EAAE,OAAO4P,EAAU,EAC3B;AAED,uBAAAU,EAAe,YAAYC,GACpBtY;AAAA,cAAA,CACR;AAAA,YAAA;AAAA,UACH;AAAA,UAzDK2X,EAAU;AAAA,QA2DlB,CAAA;AAAA,MAAA,EAAA,CACH,EACF,CAAA;AAAA,IAAA;AAAA,EACF;AAEJ,GAEMQ,KAeD,CAAC;AAAA,EACJ,IAAA3X;AAAA,EACA,OAAAX;AAAA,EACA,MAAAsM;AAAA,EACA,UAAAmD;AAAA,EACA,UAAAlL;AAAA,EACA,cAAAwC,IAAe;AAAA,EACf,UAAA2R;AAAA,EACA,UAAAC;AAAA,EACA,OAAAvK,IAAQ;AAAA,EACR,WAAAwK,IAAY;AAAA,EACZ,gBAAAC;AAAA,EACA,iBAAAC;AAAA,EACA,WAAA/X;AAAA,EACA,cAAAgP;AACF,MAAM;AACJ,QAAM,CAACgJ,GAAOC,CAAQ,IAAIlb,EAASkC,CAAK;AACxC,EAAAiZ,GAAgB,MAAM;AACpB,IAAIF,MAAU/Y,KACZgZ,EAAShZ,CAAK;AAAA,EAChB,GACC,CAACA,CAAK,CAAC;AAEJ,QAAAkZ,IAAe,CAACpR,MAAgB;AACpC,IAAAkR,EAASlR,CAAG,GACZ2H,IAAW3H,CAAG;AAAA,EAChB,GAEMqR,IAAc/K,MAAU0K,IAAkB,GAE1CM,IACJR,KAAa7X,MAAc,WAAWoY,KAAe/K,IAAQ,MAAMpO,KAAS,KAAK,OAAO,GAAG,WAAW;AAExG,SACG,gBAAA6F,EAAA,OAAA,EAAI,WAAWhC,EAAK,yBAAyB8U,KAAY,UAAUrM,GAAM,UAAU,QAAQA,GAAM,MAAM,EAAE,GACxG,UAAA;AAAA,IAAA,gBAAAzG;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,WAAWhC,EAAK,kCAAkCuV,KAAU,+CAA+C;AAAA,QAEzG,UAAA;AAAA,WAAUhL,MAAA,KAAKrN,MAAc,cAC7B,gBAAA9C;AAAA,YAACqN;AAAA,YAAA;AAAA,cACC,UAAA/G;AAAA,cACA,WAAWV,EAAK,wCAAwC;AAAA,cACxD,MAAM;AAAA,cACN,MAAM;AAAA,cACP,UAAA;AAAA,YAAA;AAAA,UAED;AAAA,UAED9C,MAAc,aAAaqN,IAAQ,KAClC,gBAAAnQ;AAAA,YAACqN;AAAA,YAAA;AAAA,cACC,WAAWzH,EAAK,0CAA0CuV,KAAU,UAAU;AAAA,cAC9E,MAAM;AAAA,cACN,MAAM;AAAA,cACN,UAAA7U;AAAA,cACA,SAAS,MAAM;AACT,gBAAA4U,KAAepY,MAAc,WAC/B8X,IAAiB,EAAK;AAAA,cAE1B;AAAA,cACD,UAAA;AAAA,YAAA;AAAA,UAED;AAAA,UAED9X,MAAc,aAAaqN,IAAQ,KAAK+K,KACvC,gBAAAlb;AAAA,YAACqN;AAAA,YAAA;AAAA,cACC,WAAWzH,EAAK,0CAA0C,CAACuV,KAAU,UAAU;AAAA,cAC/E,MAAM;AAAA,cACN,MAAM;AAAA,cACN,UAAA7U;AAAA,cACA,SAAS,MAAM;AACT,gBAAA4U,KAAepY,MAAc,WAC/B8X,IAAiB,EAAI;AAAA,cAEzB;AAAA,cACD,UAAA;AAAA,YAAA;AAAA,UAED;AAAA,UAEF,gBAAA5a;AAAA,YAAC;AAAA,YAAA;AAAA,cACC,OAAO;AAAA,gBACL,UAAU;AAAA,cAAA;AAAA,YACZ;AAAA,UACF;AAAA,UACC,CAACsG,KAAYwC,KACX,gBAAA9I,EAAA+S,IAAA,EAAW,OAAM,qBAAoB,QAAO,UAAS,WAAW,MAAM0H,IAAA,GACrE,UAAC,gBAAAza,EAAAqN,GAAA,EAAO,WAAU,iCAAgC,MAAK,SAAQ,MAAK,QAAO,MAAM,gBAAArN,EAACgT,IAAe,CAAA,CAAA,EAAA,CAAI,EACvG,CAAA;AAAA,UAEF,gBAAAhT;AAAA,YAAC4O;AAAA,YAAA;AAAA,cACC,IAAAlM;AAAA,cACA,MAAK;AAAA,cACL,UAAUmM,GAAS;AAAA,cACnB,WAAWjJ,EAAK8U,KAAY,0BAA0B;AAAA,YAAA;AAAA,UAAA;AAAA,QACxD;AAAA,MAAA;AAAA,IACF;AAAA,IACC,CAACS,KACC,gBAAAnb,EAAA,OAAA,EAAI,WAAU,oCACb,UAAA,gBAAAA;AAAA,MAACoI;AAAA,MAAA;AAAA,QACC,OAAO;AAAA,UACL,UAAU;AAAA,UACV,YAAY;AAAA,UACZ,OAAO;AAAA,QACT;AAAA,QACA,aAAaiG,GAAM,QAAQ,WAAW,WAAW;AAAA,QACjD,eAAeA,GAAM,QAAQ,WAAW;AAAA,QACxC,OAAOyM;AAAA,QACP,SAAS;AAAA,QACT,UAAAxU;AAAA,QACA,UAAU2U;AAAA,QACV,cAAAnJ;AAAA,MAAA;AAAA,IAAA,EAEJ,CAAA;AAAA,EAAA,GAEJ;AAEJ,GAEMsI,KAeD,CAAC,EAAE,IAAA1X,GAAI,OAAAX,GAAO,MAAAsM,GAAM,UAAAmD,GAAU,UAAAlL,GAAU,cAAAwC,IAAe,IAAM,UAAA2R,GAAU,UAAAC,GAAU,cAAA5I,QAAmB;AACvG,QAAM,CAACgJ,GAAOC,CAAQ,IAAIlb,EAASkC,CAAK;AACxC,EAAAiZ,GAAgB,MAAM;AACpB,IAAIF,MAAU/Y,KACZgZ,EAAShZ,CAAK;AAAA,EAChB,GACC,CAACA,CAAK,CAAC;AAEJ,QAAAkZ,IAAe,CAACpR,MAAgB;AACpC,IAAAkR,EAASlR,CAAG,GACZ2H,IAAW3H,CAAG;AAAA,EAChB;AAGE,SAAA,gBAAAjC;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,WAAWhC,EAAK,yBAAyB,WAAW8U,KAAY,UAAUrM,GAAM,UAAU,QAAQA,GAAM,MAAM,EAAE;AAAA,MAEhH,UAAA;AAAA,QAAA,gBAAArO,EAAC,OAAI,EAAA,WAAW4F,EAAK,kCAAkC,GACrD,UAAA,gBAAA5F;AAAA,UAACoI;AAAA,UAAA;AAAA,YACC,OAAO;AAAA,cACL,UAAU;AAAA,cACV,YAAY;AAAA,cACZ,OAAO;AAAA,YACT;AAAA,YACA,aAAaiG,GAAM,QAAQ,WAAW,WAAW;AAAA,YACjD,eAAeA,GAAM,QAAQ,WAAW;AAAA,YACxC,OAAOyM;AAAA,YACP,SAAS;AAAA,YACT,UAAAxU;AAAA,YACA,UAAU2U;AAAA,YACV,cAAAnJ;AAAA,UAAA;AAAA,QAAA,GAEJ;AAAA,QACC,CAACxL,KAAYwC,KACZ,gBAAA9I,EAAC,OAAI,EAAA,WAAU,iCACb,UAAA,gBAAAA,EAAC+S,IAAW,EAAA,OAAM,qBAAoB,QAAO,UAAS,WAAW,MAAM0H,IAAW,GAChF,UAAC,gBAAAza,EAAAqN,GAAA,EAAO,WAAU,iCAAgC,MAAK,SAAQ,MAAK,QAAO,MAAM,gBAAArN,EAACgT,IAAe,CAAA,CAAA,EAAI,CAAA,EACvG,CAAA,GACF;AAAA,QAEF,gBAAAhT;AAAA,UAAC4O;AAAA,UAAA;AAAA,YACC,IAAAlM;AAAA,YACA,MAAK;AAAA,YACL,UAAUmM,GAAS;AAAA,YACnB,WAAWjJ,EAAK8U,KAAY,0BAA0B;AAAA,UAAA;AAAA,QAAA;AAAA,MACxD;AAAA,IAAA;AAAA,EACF;AAEJ,GCrealG,KAAsB,CAAC4G,GAAwBC,MAAoC;AACxF,QAAAC,KAAUF,KAAU,IAAI,KAAK,GAC7BG,KAAUF,KAAU,IAAI,KAAK;AAEnC,SAAOC,MAAWC;AACpB,GAOaC,KAAqB,CAChCC,GACAC,GACA1U,MACsB;AAChB,QAAA2U,IAAQC,GAAaH,GAAc,SAAS,IAAIC,GAAe,SAAS,CAAC,GAAG1U,CAAO,GACnF6U,IAAQC,GAAaL,GAAc,SAAS,CAAA,GAAIC,GAAe,SAAS,EAAE;AACzE,SAAA;AAAA,IACL,OAAAC;AAAA,IACA,OAAAE;AAAA,EACF;AACF,GAEaD,KAAe,CAC1BG,GACAC,GACAhV,MACG;AACG,QAAAiV,IAAajV,GAAS,cAAc,CAAC,GACrCkV,IAAclV,GAAS,eAAe,CAAC,GAGvCmV,wBAAe,IAAI;AAGzB,UAACJ,KAAgB,CAAA,GAAI,QAAQ,CAACK,MAAY;AAClC,UAAAC,KAAWL,KAAiB,CAAA,GAAI,KAAK,CAACzF,MAAMA,EAAE,OAAO6F,EAAQ,EAAE;AAErE,QAAI,CAACC;AAEM,MAAAF,EAAA,IAAIC,EAAQ,IAAI;AAAA,QACvB,GAAGA;AAAA,QACH,OAAO;AAAA,UACL,QAAQ;AAAA,QAAA;AAAA,MACV,CACD;AAAA,SACI;AACL,YAAM9Y,IAAiC,CAAC;AAEpC,OAAA+Y,EAAQ,SAAS,MAAMD,EAAQ,SAAS,KAAKC,EAAQ,SAAS,MAAMD,EAAQ,SAAS,MACrFjN,EAAA,IAAI7L,GAAQ,YAAY;AAAA,QACxB,QAAQ;AAAA,QACR,eAAe+Y,EAAQ;AAAA,MAAA,CACxB,GAGCA,EAAQ,SAASD,EAAQ,QACzBjN,EAAA,IAAI7L,GAAQ,QAAQ;AAAA,QACpB,QAAQ;AAAA,QACR,eAAe+Y,EAAQ;AAAA,MAAA,CACxB;AAGG,YAAAC,IAAoBlT,EAAM,CAACgT,EAAQ,MAAMC,EAAQ,IAAI,CAAC,EACzD;AAAA,QAAK,CAACvN,EAAS,QAAQA,EAAS,MAAM;AAAA,QAAG,MACxCyK,IAAqB,iBAAiB6C,GAAS,SAASC,GAAS,OAAO;AAAA,MAAA,EAEzE;AAAA,QAAK,CAACvN,EAAS,OAAOA,EAAS,KAAK;AAAA,QAAG,MACtCuK,IAAoB,iBAAiB+C,GAAS,SAASC,GAAS,OAAO;AAAA,MAAA,EAExE;AAAA,QAAK,CAACvN,EAAS,YAAYA,EAAS,UAAU;AAAA,QAAG,MAChDwF,IAAyB,iBAAiB8H,GAAS,SAASC,GAAS,OAAO;AAAA,MAAA,EAE7E;AAAA,QAAK,CAACvN,EAAS,eAAeA,EAAS,aAAa;AAAA,QAAG,MACtDC,IAA4B,iBAAiBqN,GAAS,SAASC,GAAS,OAAO;AAAA,MAAA,EAEhF,KAAK,CAACvN,EAAS,UAAUA,EAAS,QAAQ,GAAG,MAAM;AAClD,cAAM/F,IAAeoN,IAAuB,iBAAiBiG,GAAS,SAASC,GAAS,OAAO;AAC/F,eAAOjT,EAAMgT,GAAS,OAAO,EAC1B,KAAK/S,EAAE,QAAQ,OACVN,GAAS,OAAO,QAAQ,QAAQ,WAAW,cAC3CoG,EAAA,IAAI7L,GAAQ,WAAW;AAAA,UACvB,QAAQ;AAAA,UACR,eAAeyF,GAAS,OAAO,QAAQ,QAAQ;AAAA,QAAA,CAChD,GAEIA,GAAS,OACjB,EACA,UAAU,MAAMA,CAAO;AAAA,MAC3B,CAAA,EACA;AAAA,QAAK,CAAC+F,EAAS,QAAQA,EAAS,MAAM;AAAA,QAAG,MACxC2K,IAAqB,iBAAiB2C,GAAS,SAASC,GAAS,OAAO;AAAA,MAC1E,EACC,UAAU,MAAM;AACT,cAAAE,IAAYN,EAAW,KAAK,CAACO,MAAQA,EAAI,SAASJ,EAAQ,IAAI;AACpE,YAAIG;AACF,iBAAOA,GAAW,iBAAiBH,GAAS,SAASC,GAAS,OAAO;AAGvE,cAAMI,IAAaP,EAAY;AAAA,UAC7B,CAACtX,MAASwX,GAAS,SAAS,gBAAgBA,GAAS,SAAS,SAASxX,GAAM;AAAA,QAC/E;AACA,eAAI6X,IACKA,GAAY,gBAAgBL,GAAS,SAASC,GAAS,OAAO,IAGhE;AAAA,MAAA,CACR;AAEH,MACE,OAAO,KAAK/Y,CAAY,EAAE,OAAO,CAAC7C,MAAQA,MAAQ,UAAU,EAAE,SAAS,KACvE6b,GAAmB,OAAO,WAAW,aAE5BH,EAAA,IAAIC,EAAQ,IAAI;AAAA,QACvB,GAAGA;AAAA,QACH,SAASE,KAAqBF,EAAQ;AAAA,QACtC,OAAO;AAAA,UACL,QAAQ;AAAA,UACR,QAAA9Y;AAAA,QAAA;AAAA,MACF,CACD,IACQ,OAAO,KAAKA,CAAY,EAAE,WAAW,KAAKA,GAAQ,UAAU,WAAW,UACvE6Y,EAAA,IAAIC,EAAQ,IAAI;AAAA,QACvB,GAAGA;AAAA,QACH,SAASE,KAAqBF,EAAQ;AAAA,QACtC,OAAO;AAAA,UACL,QAAQ;AAAA,UACR,QAAA9Y;AAAA,QAAA;AAAA,MACF,CACD,IAEQ6Y,EAAA,IAAIC,EAAQ,IAAI;AAAA,QACvB,GAAGA;AAAA,QACH,OAAO;AAAA,UACL,QAAQ;AAAA,QAAA;AAAA,MACV,CACD;AAAA,IACH;AAAA,EACF,CACD,IAGAJ,KAAiB,CAAA,GAAI,QAAQ,CAACK,MAAY;AACzC,IAAKF,EAAS,IAAIE,EAAQ,EAAE,KACjBF,EAAA,IAAIE,EAAQ,IAAI;AAAA,MACvB,GAAGA;AAAA,MACH,OAAO;AAAA,QACL,QAAQ;AAAA,MAAA;AAAA,IACV,CACD;AAAA,EACH,CACD,GAEM,MAAM,KAAKF,EAAS,OAAA,CAAQ;AACrC,GAEaL,KAAe,CAACY,GAA8BC,MAAkC;AACrF,QAAAC,wBAAe,IAAI;AAGzB,UAACF,KAAgB,CAAA,GAAI,QAAQ,CAACG,MAAY;AAGxC,KAFiBF,KAAiB,CAAA,GAAI,KAAK,CAAC1P,MAAMA,EAAE,OAAO4P,EAAQ,EAAE,IAU1DD,EAAA,IAAIC,EAAQ,IAAI;AAAA,MACvB,GAAGA;AAAA,MACH,OAAO;AAAA,QACL,QAAQ;AAAA,MAAA;AAAA,IACV,CACD,IAZQD,EAAA,IAAIC,EAAQ,IAAI;AAAA,MACvB,GAAGA;AAAA,MACH,OAAO;AAAA,QACL,QAAQ;AAAA,MAAA;AAAA,IACV,CACD;AAAA,EAQH,CACD,IAGAF,KAAiB,CAAA,GAAI,QAAQ,CAACG,MAAY;AACzC,IAAKF,EAAS,IAAIE,EAAQ,EAAE,KACjBF,EAAA,IAAIE,EAAQ,IAAI;AAAA,MACvB,GAAGA;AAAA,MACH,OAAO;AAAA,QACL,QAAQ;AAAA,MAAA;AAAA,IACV,CACD;AAAA,EACH,CACD,GAEM,MAAM,KAAKF,EAAS,OAAA,CAAQ;AACrC,GAyBavN,KAAuB,CAClC0N,GACAC,GACAhW,IAA0B,CAAA,MAClB;AACR,QAAM,EAAE,SAAAiW,IAAU,MAAM,eAAAC,EAAkB,IAAAlW,GAEpCmW,IAAQ,CAACva,MAAYA,EAAKqa,CAAO,KAAKra,EAAK,KAE3Cwa,IAAS,IAAI,IAAIJ,EAAQ,IAAI,CAACpa,GAAMuN,MAAU,CAACgN,EAAMva,CAAI,GAAG,EAAE,GAAGA,GAAM,OAAAuN,EAAO,CAAA,CAAC,CAAC,GAChFkN,IAAS,IAAI,IAAIN,EAAQ,IAAI,CAACna,GAAMuN,MAAU,CAACgN,EAAMva,CAAI,GAAG,EAAE,GAAGA,GAAM,OAAAuN,EAAO,CAAA,CAAC,CAAC,GAEhFmN,IAAgC,CAAC,GAEjCC,wBAAiB,IAAY,GAC7BC,wBAAe,IAAY;AAEzB,EAAAT,EAAA,QAAQ,CAACna,GAAMuN,MAAU;AAC/B,IAAKiN,EAAO,IAAID,EAAMva,CAAI,CAAC,KACzB2a,EAAW,IAAIpN,CAAK;AAAA,EACtB,CACD,GAEO6M,EAAA,QAAQ,CAACpa,GAAMuN,MAAU;AAC/B,IAAKkN,EAAO,IAAIF,EAAMva,CAAI,CAAC,KACzB4a,EAAS,IAAIrN,CAAK;AAAA,EACpB,CACD;AAEK,QAAAsN,IAAuB,CAACC,GAAkBC,MAA8B;AACtE,UAAAC,IAAmB,MAAM,KAAKL,CAAU,EAAE,OAAO,CAAChd,MAAMA,IAAIod,CAAQ,EAAE,QACtEE,IAAiB,MAAM,KAAKL,CAAQ,EAAE,OAAO,CAACjd,MAAMA,IAAImd,CAAQ,EAAE,QAElEI,IAAmBH,IAAWC;AAGpC,WAFyBF,IAAWG,MAERC;AAAA,EAC9B;AAEQ,SAAAf,EAAA,QAAQ,CAACna,GAAM+a,MAAa;AAClC,UAAMI,IAAUX,EAAO,IAAID,EAAMva,CAAI,CAAC;AAEtC,QAAI,CAACmb;AACH,MAAAT,EAAY,KAAK;AAAA,QACf,GAAG1a;AAAA,QACH,eAAe+a;AAAA,QACf,OAAO;AAAA,UACL,QAAQ;AAAA,UACR,UAAAA;AAAA,QAAA;AAAA,MACF,CACD;AAAA,SACI;AACL,YAAMK,IAAoBP,EAAqBM,EAAQ,OAAOJ,CAAQ,GAChEM,IAAUf,IAAgBA,EAActa,GAAMmb,CAAO,IAAI,EAAE,YAAY,GAAM;AAE/E,MAAAE,EAAQ,cAAcD,IACxBV,EAAY,KAAK;AAAA,QACf,GAAG1a;AAAA,QACH,eAAe+a;AAAA,QACf,OAAO;AAAA,UACL,QAAQ;AAAA,UACR,iBAAiBK;AAAA,UACjB,eAAeD,EAAQ;AAAA,UACvB,UAAAJ;AAAA,UACA,GAAIM,EAAQ,SAAS,EAAE,QAAQA,EAAQ,OAAA,IAAW,CAAA;AAAA,QAAC;AAAA,MACrD,CACD,IAEDX,EAAY,KAAK;AAAA,QACf,GAAG1a;AAAA,QACH,eAAe+a;AAAA,QACf,OAAO;AAAA,UACL,QAAQ;AAAA,QAAA;AAAA,MACV,CACD;AAAA,IACH;AAAA,EACF,CACD,GAEOX,EAAA,QAAQ,CAACpa,GAAM8a,MAAa;AAClC,QAAI,CAACL,EAAO,IAAIF,EAAMva,CAAI,CAAC,GAAG;AAC5B,UAAIsb,IAAcR;AAElB,aAAOQ,IAAcZ,EAAY,UAAUF,EAAO,IAAID,EAAMG,EAAYY,CAAW,CAAC,CAAC,GAAG,QAAQR;AAC9F,QAAAQ;AAGU,MAAAZ,EAAA,OAAOY,GAAa,GAAG;AAAA,QACjC,GAAGtb;AAAA,QACH,eAAe8a;AAAA,QACf,WAAW;AAAA,QACX,OAAO;AAAA,UACL,QAAQ;AAAA,UACR,eAAeA;AAAA,QAAA;AAAA,MACjB,CACD;AAAA,IAAA;AAAA,EACH,CACD,GAIMJ,EAAY,IAAI,CAAC,EAAE,eAAAa,GAAe,WAAAC,GAAW,GAAGxb,EAAK,MAAMA,CAAoB;AACxF,GAEayb,KAAmB,CAAC1H,MAA0B;AACrD,MAAA,CAACA,EAAa,QAAA;AAClB,QAAM2H,IAAoB;AACnB,SAAA,MAAM,KAAK3H,CAAI,EACnB,IAAI,CAAC4H,MAASA,IAAOD,CAAiB,EACtC,KAAK,EAAE;AACZ,GAEaE,KAAkB,CAACC,GAAsB1X,MAC7C,CAACsX,GAAiBtX,CAAa,GAAG,MAAM0X,CAAY,EAAE,KAAK,GAAG,GCtV1DC,KAAgB,OAAO,SAAS,GCEhCC,KAAoB,CAACC,OACzB;AAAA,EACL,IAAIA,GAAM;AAAA,EACV,UAAUA,GAAM;AAAA,EAChB,MAAMA,GAAM;AAAA,EACZ,UAAUA,GAAM;AAAA,EAChB,MAAMA,GAAM;AAAA,EACZ,cAAcA,EAAK,gBAAgB;AAAA,EACnC,cAAcA,EAAK,gBAAgB;AACrC,IAGWC,KAAiB,CAACja,OACtB;AAAA,EACL,IAAIA,EAAK;AAAA,EACT,MAAMA,EAAK;AAAA,EACX,UAAUA,EAAK;AAAA,EACf,QAAQA,EAAK8Z,EAAa,GAAG,YAAY;AAAA,EACzC,OAAO9Z,EAAK8Z,EAAa,GAAG,YAAY;AAAA,EACxC,UAAU9Z,EAAK8Z,EAAa,GAAG;AAAA,EAC/B,MAAM;AAAA,IACJ,MAAM9Z,EAAK;AAAA,IACX,MAAMA,GAAM,SAAS;AAAA,EAAA;AAEzB,IAEWka,KAAkB,CAACnD,MACvBA,EAAM,IAAIkD,EAAc,GAGpBE,KAAiB,CAACH,OACtB;AAAA,EACL,IAAIA,EAAK;AAAA,EACT,QAAQA,EAAK;AAAA,EACb,MAAMA,GAAM,QAAQ;AAAA,EACpB,QAAQA,EAAK;AAAA,EACb,OAAOA,EAAK;AAAA,EACZ,cAAcA,EAAK;AAAA,EACnB,cAAcA,EAAK;AAAA,EACnB,WAAW,EAAE,MAAMI,GAAW,aAAa,OAAO,IAAI,QAAQ,GAAG;AACnE,IAGWC,KAAkB,CAACpD,MACvBA,EAAM,OAAO,CAAC+C,MAASA,EAAK,YAAYA,EAAK,QAAQ,EAAE,IAAIG,EAAc;ACjBtE,IAAA7Y,sBAAAA,OACVA,EAAAgZ,EAAA,QAAA,CAAA,IAAA,SACAhZ,EAAAgZ,EAAA,SAAA,CAAA,IAAA,UACAhZ,EAAAgZ,EAAA,gBAAA,CAAA,IAAA,iBACAhZ,EAAAgZ,EAAA,iBAAA,CAAA,IAAA,kBAJUhZ,IAAAA,KAAA,CAAA,CAAA;AAkGL,MAAMiZ,KAA4B5f,EAAM,cAK5C,EAAS,GAMC6f,KAAsF,CAAC5d,MAAU;AACtG,QAAA,EAAE,UAAA/B,MAAa+B,GAEfC,IAAaC;AAAA,IACjB,MACEC,GAAwC,EAAE,OAAO;AAAA,MAC/C,IAAI;AAAA,MACJ,UAAU;AAAA,MACV,eAAe,EAAE,OAAO,IAAI,OAAO,CAAA,EAAG;AAAA,MACtC,eAAe;AAAA,MACf,UAAU,CAAC;AAAA,MACX,WAAW;AAAA,MACX,MAAM;AAAA,MACN,UAAU;AAAA,MACV,cAAc;AAAA,MACd,YAAY,CAAC;AAAA,MACb,aAAa,CAAC;AAAA,MACd,aAAa;AAAA,MACb,QAAQ,CAAC;AAAA,MACT,aAAa,aAAa,QAAQ,kBAAkB,MAAM;AAAA,MAC1D,WAAW,CAAC;AAAA,MACZ,YAAY,CAAA;AAAA,IAAC,EACb;AAAA,IACJ,CAAA;AAAA,EACF,GAEMC,IAAgBF;AAAA,IACpB,MACEC,GAA4C,OAAO;AAAA,MACjD,UAAU;AAAA,MACV,gBAAgB;AAAA,IAAA,EAChB;AAAA,IACJ,CAAA;AAAA,EACF,GAEM0d,IAAiB3d;AAAA,IACrB,MACEC,GAA6C,OAAO;AAAA,MAClD,YAAY2d,GAAU;AAAA,MACtB,YAAYA,GAAU;AAAA,MACtB,gBAAgBA,GAAU;AAAA,MAC1B,mBAAmBA,GAAU;AAAA,IAAA,EAC7B;AAAA,IACJ,CAAA;AAAA,EACF,GAEMzd,IAAUH;AAAA,IACd,OAAO;AAAA,MACL,mBAAmB,CAACuc,IAAU,OAAO;AACnC,cAAM,EAAE,YAAAsB,EAAA,IAAeF,EAAe,SAAS,GACzC,EAAE,eAAAlW,EAAA,IAAkB1H,EAAW,SAAS,GACxC,CAAK,EAAA,EAAA+d,CAAa,IAAID,EAAW;AAEvC,YAAIE,IAAa;AAEjB,QAAAD,IAAgBvB,CAAO;AACvB,cAAMyB,IAAmBzd,EAAQkH,GAAe,CAACjH,MAAU;AACjD,UAAA+b,EAAA;AAAA,YAAQ,CAACpa,MACfuF,EAAMvF,CAAC,EACJ,KAAK,EAAE,MAAM,cAAc,CAAC8b,MAAM;AAC3B,oBAAA/a,IAAO1C,EAAM,MAAM,KAAK,CAACqU,MAAMA,EAAE,OAAOoJ,EAAE,EAAE;AAC9C,cAAA/a,KAAQ+a,EAAE,YAAY,CAACxf,EAAMyE,EAAK,UAAU+a,EAAE,QAAQ,MAC3CF,IAAA,IACb7a,EAAK,WAAW+a,EAAE;AAAA,YACpB,CACD,EACA,KAAK,EAAE,MAAM,aAAa,GAAG,CAACnW,MAAM;AAC7B,oBAAA5E,IAAO1C,EAAM,MAAM,KAAK,CAACqU,MAAMA,EAAE,OAAO/M,EAAE,EAAE;AAC9C,cAAA5E,KAAQ,CAACzE,EAAMyE,EAAK8Z,EAAa,GAAG,YAAYlV,EAAE,UAAU,MACjDiW,IAAA,IACR7a,EAAA8Z,EAAa,MAAM,CAAC,GACpB9Z,EAAA8Z,EAAa,EAAE,aAAa,EAAE,QAAQlV,EAAE,YAAY,QAAQ,OAAOA,EAAE,YAAY,MAAM;AAAA,YAC9F,CACD,EACA,KAAK,EAAE,MAAM,SAAS,GAAG,CAACS,MAAM;AACzB,oBAAArF,IAAO1C,EAAM,MAAM,KAAK,CAACqU,MAAMA,EAAE,OAAOtM,EAAE,EAAE;AAElD,cAAIrF,KAAQA,EAAK8Z,EAAa,GAAG,aAAazU,EAAE,aACjCwV,IAAA,IACR7a,EAAA8Z,EAAa,MAAM,CAAC,GACpB9Z,EAAA8Z,EAAa,EAAE,WAAWzU,EAAE;AAAA,YACnC,CACD,EACA,UAAU,MAAM;AAAA,YAEhB,CAAA;AAAA,UACL;AAAA,QAAA,CACD;AAED,QAAKwV,MAILhe,EAAW,SAAS,EAAE,eAAeie,EAAA,CAAkB,GACzC9d,EAAA,SAAA,EAAW,WAAW8d,CAAgB;AAAA,MACtD;AAAA,MACA,mBAAmB,CAACzB,IAAU,OAAO;AACnC,cAAM,EAAE,eAAA9U,EAAA,IAAkB1H,EAAW,SAAS,GACxC,EAAE,YAAAme,EAAA,IAAeP,EAAe,SAAS;AAG/C,YADYO,GAAA,UAAU,CAAC,EAAE3B,CAAO,GAC5BA,EAAQ,KAAK,CAAC,MAAM,EAAE,SAAS,QAAQ,GAAG;AAC5C,gBAAMyB,IAAmBzd,EAAQkH,GAAe,CAACjH,MAAU;AACzD,kBAAM2Z,KAAS3Z,EAAM,SAAS,CAAA,GAC3B,IAAI,CAAC0c,MACWX,EAAQ,KAAK,CAAC4B,MAAW,QAAQA,KAAUA,EAAO,OAAOjB,EAAK,EAAE,GACnE,SAAS,WACZ,OAEFA,CACR,EACA,OAAO,CAACha,MAAS,CAAC,CAACA,CAAI;AAC1B,YAAA1C,EAAM,QAAQ2Z;AAAA,UAAA,CACf;AAED,UAAApa,EAAW,SAAS,EAAE,eAAeie,EAAA,CAAkB,GACzC9d,EAAA,SAAA,EAAW,WAAW8d,CAAgB;AAAA,QAAA;AAAA,MAExD;AAAA,MACA,UAAU,CAAC/D,IAAwB,OAAO;AACxC,cAAM,EAAE,YAAA4D,EAAA,IAAeF,EAAe,SAAS,GACzC,EAAE,eAAAlW,EAAA,IAAkB1H,EAAW,SAAS;AAC9C,QAAA8d,GAAY,UAAU,CAAC,EAAET,GAAgBnD,CAAK,CAAC;AAE/C,cAAM+D,IAAmBzd,EAAQkH,GAAe,CAACjH,MAAU;AACzD,UAAAA,EAAM,QAAQyZ;AAAA,QAAA,CACf;AAED,QAAAla,EAAW,SAAS,EAAE,eAAeie,EAAA,CAAkB,GACzC9d,EAAA,SAAA,EAAW,WAAW8d,CAAgB;AAAA,MACtD;AAAA,MACA,UAAU,CAAC/D,MAA0B;AACnC,cAAM,EAAE,YAAA4D,EAAA,IAAeF,EAAe,SAAS,GACzC,EAAE,eAAAlW,EAAA,IAAkB1H,EAAW,SAAS;AAG9C,QADiB8d,EAAW,QAAQ,CAAC,GAAG,KAAK,CAAChJ,MAAMA,EAAE,SAASzH,EAAS,KAAK,MAE3E6M,IAAQA,EAAM,OAAO,CAACpF,MAAMA,EAAE,SAASzH,EAAS,KAAK,IAG5CyQ,EAAA,QAAQ,CAAC,IAAI,CAAChJ,MAAMA,EAAE,OAAOuI,GAAgBnD,CAAK,CAAC,CAAC;AAC/D,cAAM+D,IAAmBzd,EAAQkH,GAAe,CAACjH,MAAU;AACzD,UAAAA,EAAM,SAASA,EAAM,SAAS,CAAC,GAAG,OAAOyZ,CAAK;AAAA,QAAA,CAC/C;AAED,QAAAla,EAAW,SAAS,EAAE,eAAeie,EAAA,CAAkB,GACzC9d,EAAA,SAAA,EAAW,WAAW8d,CAAgB;AAAA,MACtD;AAAA,MACA,gBAAgB,CAACI,MAAQ;AACvB,cAAM,EAAE,YAAAP,GAAY,YAAAK,MAAeP,EAAe,SAAS,GACrD,EAAE,eAAAlW,EAAA,IAAkB1H,EAAW,SAAS;AAE9C,YAAIka,KAASxS,GAAe,SAAS,CAAA,GAAI,OAAO,CAACoN,MAAMuJ,EAAI,SAASvJ,EAAE,EAAE,CAAC;AAOrE,YALagJ,EAAW,QAAQ,CAAC,GAAG,KAAK,CAAChJ,MAAMA,EAAE,SAASzH,EAAS,KAAK,MAE3E6M,IAAQA,EAAM,OAAO,CAACpF,MAAMA,EAAE,SAASzH,EAAS,KAAK,IAGnD6M,EAAM,WAAW;AACnB;AAGF,cAAMoE,IAAkCpE,EAAM;AAAA,UAC5C,CAACzR,GAAK8V,OAAU;AAAA,YACd,GAAG9V;AAAA,YACH,CAAC8V,EAAK,EAAE,GAAG,OAAO,WAAW;AAAA,UAAA;AAAA,UAE/B,CAAA;AAAA,QACF,GAEMC,IAAWtE,EAAM,IAAkB,CAAC/W,OAAU;AAAA,UAClD,GAAGA;AAAA,UACH,IAAImb,EAAQnb,EAAK,EAAE;AAAA,UACnB,UAAU;AAAA,YACR,GAAGA,EAAK,UAAU,KAAK;AAAA,YACvB,IAAIA,EAAK,UAAU,KAAK,KAAK;AAAA,UAAA;AAAA,QAC/B,EACA,GAEIsb,IAAa,OAAO,KAAKH,CAAO,GAChCI,IAA2B,CAAC;AAE9B,QAAAF,EAAS,SAAS,MACnBL,EAAW,UAAU,CAAC,KAAK,CAAA,GAAI,QAAQ,CAAChB,MAAS;AAC5C,UAAAsB,EAAW,SAAStB,EAAK,MAAM,KAAKsB,EAAW,SAAStB,EAAK,MAAM,KACrEuB,EAAS,KAAK;AAAA,YACZ,IAAI,OAAO,WAAW;AAAA,YACtB,MAAMvB,EAAK;AAAA,YACX,UAAUmB,EAAQnB,EAAK,MAAM;AAAA,YAC7B,UAAUmB,EAAQnB,EAAK,MAAM;AAAA,YAC7B,cAAcA,EAAK,gBAAgB;AAAA,YACnC,cAAcA,EAAK,gBAAgB;AAAA,UAAA,CACpC;AAAA,QACH,CACD,GAGQW,EAAA,QAAQ,CAAC,IAAI,CAAChJ,MAAMA,EAAE,OAAO0J,EAAS,IAAIpB,EAAc,CAAC,CAAC,GAC1De,EAAA,QAAQ,CAAC,IAAI,CAAC3S,MAAMA,EAAE,OAAOkT,EAAS,IAAIpB,EAAc,CAAC,CAAC;AACrE,cAAMW,IAAmBzd,EAAQkH,GAAe,CAACjH,MAAU;AACnD,UAAAA,EAAA,MAAM,KAAK,GAAG+d,CAAQ,GACtB/d,EAAA,MAAM,KAAK,GAAGie,CAAQ;AAAA,QAAA,CAC7B;AAED,QAAA1e,EAAW,SAAS,EAAE,eAAeie,EAAA,CAAkB,GACzC9d,EAAA,SAAA,EAAW,WAAW8d,CAAgB;AAAA,MACtD;AAAA,MACA,WAAW,CAACI,MAAQ;AAClB,cAAM,EAAE,gBAAAM,GAAgB,YAAAb,MAAeF,EAAe,SAAS;AAC/D,YAAI,CAACe,EAAe,WAAW,CAACb,EAAW;AACzC;AAGI,cAAA,CAAC5D,CAAK,IAAI4D,EAAW,SACrBc,IAAY1E,EAAM,OAAO,CAACpF,MAAMuJ,EAAI,SAASvJ,EAAE,EAAE,CAAC;AAEzC,QAAA6J,EAAA,QAAQ,UAAUC,CAAS;AAAA,MAC5C;AAAA,MACA,YAAY,MAAM;AAChB,cAAM,EAAE,gBAAAD,EAAA,IAAmBf,EAAe,SAAS;AACnD,QAAAe,EAAe,SAAS,aAAa;AAAA,MACvC;AAAA,MACA,aAAa,CAACN,IAAM,OAAO;AACzB,cAAM,EAAE,YAAAP,GAAY,YAAAK,MAAeP,EAAe,SAAS,GACrD,EAAE,eAAAlW,GAAe,WAAAlD,MAAcxE,EAAW,SAAS;AAEzD,QAAA8d,EAAW,QAAQ,CAAC,IAAI,CAAC5D,MAAUA,EAAM,OAAO,CAACpF,MAAMuJ,EAAI,MAAM,CAACpd,MAAO6T,EAAE,OAAO7T,CAAE,CAAC,CAAC,GACtFkd,EAAW,QAAQ,CAAC;AAAA,UAAI,CAAC/D,MACvBA,EAAM;AAAA,YAAO,CAAC5O,MACZ6S,EAAI,MAAM,CAACpd,MAAOuK,EAAE,WAAWvK,KAAMuK,EAAE,WAAWvK,KAAMuK,EAAE,iBAAiBvK,KAAMuK,EAAE,iBAAiBvK,CAAE;AAAA,UAAA;AAAA,QAE1G;AAEA,cAAMgd,IAAmBzd,EAAQkH,GAAe,CAACjH,MAAU;AACnD,gBAAAyZ,IAAQzZ,EAAM,SAAS,CAAC,GACxB2Z,IAAQ3Z,EAAM,SAAS,CAAC;AAC9B,UAAAA,EAAM,QAAQyZ,EAAM,OAAO,CAACpF,MAAMuJ,EAAI,MAAM,CAACpd,MAAO6T,EAAE,OAAO7T,CAAE,CAAC,GAChER,EAAM,QAAQ2Z,EAAM;AAAA,YAAO,CAAC5O,MAC1B6S,EAAI,MAAM,CAACpd,MAAOuK,EAAE,aAAavK,KAAMuK,EAAE,aAAavK,KAAMuK,EAAE,iBAAiBvK,KAAMuK,EAAE,iBAAiBvK,CAAE;AAAA,UAC5G;AAAA,QAAA,CACD,GAEK4d,IAAere,EAAQgE,GAAW,CAAC/D,MAAU;AAC7C,UAAA4d,EAAA,QAAQ,CAACpd,MAAO;AAClB,YAAIA,KAAMR,KACR,OAAOA,EAAMQ,CAAE;AAAA,UACjB,CACD;AAAA,QAAA,CACF;AAED,QAAAjB,EAAW,SAAS,EAAE,eAAeie,GAAkB,WAAWY,GAAc,GAClE1e,EAAA,SAAA,EAAW,WAAW8d,CAAgB;AAAA,MACtD;AAAA,MACA,UAAU,CAAC7D,MAA0B;AACnC,cAAM,EAAE,YAAA+D,EAAA,IAAeP,EAAe,SAAS,GACzC,EAAE,eAAAlW,EAAA,IAAkB1H,EAAW,SAAS;AAEnC,QAAAme,EAAA,UAAU,CAAC,IAAI,CAACW,MAAQA,EAAI,OAAO1E,EAAM,IAAIkD,EAAc,CAAC,CAAC;AACxE,cAAMW,IAAmBzd,EAAQkH,GAAe,CAACjH,MAAU;AACzD,UAAAA,EAAM,SAASA,EAAM,SAAS,CAAC,GAAG,OAAO2Z,CAAK;AAAA,QAAA,CAC/C;AAED,QAAApa,EAAW,SAAS,EAAE,eAAeie,EAAA,CAAkB,GACzC9d,EAAA,SAAA,EAAW,WAAW8d,CAAgB;AAAA,MACtD;AAAA,MACA,UAAU,CAAC7D,IAAQ,OAAO;AACxB,cAAM,EAAE,YAAA+D,EAAA,IAAeP,EAAe,SAAS,GACzC,EAAE,eAAAlW,EAAA,IAAkB1H,EAAW,SAAS;AAE9C,QAAAme,GAAY,UAAU,CAAC,IAAIX,GAAgBpD,CAAK,CAAC;AACjD,cAAM6D,IAAmBzd,EAAQkH,GAAe,CAACjH,MAAU;AACzD,UAAAA,EAAM,QAAQ2Z;AAAA,QAAA,CACf;AAED,QAAApa,EAAW,SAAS,EAAE,eAAeie,EAAA,CAAkB,GACzC9d,EAAA,SAAA,EAAW,WAAW8d,CAAgB;AAAA,MACtD;AAAA,MACA,aAAa,CAACI,MAAQ;AACpB,cAAM,EAAE,YAAAF,EAAA,IAAeP,EAAe,SAAS,GACzC,EAAE,eAAAlW,EAAA,IAAkB1H,EAAW,SAAS;AAE9C,QAAAme,GAAY,UAAU,CAAC,IAAI,CAAC/D,MAAUA,EAAM,OAAO,CAAC5O,MAAM,CAAC6S,EAAI,KAAK,CAACpd,MAAOuK,EAAE,OAAOvK,CAAE,CAAC,CAAC;AACzF,cAAMgd,IAAmBzd,EAAQkH,GAAe,CAACjH,MAAU;AACzD,UAAAA,EAAM,QAAQA,EAAM,MAAM,OAAO,CAAC+K,MAAM,CAAC6S,EAAI,KAAK,CAACpd,MAAOuK,EAAE,OAAOvK,CAAE,CAAC;AAAA,QAAA,CACvE;AAED,QAAAjB,EAAW,SAAS,EAAE,eAAeie,EAAA,CAAkB,GACzC9d,EAAA,SAAA,EAAW,WAAW8d,CAAgB;AAAA,MACtD;AAAA,MACA,sBAAsB,CAACc,MAAqB;AAC1C,YAAI,CAACA,EAAU;AACf,cAAM,EAAE,YAAAZ,EAAA,IAAeP,EAAe,SAAS,GACzC,EAAE,eAAAlW,EAAA,IAAkB1H,EAAW,SAAS;AAC9C,QAAAme,GAAY,UAAU,CAAC,IAAI,CAAC/D,MAAUA,EAAM,OAAO,CAAC5O,MAAMA,EAAE,iBAAiBuT,CAAQ,CAAC;AACtF,cAAMd,IAAmBzd,EAAQkH,GAAe,CAACjH,MAAU;AACnD,UAAAA,EAAA,QAAQA,EAAM,MAAM,OAAO,CAAC+K,MAAMA,EAAE,iBAAiBuT,CAAQ;AAAA,QAAA,CACpE;AAED,QAAA/e,EAAW,SAAS,EAAE,eAAeie,EAAA,CAAkB,GACzC9d,EAAA,SAAA,EAAW,WAAW8d,CAAgB;AAAA,MACtD;AAAA,MACA,YAAY,CAAChd,GAAI+d,MAAY;AAC3B,cAAM,EAAE,eAAAtX,EAAA,IAAkB1H,EAAW,SAAS,GACxC,EAAE,YAAA8d,EAAA,IAAeF,EAAe,SAAS,GACzC,CAAC1D,GAAO+E,CAAQ,IAAInB,EAAW,SAE/BG,IAAmBzd,EAAQkH,GAAe,CAACjH,MAAU;AACnD,gBAAA0C,KAAQ1C,EAAM,SAAS,CAAC,GAAG,KAAK,CAAC0C,MAASA,GAAM,OAAOlC,CAAE;AAC/D,UAAKkC,KAIL6b,EAAQ7b,CAAI;AAAA,QAAA,CACb,GAEK+b,IAAcjB,EAAiB,MAAM,KAAK,CAACnJ,MAAMA,EAAE,OAAO7T,CAAE;AAClE,YAAI,CAACie;AACH;AAGI,cAAAC,IAAmB/B,GAAe8B,CAA2B,GAC7DE,IAAoBlF,EAAM,KAAK,CAACpF,MAAMA,EAAE,OAAO7T,CAAE;AACvD,QAAKvC,EAAMygB,GAAkBC,CAAiB,KACnCH,EAAA,CAAC/E,MAAUA,EAAM,IAAI,CAACpF,MAAOA,EAAE,OAAO7T,IAAKke,IAAmBrK,CAAE,CAAC,GAG5E9U,EAAW,SAAS,EAAE,eAAeie,EAAA,CAAkB,GACzC9d,EAAA,SAAA,EAAW,WAAW8d,CAAgB;AAAA,MACtD;AAAA,MACA,kBAAkB,CAACoB,GAAO9Z,IAAU,OAAO;AACzC,cAAM,EAAE,eAAAmC,EAAA,IAAkB1H,EAAW,SAAS,GACxC,EAAE,YAAAme,GAAY,YAAAL,MAAeF,EAAe,SAAS,GACrD,EAAE,mBAAA0B,IAAoB,GAAA,IAAU/Z,GAEhC0Y,IAAmBzd,EAAQkH,GAAe,CAACjH,MAAU;AAClD,iBAAA,OAAOA,GAAO4e,CAAK;AAAA,QAAA,CAC3B;AAEW,QAAAlB,GAAA,UAAU,CAAC,EAAEX,GAAgBS,GAAkB,SAAS,CAAA,CAAE,CAAC,GAC3DH,GAAA,UAAU,CAAC,EAAET,GAAgBY,GAAkB,SAAS,CAAA,CAAE,CAAC,GACvEje,EAAW,SAAS;AAAA,UAClB,eAAeie;AAAA,QAAA,CAChB,GACIqB,KACWnf,EAAA,SAAA,EAAW,WAAW8d,CAAgB;AAAA,MAExD;AAAA,MACA,oBAAoB,CAACjE,GAAcC,MAAkB;AACnD,cAAM,EAAE,YAAAO,GAAY,aAAAC,MAAgBza,EAAW,SAAS;AACjD,eAAA+Z,GAAmBC,GAAcC,GAAe;AAAA,UACrD,YAAAO;AAAA,UACA,aAAAC;AAAA,QAAA,CACD;AAAA,MACH;AAAA,MACA,kBAAkB,CAAC8E,MAAWvf,EAAW,SAAS,EAAE,eAAeuf,GAAQ;AAAA,MAC3E,UAAU,CAACte,MAAe;AACxB,YAAIjB,EAAW,WAAW,cAAc;AACtC;AAGF,cAAM,EAAE,mBAAAwf,EAAA,IAAsB5B,EAAe,SAAS;AAClD,YAAA,CAAC4B,EAAkB;AACrB;AAGF,cAAMrc,IAAOqc,EAAkB,QAAQ,QAAQve,CAAE;AACjD,QAAKkC,KAIaqc,EAAA,QAAQ,QAAQ,EAAE,OAAO,CAACrc,CAAI,GAAG,UAAU,KAAO,SAAS,KAAA,CAAM;AAAA,MACrF;AAAA,MACA,SAAS,CAAClC,MAAe;AACvB,cAAM,EAAE,UAAAwe,EAAA,IAAazf,EAAW,SAAS,GACnC0f,IAASD,EAAS,KAAK,CAAC3gB,MAAMA,MAAMmC,CAAE;AAE5C,YAAIA,MAAO;AACT,iBAAOjB,EAAW,SAAS,EAAE,WAAWiB,GAAI;AAG9C,QAAIye,IACF1f,EAAW,SAAS,EAAE,WAAW0f,EAAA,CAAQ,IAE9B1f,EAAA,SAAS,EAAE,UAAU,CAAC,GAAGyf,GAAUxe,CAAE,GAAG,WAAWA,GAAI;AAAA,MAEtE;AAAA,MACA,UAAU,CAACA,GAAY0e,MAAoB;AACzC,cAAM,EAAE,UAAAF,GAAU,WAAA7I,MAAc5W,EAAW,SAAS,GAC9C0O,IAAQ+Q,GAAU,UAAU,CAAC3gB,MAAMA,MAAMmC,CAAE,GAC3C2e,IAAMH,IAAW/Q,CAAK,GAEtBmR,IAAclY,EAAMgY,CAAM,EAC7B,KAAK,QAAW,MAAMF,EAAS,OAAO,CAACxe,MAAOA,MAAO2e,CAAG,CAAC,EACzD,KAAK,SAAS,MAAMH,EAAS,OAAO,CAACxe,MAAOA,MAAO2e,CAAG,CAAC,EACvD,KAAK,aAAa,MAAM,CAAA,CAAE,EAC1B,KAAK,eAAe,MAAMH,EAAS,OAAO,CAACxe,MAAOA,MAAO2e,CAAG,CAAC,EAC7D,KAAK,eAAe,MAAMH,EAAS,MAAM,GAAG/Q,IAAQ,CAAC,CAAC,EACtD,KAAK,cAAc,MAAM+Q,EAAS,MAAM/Q,CAAK,CAAC,EAC9C,UAAU,MAAM+Q,CAAQ,GAErBK,IAAyD;AAAA,UAC7D,UAAUD;AAAA,QACZ;AAGA,QADuBA,GAAa,KAAK,CAAC/gB,MAAMA,MAAM8X,CAAS,MAE7DkJ,EAAa,YAAYD,IAAcnR,IAAQ,CAAC,KAAK,UAGvD1O,EAAW,SAAS8f,CAAY;AAAA,MAClC;AAAA,MACA,gBAAgB,CAACC,MAAmB;AAClC,cAAM,EAAE,QAAAC,EAAA,IAAWhgB,EAAW,SAAS,GACjC8f,IAAyD;AAAA,UAC7D,aAAaC,MAAU,SAAY,UAAaC,KAAU,CAAA,GAAI,KAAK,CAAC9B,MAAMA,EAAE,OAAO6B,CAAK,GAAG;AAAA,QAC7F;AACc,QAAA5f,EAAA,SAAA,GAAY,iBAAiB4f,CAAK,GAChD/f,EAAW,SAAS8f,CAAY;AAAA,MAClC;AAAA,MACA,gBAAgB,CAACG,MAAkB;AACjC,cAAMH,IAAyD;AAAA,UAC7D,aAAaG;AAAA,QACf;AACA,qBAAa,QAAQ,oBAAoB,GAAGA,CAAI,EAAE,GAClDjgB,EAAW,SAAS8f,CAAY;AAAA,MAClC;AAAA,MACA,mBAAmB,MAAM;AACvB,cAAM,EAAE,aAAAjV,EAAA,IAAgB7K,EAAW,SAAS,GACtCigB,IAAO,CAACpV,GACRiV,IAAyD;AAAA,UAC7D,aAAaG;AAAA,QACf;AACA,qBAAa,QAAQ,oBAAoB,GAAGA,CAAI,EAAE,GAClDjgB,EAAW,SAAS8f,CAAY;AAAA,MAClC;AAAA,MACA,aAAa,CAAC7e,GAAI6S,GAAMoM,MAAO;AAC7B,cAAM,EAAE,WAAA1b,EAAA,IAAcxE,EAAW,SAAS,GAEpC6e,IAAere,EAAQgE,GAAW,CAAC/D,MAAU;AAC3C,UAAAA,EAAAQ,CAAE,MAAM,CAAC,GACTR,EAAAQ,CAAE,EAAE6S,CAAI,IAAIoM;AAAA,QAAA,CACnB;AAED,QAAAlgB,EAAW,SAAS,EAAE,WAAW6e,EAAA,CAAc;AAAA,MACjD;AAAA,MACA,gBAAgB,CAAC5d,GAAI6S,MAAS;AAC5B,cAAM,EAAE,WAAAtP,EAAA,IAAcxE,EAAW,SAAS,GAEpC6e,IAAere,EAAQgE,GAAW,CAAC/D,MAAU;AAC7C,UAAEQ,KAAMR,MAIRqT,IACEA,KAAQrT,EAAMQ,CAAE,KACX,OAAAR,EAAMQ,CAAE,EAAE6S,CAAI,IAGvB,OAAOrT,EAAMQ,CAAE;AAAA,QACjB,CACD;AAED,QAAAjB,EAAW,SAAS,EAAE,WAAW6e,EAAA,CAAc;AAAA,MACjD;AAAA,MACA,mBAAmB,CAAC5d,GAAIgf,MAAS;AAC/B,cAAM,EAAE,eAAAvY,EAAA,IAAkB1H,EAAW,SAAS,GACxC,EAAE,YAAA8d,GAAY,YAAAK,MAAeP,EAAe,SAAS,GACrD,CAAG,EAAAqB,CAAQ,IAAInB,EAAW,SAC1B,CAAG,EAAAqC,CAAQ,IAAIhC,EAAW,SAE1BF,IAAmBzd,EAAQkH,GAAe,CAACjH,MAAU;AACnD,gBAAA2f,IAAa3f,EAAM,MAAM,KAAK,CAACqU,MAAMA,EAAE,OAAO7T,CAAE;AACtD,UAAKmf,MAIDH,MAAS,UACLxf,EAAA,MAAM,QAAQ,CAACqU,MAAM;AACrB,YAAAA,EAAEmI,EAAa,MACfnI,EAAAmI,EAAa,EAAE,WAAW;AAAA,UAC9B,CACD,GAGQmD,EAAAnD,EAAa,MAAM,CAAC,GAC/BmD,EAAWnD,EAAa,EAAE,WAAWtV,EAAMsY,CAAI,EAC5C,KAAK,QAAQ,MAAM,EAAI,EACvB,UAAU,MAAM,CAACG,EAAWnD,EAAa,GAAG,QAAQ;AAAA,QAAA,CACxD;AAEQ,QAAAgC,EAAA5B,GAAgBY,EAAiB,KAAK,CAAC,GAC5CgC,KAAQ,UACVE;AAAA,UAAS,CAAC/F,MACRA,EAAM,IAAI,CAAC5O,OAAO;AAAA,YAChB,GAAGA;AAAA,YACH,UAAU;AAAA,UAAA,EACV;AAAA,QACJ,GAEFxL,EAAW,SAAS,EAAE,eAAeie,EAAA,CAAkB,GACzC9d,EAAA,SAAA,EAAW,WAAW8d,CAAgB;AAAA,MAAA;AAAA,IACtD;AAAA,IAEF,CAAA;AAAA,EACF;AAGE,SAAA,gBAAA1f;AAAA,IAACmf,GAA0B;AAAA,IAA1B;AAAA,MACC,OAAO;AAAA,QACL,YAAA1d;AAAA,QACA,gBAAA4d;AAAA,QACA,eAAAzd;AAAA,QACA,SAAAC;AAAA,MACF;AAAA,MAEC,UAAApC;AAAA,IAAA;AAAA,EACH;AAEJ;AAEgB,SAAA+G,EACdxD,GACAC,IAAsC9C,GACnC;AACH,SAAOZ,EAAM,WAAW4f,EAAyB,EAAE,WAAWnc,GAAUC,CAAM;AAChF;AAEgB,SAAAyS,GACd1S,GACAC,IAAsC9C,GACnC;AACH,SAAOZ,EAAM,WAAW4f,EAAyB,EAAE,cAAcnc,GAAUC,CAAM;AACnF;AAEgB,SAAA6e,GACd9e,GACAC,IAAsC9C,GACnC;AACH,SAAOZ,EAAM,WAAW4f,EAAyB,EAAE,eAAenc,GAAUC,CAAM;AACpF;AAEO,SAAS2F,KAA6D;AACpE,SAAArJ,EAAM,WAAW4f,EAAyB,EAAE;AACrD;AAEO,SAAS4C,KAAsB;AAC7B,SAAAxiB,EAAM,WAAW4f,EAAyB;AACnD;AAEa,MAAA7Q,KAAc,CAAC5L,MAAe;AACzC,QAAM,EAAE,MAAA2L,GAAM,aAAAoC,EAAgB,IAAAjK,EAAsB,CAACyD,MAAM;AACnD,UAAArF,KAAQqF,GAAG,eAAe,SAAS,CAAA,GAAI,KAAK,CAACrF,MAASA,EAAK,OAAOlC,CAAE;AAEnE,WAAA;AAAA,MACL,MAAMkC,GAAM;AAAA,MACZ,aAAaA,GAAM,SAAS;AAAA,IAC9B;AAAA,EAAA,CACD;AACM,SAAA;AAAA,IACL,MAAAyJ;AAAA,IACA,aAAAoC;AAAA,EACF;AACF,GAEauR,KAAc,CAACtf,MAAe;AACzC,QAAM,EAAE,MAAA2L,EAAA,IAAS7H,EAAsB,CAACyD,OAG/B;AAAA,IACL,OAHYA,GAAG,eAAe,SAAS,CAAA,GAAI,KAAK,CAAC2U,MAASA,EAAK,OAAOlc,CAAE,GAG5D;AAAA,EACd,EACD;AACM,SAAA;AAAA,IACL,MAAA2L;AAAA,EACF;AACF,GCnqBa4T,KAAuD,CAAC;AAAA,EACnE,IAAAvf;AAAA,EACA,cAAA2H;AAAA,EACA,OAAAtI;AAAA,EACA,MAAAgK;AAAA,EACA,UAAAzF,IAAW;AAAA,EACX,cAAAwC,IAAe;AAAA,EACf,UAAA0I;AAAA,EACA,YAAAyK;AAAA,EACA,aAAAC;AAAA,EACA,oBAAAgG;AAAA,EACA,QAAAT;AAAA,EACA,UAAAvY;AAAA,EACA,cAAAF;AAAA,EACA,eAAAC;AAAA,EACA,gBAAAkZ;AAAA,EACA,iBAAAC;AAAA,EACA,iBAAAC;AAAA,EACA,iBAAA5M;AACF,MAAM;AACE,QAAA6M,IAAa/c,EAAO,EAAK,GACzBoD,IAAeC,GAAwB,GACvC,EAAE,YAAAnH,GAAY,eAAAG,EAAc,IAAImgB,GAAoB,GACpD,EAAE,eAAA5Y,MAAkB3C,EAAsB,CAAC,EAAE,eAAA2C,SAAqB;AAAA,IACtE,eAAAA;AAAAA,EAAA,EACA,GAEIoZ,IAAcC,GAAqB,CAAC1B,MAA6B;AACrE,IAAAtP,IAAWsP,CAAK;AAAA,KACf,GAAG;AAEN,SAAAtb,EAAU,MAAM;AACd,IAAA/D,EAAW,SAAS;AAAA,MAClB,IAAAiB;AAAA,MACA,UAAA4D;AAAA,MACA,cAAAwC;AAAA,MACA,YAAY,MAAM,QAAQmT,CAAU,IAAIA,IAAa,CAAC;AAAA,MACtD,aAAa,MAAM,QAAQC,CAAW,IAAIA,IAAc,CAAC;AAAA,MACzD,QAAAuF;AAAA,IAAA,CACD;AAAA,EAAA,GACA,CAAC/e,GAAI4D,GAAUwC,GAAcmT,GAAYC,GAAauF,CAAM,CAAC,GAEhEjc,EAAU,MAAM;AACd,IAAA/D,EAAW,SAAS,EAAE,MAAMsK,KAAQ,cAAc;AAAA,EAAA,GACjD,CAACA,CAAI,CAAC,GAETvG,EAAU,MAAM;AACd,IAAA/D,EAAW,SAAS;AAAA,MAClB,cAAAuH;AAAA,MACA,eAAAC;AAAA,IAAA,CACD;AAAA,EAAA,GACA,CAACD,GAAcC,CAAa,CAAC,GAEhCzD,EAAU,MAAM;AACH,IAAA/D,EAAA,SAAS,EAAE,UAAAyH,GAAU;AAAA,EAAA,GAC/B,CAACA,CAAQ,CAAC,GAEb1D,EAAU,MAAM;AACd,IAAA5D,EAAc,SAAS;AAAA,MACrB,iBAAAwgB;AAAA,MACA,gBAAAD;AAAA,MACA,iBAAAE;AAAA,MACA,iBAAA5M;AAAA,IAAA,CACD;AAAA,KACA,CAAC2M,GAAiBD,GAAgBE,GAAiB5M,CAAe,CAAC,GAEtEjQ,EAAU,MAAM;AACd,IAAA5D,EAAc,SAAS,EAAE,UAAU2gB,EAAA,CAAa;AAAA,EAAA,GAC/C,CAACA,CAAW,CAAC,GAEhB/c,EAAU,MAAM;AACV,IAAA8c,EAAW,WAAWvgB,MAAU,UAAa,CAAC5B,EAAM4B,GAAOoH,CAAa,KAC1ER,EAAa,iBAAiB5G,CAAK;AAAA,EACrC,GACC,CAACA,CAAK,CAAC,GAEVyD,EAAU,MAAM;AACd,IAAIzD,MAAU,SACZ4G,EAAa,iBAAiB5G,CAAK,IAC1BsI,MAAiB,UAC1B1B,EAAa,iBAAiB0B,CAAY,GAG5C5I,EAAW,SAAS;AAAA,MAClB,aAAaygB;AAAA,IAAA,CACd,GACDI,EAAW,UAAU;AAAA,EACvB,GAAG,EAAE,GAEE;AACT,GC1HaG,KAAoB,MAAM;AACrC,MAAIC,IAAiC;AAE9B,SAAA;AAAA,IACL,MAAM,WAAWvZ,GAA8D;AACvE,YAAAwZ,IAASC,GAAwBzZ,CAAa;AACpD,UAAIuZ,KAASviB,EAAMwiB,GAAQD,EAAM,MAAM,GAAG;AACjC,eAAAG,GAAgB1Z,GAAeuZ,EAAM,QAAQ;AACpD;AAAA,MAAA;AAGF,YAAMI,IAAW,CAAC;AACP,iBAAAC,KAAOC,GAAU7Z,CAAa;AACvC,QAAA2Z,EAAS,KAAK,EAAE,IAAIC,EAAI,KAAK,IAAI,UAAUA,EAAI,SAAS,IAAI,CAACxM,MAAMA,EAAE,EAAE,GAAG,GACpE,MAAAwM;AAGA,MAAAL,IAAA,EAAE,QAAAC,GAAQ,UAAAG,EAAS;AAAA,IAAA;AAAA,EAE/B;AACF,GAIMF,KAA0B,CAAC9B,MAA6B;AAC5D,QAAMnF,IAAQmF,EAAM,MAAM,IAAI,CAACvK,MAAMA,EAAE,EAAE,GACnCsF,IAAQiF,EAAM;AAEb,SAAA,EAAE,OAAAnF,GAAO,OAAAE,EAAM;AACxB;AAOA,UAAUmH,GAAU7Z,GAA8D;AAC1E,QAAAwS,IAAQmD,GAAgB3V,EAAc,KAAK,GAC3C0S,IAAQoD,GAAgB9V,EAAc,KAAK,GAE3C8Z,IAAQ9Z,EAAc,MAAM,KAAK,CAACoN,MAAMA,EAAE,SAAS,WAAW,GAC9D2M,IAAUvH,EAAM,KAAK,CAACpF,MAAMA,EAAE,OAAO0M,GAAO,EAAE;AAMpD,MALI,CAACA,KAAS,CAACC,KAKXC,GAASD,GAASvH,GAAOE,CAAK;AAChC;AAGF,QAAM,EAAE,MAAMoH,GAAO,UAAU,CAAA,EAAG;AAC5B,QAAAG,wBAAc,IAAY;AAExB,EAAAA,EAAA,IAAIH,EAAM,EAAE;AAEpB,QAAMI,IAAQC,GAAYJ,GAASvH,GAAOE,CAAK;AACxC,SAAAwH,EAAM,SAAS,KAAG;AACjB,UAAApU,IAAUoU,EAAM,IAAI;AAC1B,QAAID,EAAQ,IAAInU,EAAQ,EAAE;AACxB;AAGF,UAAMsU,IAAWC,GAAYvU,GAAS0M,GAAOE,CAAK,GAC5C4H,IAAoBF,EAAS,OAAO,CAACG,MAAY,CAACN,EAAQ,IAAIM,EAAQ,EAAE,CAAC;AAE3E,QAAAD,EAAkB,SAAS,GAAG;AAC1B,MAAAJ,EAAA,KAAKpU,GAAS,GAAGwU,CAAiB;AACxC;AAAA,IAAA;AAGM,IAAAL,EAAA,IAAInU,EAAQ,EAAE;AAChB,UAAA0U,IAAexa,EAAc,MAAM,KAAK,CAACoN,MAAMA,EAAE,OAAOtH,EAAQ,EAAE;AACxE,QAAI0U,GAAc;AAChB,YAAMC,IAAiBza,EAAc,MAAM,OAAO,CAACoN,MAAMgN,EAAS,KAAK,CAACM,MAAQA,EAAI,OAAOtN,EAAE,EAAE,CAAC;AAChG,YAAM,EAAE,MAAMoN,GAAc,UAAUC,EAAe;AAAA,IAAA;AAGvD,UAAME,IAAWR,GAAYrU,GAAS0M,GAAOE,CAAK;AAC5C,IAAAwH,EAAA,KAAK,GAAGS,CAAQ;AAAA,EAAA;AAE1B;AAIA,UAAUjB,GAAgB1Z,GAAkCzF,GAAuD;AACjH,aAAWqgB,KAAQrgB,GAAM;AACjB,UAAAkB,IAAOuE,EAAc,MAAM,KAAK,CAACoN,MAAMA,EAAE,OAAOwN,EAAK,EAAE;AAC7D,QAAI,CAACnf;AACH;AAGI,UAAA2e,IAAWpa,EAAc,MAAM,OAAO,CAACoN,MAAMwN,EAAK,SAAS,SAASxN,EAAE,EAAE,CAAC;AACzE,UAAA,EAAE,MAAA3R,GAAM,UAAA2e,EAAS;AAAA,EAAA;AAE3B;AAEA,MAAMJ,KAAW,CAACF,GAAatH,GAAeE,MAA2B;AACjE,QAAAuH,wBAAc,IAAY,GAC1BY,wBAAqB,IAAY,GAEjCC,IAAM,CAACrf,MAAwB;AAC3B,IAAAwe,EAAA,IAAIxe,EAAK,EAAE,GACJof,EAAA,IAAIpf,EAAK,EAAE;AAE1B,UAAMkf,IAAWR,GAAY1e,GAAM+W,GAAOE,CAAK;AAC/C,eAAWqI,KAAWJ;AACpB,UAAKV,EAAQ,IAAIc,EAAQ,EAAE;AAIhB,YAAAF,EAAe,IAAIE,EAAQ,EAAE;AAC/B,iBAAA;AAAA,iBAJHD,EAAIC,CAAO;AACN,eAAA;AAOE,WAAAF,EAAA,OAAOpf,EAAK,EAAE,GACtB;AAAA,EACT;AAEA,SAAOqf,EAAIhB,CAAK;AAClB;ACvHO,MAAMkB,KAA0C;AAAA;AAAA;AAAA,EAGrD,CAACrV,EAAS,KAAK,GAAGuK;AAAA;AAAA;AAAA,EAGlB,CAACvK,EAAS,MAAM,GAAGyK;AAAA,EACnB,CAACzK,EAAS,aAAa,GAAGC;AAAA,EAC1B,CAACD,EAAS,UAAU,GAAGwF;AAAA,EACvB,CAACxF,EAAS,QAAQ,GAAGqH;AAAA,EACrB,CAACrH,EAAS,MAAM,GAAG2K;AACrB,GCVa2K,KAA0B,MAAM;AACrC,QAAA,EAAE,YAAA3iB,EAAW,IAAIsgB,GAAoB;AAG3C,SAAAvc,EAAU,MAAM;AACV,QAACM;AAIE,aAAArE,EAAW,UAAU,CAAC,EAAE,UAAAyH,GAAU,WAAAjD,GAAW,eAAAkD,KAAiBwI,MAAc;AACjF,YAAIxR,EAAM+I,GAAUyI,GAAW,QAAQ;AACrC;AAGF,cAAMsB,IAAQ7J,EAAMF,CAAQ,EACzB,KAAK,EAAE,QAAQG,EAAE,eAAe,CAAC,EAAE,QAAAC,QAAaA,EAAO,KAAK,EAC5D,UAAU,MAAM,IAAI;AACvB,YAAI2J,MAAU,MAAM;AAClB,gBAAMqN,IAAere,EAAQgE,GAAW,CAAC/D,MAAU;AACjD,mBAAO,OAAOA,CAAK,EAAE,QAAQ,CAACmiB,MAAO;AAC5B,qBAAAA,EAAGne,EAAa,KAAK,GACrB,OAAAme,EAAGne,EAAa,MAAM;AAAA,YAAA,CAC9B;AAAA,UAAA,CACF;AAED,UAAAzE,EAAW,SAAS,EAAE,WAAW6e,EAAAA,CAAc;AAC/C;AAAA,QAAA;AAGI,cAAAgE,IAAc,OAAO,OAAOrR,CAAK;AACnC,YAAAqR,EAAY,WAAW;AACzB;AAGF,cAAMhE,IAAere,EAAQgE,GAAW,CAAC/D,MAAU;AACrC,UAAAoiB,EAAA,QAAQ,CAACvL,MAAM;AAErB,YADS5P,EAAc,MAAM,KAAK,CAACoN,MAAMA,EAAE,OAAOwC,EAAE,EAAE,GAChD,SAAS,gBAIb7W,EAAA6W,EAAE,EAAE,MAAM,CAAC,GAEX7W,EAAA6W,EAAE,EAAE,EAAE7S,EAAa,MAAM,IAAI,IAAIC,GAAa4S,EAAE,UAAU,EAAE,GAC5D7W,EAAA6W,EAAE,EAAE,EAAE7S,EAAa,KAAK,IAAI,IAAIC,GAAa4S,EAAE,SAAS,EAAE;AAAA,UAAA,CACjE;AAAA,QAAA,CACF;AAED,QAAAtX,EAAW,SAAS,EAAE,WAAW6e,EAAA,CAAc;AAAA,MAAA,CAChD;AAAA,EACH,GAAG,EAAE,GAGL9a,EAAU,MAAM;AACV,QAAA,CAACM;AACH;AAGF,UAAMye,IAAc9B,GAAkB;AACtC,WAAOhhB,EAAW,UAAU,CAACmC,GAAO+N,MAAc;AAC1C,YAAA6S,IAAcC,GAAsB7gB,CAAK,GACzC8gB,IAAkBD,GAAsB9S,CAAS,GACjDgT,IAAaC,GAAsBhhB,GAAO+N,CAAS;AACzD,UAAIxR,EAAMqkB,GAAaE,CAAe,KAAK,CAACC;AAC1C;AAGF,YAAME,IAAQC,GAAelhB,GAAO+N,GAAW4S,CAAW;AAC1D,MAAIM,EAAM,cACRpjB,EAAW,SAAS,EAAE,WAAWojB,EAAM,WAAW;AAAA,IACpD,CACD;AAAA,EACH,GAAG,EAAE,GAELrf,EAAU,MAAM;AACV,QAACM;AAIL,aAAOrE,EAAW,UAAU,CAACmC,GAAO+N,MAAc;AAC1C,cAAA6S,IAAcO,GAAuBnhB,CAAK,GAC1C8gB,IAAkBK,GAAuBpT,CAAS;AACpD,YAAAxR,EAAMqkB,GAAaE,CAAe;AACpC;AAGF,cAAMM,IAAa7e,GAAa,SAAS,EAAE,QAAQ,IAAI;AACvD,QAAAvC,EAAM,cAAc,MAAM,QAAQ,CAACgB,MAAS;AAC1C,gBAAM8B,IAAW9C,EAAM,UAAUgB,EAAK,EAAE,GAClCqgB,IACJve,IAAWR,EAAa,MAAM,KAC9BQ,IAAWR,EAAa,cAAc,KACtCC,GAAa,SAAS,EAAE,QAAQ,IAAI;AAE3B,UAAA6e,EAAA,IAAIpgB,EAAK,MAAMqgB,CAAU;AAAA,QAAA,CACrC,GAEDxjB,EAAW,SAAS,EAAE,YAAY,EAAE,QAAQujB,EAAA,GAAc;AAAA,MAAA,CAC3D;AAAA,EACH,GAAG,EAAE,GAEE;AACT,GAUMF,KAAiC,CAAC,EAAE,eAAA3b,GAAe,WAAAlD,GAAW,aAAAiW,EAAY,GAAGvK,GAAW4S,MAAgB;AAC5G,MAAIW,IAAa;AACjB,QAAM5E,IAAere,EAAQgE,GAAW,CAAC/D,MAAU;AACrC,IAAAqiB,EAAA,KAAKpb,CAAa,EAAE,QAAQ,CAAC,EAAE,MAAAvE,GAAM,UAAA2e,QAAe;AAC1D,UAAA3e,EAAK,SAAS;AAChB;AAGF,YAAMugB,IAAe5B,EAClB,IAAI,CAACM,MAAQ;AACZ,cAAM9jB,IAAOmC,EAAM2hB,EAAI,EAAE,KAAK,CAAC;AAC/B,eAAO9jB,EAAKmG,EAAa,MAAM,KAAKnG,EAAKmG,EAAa,cAAc;AAAA,MACrE,CAAA,EACA,OAAO,CAAC6S,MAAM,CAAC,CAACA,CAAC,EACjB,IAAI,CAACA,MAAMA,EAAE,OAAO,GACjBqM,IAAoBhc,EAAM+b,EAAa,MAAM,EAChD,KAAK,GAAG,MAAMA,EAAa,CAAC,CAAC,EAC7B,UAAU,MAAMhf,GAAa,aAAagf,CAAY,CAAC;AAI1D,MAFyBjjB,IAAQ0C,EAAK,EAAE,IAAIsB,EAAa,aAAa,GAE/C,MAAMkf,CAAiB,MAC/BF,IAAA,IACPhjB,EAAA0C,EAAK,EAAE,MAAM,CAAC,GACpB1C,EAAM0C,EAAK,EAAE,EAAEsB,EAAa,aAAa,IAAIkf;AAG/C,YAAMC,IACJlB,GAAkBvf,EAAK,IAAgB,GAAG,cAC1CsX,EAAY,KAAK,CAAC3F,MAAMA,EAAE,SAAS3R,EAAK,IAAI,GAAG;AACjD,UAAI,CAACygB;AACH;AAGF,YAAM9iB,IACJL,IAAQ0C,EAAK,EAAE,IAAIsB,EAAa,KAAK,KACrChE,IAAQ0C,EAAK,EAAE,IAAIsB,EAAa,aAAa,KAC7CC,GAAa,SAAS,KAAK,GAEvBmf,IACJ3T,EAAU,YAAY/M,EAAK,EAAE,IAAIsB,EAAa,KAAK,KACnDyL,EAAU,YAAY/M,EAAK,EAAE,IAAIsB,EAAa,aAAa,KAC3DC,GAAa,SAAS,KAAK,GAEvB2J,IAAc6B,EAAU,cAAc,MAAM,KAAK,CAAC4E,MAAMA,EAAE,OAAO3R,EAAK,EAAE,GAAG;AAE7E,UAAA,EADgBygB,EAAW,YAAYzgB,EAAK,SAASkL,CAAW,KAAK,CAACvN,EAAM,MAAM+iB,CAAS,MAC3EpjB,IAAQ0C,EAAK,EAAE,IAAIsB,EAAa,cAAc;AAChE;AAGI,YAAAqf,IAAqBF,EAAW,oBAAoB,EAAE,OAAA9iB,GAAO,SAASqC,EAAK,SAAS;AAG1F,MAF0B1C,IAAQ0C,EAAK,EAAE,IAAIsB,EAAa,cAAc,GAEhD,MAAMqf,CAAkB,MACjCL,IAAA,IACPhjB,EAAA0C,EAAK,EAAE,MAAM,CAAC,GACpB1C,EAAM0C,EAAK,EAAE,EAAEsB,EAAa,cAAc,IAAIqf;AAAA,IAChD,CACD;AAAA,EAAA,CACF;AAEM,SAAA;AAAA,IACL,YAAAL;AAAA,IACA,WAAW5E;AAAA,EACb;AACF,GAEMmE,KAAwB,CAAC,EAAE,eAAAtb,GAAe,WAAAlD,GAAW,aAAAiW,QAAmD;AAC5G,QAAMsJ,IAAYrc,EAAc,OAC1Bsc,IAAYtc,EAAc,MAAM,IAAI,CAAC,EAAE,IAAAzG,GAAI,MAAA3C,SAAY,EAAE,IAAA2C,GAAI,MAAA3C,EAAO,EAAA,GACpE2lB,IAAkBxJ,EAAY,IAAI,CAACyJ,MAAOA,EAAG,IAAI,GAEjDC,IAAY,OAAO,QAAQ3f,CAAS,EAAE,IAAI,CAAC,CAACvD,GAAIX,CAAK,OAAO;AAAA,IAChE,IAAAW;AAAA,IACA,OAAOmjB,GAAiB9jB,EAAMmE,EAAa,KAAK,CAAC;AAAA,IACjD,QAAQ2f,GAAiB9jB,EAAMmE,EAAa,MAAM,CAAC;AAAA,EAAA,EACnD,GAEI4f,IAAc3c,EAAc,MAAM,KAAK,CAACoN,MAAMA,EAAE,SAAS,WAAW,GAAG,IACvEwP,IAAgB3c,EAAMnD,IAAY6f,KAAe,EAAE,IAAI5f,EAAa,cAAc,CAAC,EACtF,KAAKmD,EAAE,aAAa,CAACtJ,MAASA,EAAK,MAAM,EACzC,UAAU,MAAM,IAAI;AAEvB,SAAO,EAAE,WAAAylB,GAAW,WAAAC,GAAW,WAAAG,GAAW,iBAAAF,GAAiB,eAAAK,EAAc;AAC3E,GAEMnB,KAAwB,CAC5B,EAAE,eAAAzb,GAAe,aAAA+S,EAAA,GACjBvK,MAEwBxI,EAAc,MAAM,IAAI,CAACvE,MAAS;AACxD,QAAMygB,IACJlB,GAAkBvf,EAAK,IAAgB,GAAG,cAAcsX,EAAY,KAAK,CAAC3F,MAAMA,EAAE,SAAS3R,EAAK,IAAI,GAAG;AAEzG,MAAI,CAACygB;AACI,WAAA;AAGH,QAAAW,IAAWrU,EAAU,cAAc,MAAM,KAAK,CAAC4E,MAAMA,EAAE,OAAO3R,EAAK,EAAE;AAC3E,SAAKohB,IAIEX,EAAW,YAAYzgB,EAAK,SAASohB,EAAS,OAAO,IAHnD;AAGmD,CAC7D,EAEsB,KAAK,CAACC,MAAOA,CAAE,GASlCJ,KAAmB,CAAClE,MAA0C;AAClE,MAAKA;AAIL,WAAIA,EAAG,WAIJA,EAAA,SAASA,EAAG,KAAK,IACbA,EAAG;AACZ,GAEMoD,KAAyB,CAACnhB,OAWvB,EAAE,UAVQA,EAAM,cAAc,MAAM,IAAI,CAACgB,MAAS;AACvD,QAAM8B,IAAW9C,EAAM,UAAUgB,EAAK,EAAE,GAClCshB,IAAMxf,IAAWR,EAAa,MAAM,KAAKQ,IAAWR,EAAa,cAAc;AAC9E,SAAA;AAAA,IACL,IAAItB,EAAK;AAAA,IACT,MAAMihB,GAAiBK,CAAG;AAAA,IAC1B,MAAMthB,EAAK;AAAA,EACb;AAAA,CACD,EAEiB,IClQduhB,KAAY,+BAELC,KAAuB,MAAM;AACxC,QAAMzd,IAAeC,GAAwB,GACvC,EAAE,QAAA6Y,GAAQ,aAAa4E,MAAkB7f,EAAsB,CAAC,EAAE,QAAAib,GAAQ,aAAA6E,EAAAA,OAAmB;AAAA,IACjG,QAAA7E;AAAAA,IACA,aAAA6E;AAAAA,EAAA,EACA,GAEIA,IAAc5kB,EAAQ,MACnB2kB,MAAkB,SAAY,UAAa5E,KAAU,CAAA,GAAI,KAAK,CAACD,MAAUA,EAAM,OAAO6E,CAAa,GACzG,CAACA,GAAe5E,CAAM,CAAC,GAEpB8E,IAAgB7kB,EAAQ,MACrB,OAAO,WAAW,aAAa,QAAQykB,EAAS,KAAK,EAAE,KAAK,KAClE,CAACG,CAAW,CAAC;AAEZ,SAACA,IAGH,gBAAA1e;AAAA,IAAC4e;AAAA,IAAA;AAAA,MACC,WAAW;AAAA,MACX,aAAa,EAAE,QAAQD,EAAc;AAAA,MACrC,cAAc;AAAA,QACZ,QAAQ,EAAE,SAAS,OAAO;AAAA,QAC1B,MAAM,EAAE,SAAS,OAAO;AAAA,QACxB,SAAS,EAAE,SAAS,OAAO;AAAA,QAC3B,UAAU,EAAE,SAAS,OAAO;AAAA,QAC5B,OAAO,EAAE,SAAS,OAAO;AAAA,QACzB,YAAY,EAAE,SAAS,OAAO;AAAA,QAC9B,aAAa,EAAE,SAAS,OAAO;AAAA,MACjC;AAAA,MACA,WAAW;AAAA,MACX,WAAW;AAAA,MACX,UAAU,CAAC7X,GAAOrH,GAAWof,MAAe;AAC1C,qBAAa,QAAQN,IAAWM,EAAW,aAAa,UAAU;AAAA,MACpE;AAAA,MAEC,UAAA;AAAA,QAAA,CAACH,EAAY,cACX,gBAAA1e,EAAA,OAAA,EAAI,WAAW,0BACd,UAAA;AAAA,UAAA,gBAAA5H,EAAC,OAAI,EAAA,WAAW,mCACd,UAAA,gBAAAA,EAACqL,EAAW,MAAX,EAAgB,OAAO,EAAE,UAAU,GAAO,GAAA,UAAAib,EAAY,MAAM,CAAA,GAC/D;AAAA,UACA,gBAAAtmB,EAAC,SAAI,WAAW,mCACd,4BAACwW,GAAQ,EAAA,WAAU,WAAU,OAAO,eAClC,UAAA,gBAAAxW;AAAA,YAACqN;AAAA,YAAA;AAAA,cACC,MAAM;AAAA,cACN,MAAM;AAAA,cACN,MAAO,gBAAArN,EAAAmN,IAAA,EAAc,OAAO,EAAE,UAAU,MAAM;AAAA,cAC9C,SAAS,MAAMxE,EAAa,eAAe,MAAS;AAAA,YAAA;AAAA,aAExD,EACF,CAAA;AAAA,QAAA,GACF;AAAA,QAEF,gBAAA3I,EAAC,SAAI,WAAW,0BAA2B,aAAa,cAAc,CAAA,CAAE,EAAE,CAAA;AAAA,MAAA;AAAA,IAAA;AAAA,EAC5E,IAvCuB;AAyC3B,GCvDa0mB,KAAkC,CAACllB,MAAU;AACxD,QAAMmH,IAAeC,GAAwB,GACvC,EAAE,IAAAlG,GAAI,SAAAikB,GAAS,SAAAC,GAAS,SAAAC,GAAS,SAAAC,GAAS,gBAAAC,GAAgB,gBAAAC,GAAgB,OAAAhc,IAAQ,IAAI,WAAAic,EAAc,IAAAzlB,GACpG,EAAE,WAAA0lB,GAAW,UAAA5gB,MAAaE,EAAsB,CAAC,EAAE,eAAA2gB,GAAe,UAAA7gB,SAAgB;AAAA,IACtF,WAAW6gB,MAAkBzkB;AAAA,IAC7B,UAAA4D;AAAAA,EAAA,EACA,GAEI,EAAE,MAAA+H,EAAA,IAAS2T,GAAYtf,CAAE,GAEzB,CAAC0kB,GAAUC,GAAQC,CAAM,IAAIC,GAAc;AAAA,IAC/C,SAAAZ;AAAA,IACA,SAAAC;AAAA,IACA,gBAAAG;AAAA,IACA,SAAAF;AAAA,IACA,SAAAC;AAAA,IACA,gBAAAE;AAAA,EAAA,CACD;AAED,SAEI,gBAAApf,EAAAE,IAAA,EAAA,UAAA;AAAA,IAAA,gBAAA9H;AAAA,MAACwnB;AAAA,MAAA;AAAA,QACC,MAAMJ;AAAA,QACN,WAAAH;AAAA,QACA,OAAO;AAAA,UACL,GAAIjc,KAAS,CAAC;AAAA,UACd,QAAQ5B,EAAMiF,CAAI,EACf,KAAK,EAAE,QAAQ,QAAQ,GAAG,MAAM,0BAA0B,EAC1D,KAAK,EAAE,QAAQ,UAAU,GAAG,MAAM,wBAAwB,EAC1D,UAAU;WAAe;AAAA,QAAA;AAAA,MAC9B;AAAA,IACF;AAAA,sBACCoZ,IACC,EAAA,UAAA,gBAAAznB;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,WAAW;AAAA,QACX,OAAO;AAAA,UACL,WAAW,mCAAmCqnB,CAAM,MAAMC,CAAM;AAAA,QAClE;AAAA,QAEC,WAAChhB,KACA,gBAAAtG;AAAA,UAACqN;AAAA,UAAA;AAAA,YACC,MAAK;AAAA,YACL,OAAM;AAAA,YACN,wBAAO2F,IAAe,EAAA;AAAA,YACtB,QAAM;AAAA,YACN,WAAWpN,EAAK,wBAAwB;AAAA,YACxC,gBAAcshB;AAAA,YACd,SAAS,MAAMve,EAAa,YAAY,CAACjG,CAAE,CAAC;AAAA,UAAA;AAAA,QAAA;AAAA,MAC9C;AAAA,IAAA,EAGN,CAAA;AAAA,EAAA,GACF;AAEJ,GAEaglB,KAAe,CAACC,MAAe,CAACnmB,wBAAgBklB,IAAY,EAAA,GAAGllB,GAAQ,GAAGmmB,GAAO,GCrDxFC,KAAkB,CAACjlB,MACnB,OAAOA,KAAS,WAAiB,KAC9B,MAAM,QAAQA,GAAM,KAAK,GAGrBklB,KAAoB,CAC/BC,GACAC,MACG;AACH,QAAMC,IAAMjG,GAAoB,GAC1BpZ,IAAeC,GAAwB,GAEvCyX,IAAY4H;AAAA,IAChB,OAAOtM,MAAkB;AACnB,UAAA;AACE,YAAA,CAACmM,EAAU;AACb;AAGIzH,cAAAA,KAAa2H,EAAI,WAAW,SAAA,GAAY,eAAe,SAAS,CAAA,GAAI;AAAA,UAAO,CAACzR,MAChFoF,EAAM,KAAK,CAAC/W,MAASA,EAAK,OAAO2R,EAAE,EAAE;AAAA,QACvC,GAEM2R,IAAc7H,EAAU,IAAI,CAAC9J,MAAMA,EAAE,EAAE,GACvC4R,IAA4B,CAAC;AAE/B9H,QAAAA,EAAU,SAAS,KACPyH,EAAU,QAAQ,SAAS,EACnC,QAAQ,CAAClJ,MAAS;AAClB,UAAAsJ,EAAY,SAAStJ,EAAK,MAAM,KAAKsJ,EAAY,SAAStJ,EAAK,MAAM,KACvEuJ,EAAU,KAAK;AAAA,YACb,IAAIvJ,EAAK;AAAA,YACT,MAAMA,EAAK;AAAA,YACX,UAAUA,EAAK;AAAA,YACf,UAAUA,EAAK;AAAA,YACf,cAAcA,EAAK,gBAAgB;AAAA,YACnC,cAAcA,EAAK,gBAAgB;AAAA,UAAA,CACpC;AAAA,QACH,CACD,GAQH,MAAM9H,GAAgB,KAAK,UALU;AAAA,UACnC,OAAOuJ;AAAAA,UACP,OAAO8H;AAAA,QACT,CAEkD,CAAC,GACnDzQ,EAAQ,QAAQ,sBAAsB;AAAA,eAC/BzK,GAAQ;AACP,QAAAyK,EAAA,MAAMzK,EAAE,OAAO;AAAA,MAAA;AAAA,IAE3B;AAAA,IACA,CAAC+a,CAAG;AAAA,EACN,GAEMI,IAAaH,GAAY,YAAY;AACrC,QAAA;AACE,UAAA,CAACH,GAAW;AACd;AAGI,YAAAO,IAAgB,MAAMtR,GAAmB;AAC/C,UAAI,CAACsR;AACH;AAEI,YAAAC,IAAgB,KAAK,MAAMD,CAAa;AAE1C,UAAA,CAACT,GAAgBU,CAAa;AAC1B,cAAA,IAAI,MAAM,mBAAmB;AAG/B,YAAAvI,IAAkCuI,EAAc,MAAM;AAAA,QAC1D,CAACpe,GAAK8V,OAAU;AAAA,UACd,GAAG9V;AAAA,UACH,CAAC8V,EAAK,EAAE,GAAG,OAAO,WAAW;AAAA,QAAA;AAAA,QAE/B,CAAA;AAAA,MACF,GAEMkI,IAAc,OAAO,KAAKnI,CAAO,GACjCwI,IAAST,EAAU,QAAQ,SAAA,EAAW,KAAK,CAACvR,MAAM2R,EAAY,SAAS3R,EAAE,EAAE,CAAC,GAC5EiS,IAAaF,EAAc,MAAM,KAAK,CAAC/R,MAAMA,EAAE,OAAOgS,GAAQ,EAAE,GAChEE,IAAgB;AAAA,QACpB,GAAGH,EAAc,MAAM,OAAO,CAACpe,GAAKqM,MAAMrM,IAAMqM,EAAE,SAAS,GAAG,CAAC,IAAI+R,EAAc,MAAM;AAAA,QACvF,GAAGA,EAAc,MAAM,OAAO,CAACpe,GAAKqM,MAAMrM,IAAMqM,EAAE,SAAS,GAAG,CAAC,IAAI+R,EAAc,MAAM;AAAA,MACzF,GAEM3M,IAAQ2M,EAAc,MAAM,IAAI,CAAC/R,MAAoB;AACzD,cAAMmS,IAAuB;AAAA,UAC3B,GAAGnS,GAAG,UAAU,KAAK;AAAA,UACrB,GAAGA,GAAG,UAAU,KAAK;AAAA,QACvB;AAEA,YAAIgS,KAAUC;AAGZ,UAFiBjS,EAAE,OAAOgS,EAAO,MAGtBG,EAAA,IAAIH,EAAO,SAAS,GACpBG,EAAA,IAAIH,EAAO,SAAS,IAAI,OAExBG,EAAA,IAAIH,EAAO,SAAS,IAAIC,EAAW,SAAS,IAAIjS,EAAE,SAAS,GAC3DmS,EAAA,IAAIH,EAAO,SAAS,IAAIC,EAAW,SAAS,IAAIjS,EAAE,SAAS,IAAI;AAAA,iBAEjEwR,EAAQ,SAAS;AACpB,gBAAAY,IAAOZ,EAAQ,QAAQ,sBAAsB,GAC7Ca,IAAa;AAAA,YACjB,GAAGD,EAAK,QAAQ;AAAA,YAChB,GAAGA,EAAK,SAAS;AAAA,UACnB,GAEME,IAAaf,EAAU,QAAS,QAAQc,CAAU;AAExD,UAAAF,EAAS,IAAInS,EAAE,SAAS,IAAIsS,EAAW,IAAIJ,EAAc,IAAI,GAC7DC,EAAS,IAAInS,EAAE,SAAS,IAAIsS,EAAW,IAAIJ,EAAc,IAAI;AAAA,QAAA;AAGxD,eAAA;AAAA,UACL,GAAGlS;AAAA,UACH,UAAAmS;AAAA,UACA,IAAI3I,EAAQxJ,EAAE,EAAE;AAAA,QAClB;AAAA,MAAA,CACD,GAEKsF,KAASyM,EAAc,SAAS,CAAA,GAAI,IAAkB,CAACrb,OAAO;AAAA,QAClE,IAAI,OAAO,WAAW;AAAA,QACtB,MAAMA,EAAE;AAAA,QACR,UAAU8S,EAAQ9S,EAAE,QAAQ;AAAA,QAC5B,UAAU8S,EAAQ9S,EAAE,QAAQ;AAAA,QAC5B,cAAcA,EAAE,gBAAgB;AAAA,QAChC,cAAcA,EAAE,gBAAgB;AAAA,MAAA,EAChC;AAMF,UAJAtE,EAAa,SAASgT,CAAK,GAC3BhT,EAAa,SAASkT,CAAK,GAC3BnE,EAAQ,QAAQ,wBAAwB,GAEpC6Q;AACE,YAAA;AACF,gBAAMzR,GAAgB,KAAK,UAAU,EAAE,OAAA6E,EAAO,CAAA,CAAC;AAAA,QAAA,QACzC;AAAA,QAAA;AAAA,IAGV,QACM;AACN,MAAAjE,EAAQ,MAAM,gCAAgC;AAAA,IAAA;AAAA,EAChD,GACC,CAACoQ,GAAWC,CAAO,CAAC;AAEhB,SAAArmB;AAAA,IACL,OAAO;AAAA,MACL,WAAA2e;AAAA,MACA,YAAA+H;AAAA,IAAA;AAAA,IAEF,CAAC/H,GAAW+H,CAAU;AAAA,EACxB;AACF,GCxJaU,KAAkDvpB,EAAM,KAAK,CAAC,EAAE,eAAAwpB,GAAe,UAAAziB,QAAe;AACzG,QAAM0iB,IAAmBxiB,EAAsB,CAACuK,MAAUA,EAAM,cAAc,EAAE,GAC1EmL,IAAc1V,EAAsB,CAACuK,MAAUA,EAAM,eAAe,EAAE,GAEtE,CAACkY,GAAQC,CAAS,IAAIrpB,EAAS,EAAE,GAEjCspB,IAAclB,GAAY,CAACvZ,GAAwBhI,GAAkB6V,MAAuB;AAChG,UAAMja,IAASoM,EAAM;AACrB,QAAI,CAACpM;AACH;AAGF,UAAM,EAAE,SAAA8mB,GAAS,SAAAC,EAAQ,IAAI3a,EAAM,aAC7B,EAAE,QAAA7D,GAAQ,OAAAC,MAAUxI,EAAO,sBAAsB,GAEjDgnB,IAA2B;AAAA,MAC/B,GAAGF,IAAUte;AAAA,MACb,GAAGue,IAAUxe;AAAA,IACf;AAEA,IAAA6D,EAAM,aAAa,gBAAgB,QAC7BA,EAAA,aAAa,QAAQ,yBAAyBhI,CAAQ,GAC5DgI,EAAM,aAAa,QAAQ,oBAAoB,KAAK,UAAU4a,CAAY,CAAC,GACvE/M,KACI7N,EAAA,aAAa,QAAQ,uBAAuB6N,CAAS;AAAA,EAE/D,GAAG,EAAE,GAECgN,IAAc7nB,EAA6C,MAAM;AAC/D,UAAA8nB,IAAwB,EAAE,GAAGrF,GAAkB,GAE/CsF,IAAqBT,EAAiB,OAAO,CAACzM,MAAc;AAChE,YAAMmN,IAAmB,OAAO,OAAO5a,CAAQ,EAAE,SAASyN,EAAU,IAAgB;AACpF,aAAImN,MACoBF,EAAAjN,EAAU,IAAgB,IAAI;AAAA,QAClD,GAAG4H,GAAkB5H,EAAU,IAAgB;AAAA,QAC/C,GAAGA;AAAA,MACL,IAEK,CAACmN;AAAA,IAAA,CACT,GACKC,IAAqD;AAAA,MACzD,MAAM,OAAO,OAAOH,CAAqB;AAAA,IAC3C;AACI,WAAAR,GAAkB,SAAS,MAC7BW,EAAc,WAAWF,KAG1BvN,KAAe,CAAA,GAAI,QAAQ,CAACtX,MAAS;AACpC,YAAMglB,IAAQhlB,EAAK,OAAO,OAAY,KAAA;AAClC,MAAAglB,EAAM,SAAS,MACbD,IAAgBC,CAAK,IACTD,EAAAC,CAAK,EAAE,KAAK,EAAE,GAAGhlB,GAAM,MAAM,cAAc,IAE3C+kB,EAAAC,CAAK,IAAI,CAAC,EAAE,GAAGhlB,GAAM,MAAM,cAAc;AAAA,IAE3D,CACD,IAEAsX,KAAe,CAAA,GAAI,QAAQ,CAACtX,MAAS;AAChC,MAACA,GAAM,UACL+kB,GAAgB,SACJA,EAAA,OAAU,KAAK,EAAE,GAAG/kB,GAAM,MAAM,cAAc,IAE9C+kB,EAAA,SAAY,CAAC,EAAE,GAAG/kB,GAAM,MAAM,cAAc;AAAA,IAE9D,CACD,GAEM+kB;AAAA,EAAA,GACN,CAACX,GAAkB9M,CAAW,CAAC,GAE5B2N,IAASnoB,EAA6C,MACnD,OAAO,KAAK6nB,CAAW,EAAE,OAAO,CAACrf,GAAKzJ,OACpC;AAAA,IACL,GAAGyJ;AAAA,IACH,CAACzJ,CAAG,IAAI8oB,EAAY9oB,CAAG,KAAK,CAAI,GAAA;AAAA,MAC9B,CAACqpB,MACC,EAAEb,GAAQ,OAAS,EAAA,SAAS,OAC3Ba,EAAG,QAAQ,IAAI,YAAc,EAAA,QAAQb,EAAO,YAAA,CAAa,IAAI,OAC5Da,EAAG,eAAe,IAAe,cAAc,QAAQb,EAAO,YAAa,CAAA,IAAI,OAChFa,EAAG,oBAAoB,IAAI,YAAA,EAAc,QAAQb,EAAO,aAAa,IAAI,OACzEa,EAAG,SAAS,IAAI,cAAc,QAAQb,EAAO,YAAY,CAAC,IAAI;AAAA,IAAA;AAAA,EAErE,IACC,EAAE,GACJ,CAACM,GAAaN,CAAM,CAAC,GAElBc,IAAcf,EAAiB,SAAS9M,EAAY;AAE1D,2BACG,OACE,EAAA,UAAA;AAAA,IAAA6N,IAAc,KACb,gBAAA/pB;AAAA,MAACiI;AAAA,MAAA;AAAA,QACC,aAAa;AAAA,QACb,OAAOghB;AAAA,QACP,UAAU,CAAChc,MAAMic,EAAUjc,EAAE,OAAO,SAAS,EAAE;AAAA,QAC/C,YAAU;AAAA,QACV,WAAW;AAAA,MAAA;AAAA,IACb;AAAA,IAEF,gBAAAjN,EAAC,OAAI,EAAA,WAAW,mCACb,UAAA,OAAO,KAAK6pB,CAAM,EAAE,IAAI,CAACD,MACjBxgB,EAAMwgB,CAAK,EACf;AAAA,MACC;AAAA,MACA,MACEC,EAAO,MAAS,SAAS,KACvB,gBAAA7pB,EAACT,EAAM,UAAN,EACG,aAAO,QAAW,IAAI,IAAI,CAACqF,MAC3B,gBAAA5E,EAACT,EAAM,UAAN,EACC,UAAA,gBAAAS;AAAA,QAACgqB;AAAA,QAAA;AAAA,UACC,UAAU5gB,EAAMxE,EAAK,IAAI,EACtB,KAAKkK,EAAS,OAAO,MAAMxI,KAAYyiB,CAAa,EACpD,UAAU,MAAMziB,CAAQ;AAAA,UAC3B,eAAe1B;AAAA,UACf,aAAa,CAAC8J,MACZyV,GAAkBvf,EAAK,IAAgB,MAAM,SACzCukB,EAAYza,GAAO9J,EAAK,IAAI,IAC5BukB,EAAYza,GAAO,cAAc,UAAU9J,IAAQA,EAAK,OAAkB,EAAE;AAAA,QAAA;AAAA,MAAA,KATjE,UAAUA,IAAQA,EAAK,OAAkBA,EAAK,IAYnE,CACD,EAAA,GAfkBglB,CAgBrB;AAAA,IAAA,EAGL;AAAA,MACC,CAACA,MACCC,EAAOD,CAAK,GAAG,SAAS,KACrB,gBAAA5pB,EAAAT,EAAM,UAAN,EACG,eAASqqB,CAAK,KAAK,CAAA,GAAI,IAAI,CAACnN,MAC5B,gBAAAzc;AAAA,QAACgqB;AAAA,QAAA;AAAA,UAEC,UAAA1jB;AAAA,UACA,eAAemW;AAAA,UACf,aAAa,CAAC/N,MACZkb,MAAU,aACNT,EAAYza,GAAO+N,EAAW,IAAI,IAClC0M,EAAYza,GAAO,cAAc,UAAU+N,IAAcA,EAAW,OAAkB,EAAE;AAAA,QAAA;AAAA,QANzF,UAAUA,IAAcA,EAAW,OAAkBA,EAAW;AAAA,MASxE,CAAA,KAZkBmN,CAarB;AAAA,IAEN,CACH,EACH,CAAA;AAAA,EAAA,GACF;AAEJ,CAAC,GAEKI,KAKF,CAAC,EAAE,eAAAnc,GAAe,UAAAvH,IAAW,IAAO,GAAG9E,0BAEtC,OAAI,EAAA,WAAWoE,EAAK,qBAAqB,GAAG,WAAW,CAACU,GAAW,GAAG9E,GACrE,UAAC,gBAAAxB,EAAA,OAAA,EAAI,OAAO,EAAE,eAAe,UAC3B,UAAA,gBAAAA;AAAA,EAAC6L;AAAA,EAAA;AAAA,IACC,UAAQ;AAAA,IACR,aAAW;AAAA,IACX,OAAOgC,EAAc;AAAA,IACrB,MAAMA,EAAc;AAAA,IACpB,MAAMA,EAAc;AAAA,IACpB,MAAMA,EAAc;AAAA,EAAA;GAExB,EACF,CAAA,GCzIEoc,KAAmB,OAAO,QAAQ9F,EAAiB,EAAE;AAAA,EACzD,CAACja,GAAK,CAACzJ,GAAKsB,CAAK,OAAO;AAAA,IACtB,GAAGmI;AAAA,IACH,CAACzJ,CAAG,GAAGlB,EAAM;AAAA,MACX,CAACiC,MAA4BO,EAAM,WAAW,EAAE,eAAeA,GAAO,GAAGP,GAAO;AAAA,MAChF,CAAC0oB,GAAWC,MAERD,EAAU,OAAOC,EAAU,MAC3BD,EAAU,aAAaC,EAAU,YACjChqB,GAAM+pB,EAAU,MAAMC,EAAU,IAAI;AAAA,IAExC;AAAA,EACF;AAAA,EAEF,CAAA;AACF,GAEMC,KAAY;AAAA,EAChB,MAAM7qB,EAAM,KAAKmoB,GAAa,IAAI,CAAC;AACrC,GAEa2C,KAAQ7hB,GAAiC,SAAoB,EAAE,qBAAA8hB,GAAqB,WAAAjlB,KAAaX,GAAK;AAC3G,QAAA6lB,IAAmBhlB,EAAuB,IAAI,GAC9C0b,IAAoB1b,EAA0B,IAAI,GAElDga,IAAaiL,GAAc,EAAE,GAC7B5K,IAAa6K,GAAc,EAAE,GAE7B,CAACC,GAAkBC,CAAmB,IAAI9qB,EAAS,EAAI,GAEvDmoB,IAAMjG,GAAoB,GAC1BpZ,IAAeC,GAAwB,GACvCgiB,IAAkB9I,GAA2B,CAAC7X,MAAMA,CAAC,GACrD,EAAE,iBAAAmY,EAAA,IAAoB1M,GAA0B,CAAC,EAAE,iBAAA0M,EAAAA,OAAuB,EAAE,iBAAAA,EAAAA,EAAkB,GAC9F,EAAE,UAAA9b,GAAU,cAAAukB,GAAc,YAAA5O,GAAY,aAAAC,EAAgB,IAAA1V;AAAA,IAC1D,CAAC,EAAE,UAAAF,GAAU,YAAA2V,GAAY,aAAAC,GAAa,eAAA/S,SAAqB;AAAA,MACzD,UAAA7C;AAAAA,MACA,YAAA2V;AAAAA,MACA,aAAAC;AAAAA,MACA,eAAe/S,GAAe,SAAS,IAAI,KAAK,CAACoN,MAAMA,EAAE,SAASzH,EAAS,KAAK;AAAA,IAClF;AAAA,EACF;AAEA,EAAA8b,EAAgB,WAAW,UAAUrL,GACrCqL,EAAgB,WAAW,UAAUhL,GACrCgL,EAAgB,eAAe,UAAU/C,GAAkB5G,GAAmBsJ,CAAgB,GAC9EK,EAAA,kBAAkB,UAAU3J,EAAkB;AAExD,QAAA6J,IAAqBppB,EAAQ,MAC1BnC,EAAM;AAAA,IACX,CAACiC,MAA4B;AACrB,YAAAoD,IAAOsX,EAAY,KAAK,CAACtX,MAASA,EAAK,SAASpD,GAAO,MAAM,IAAI;AAKvE,aAAKoD,IAoBEA,EAAK,WAAW;AAAA,QACrB,eAAeA;AAAA,QACf,GAAGpD;AAAA,MAAA,CACJ,KAtBS,QAAA,KAAK,kBAAkBA,GAAO0a,CAAW,GAE/C,gBAAAlc;AAAA,QAAC0N;AAAA,QAAA;AAAA,UACC,IAAIlM,EAAM;AAAA,UACV,eAAe;AAAA,YACb,aAAa,GAAGA,EAAM,MAAM,IAAI;AAAA,YAChC,OAAO;AAAA,YACP,wBAAOupB,IAAgB,CAAA,CAAA;AAAA,UACzB;AAAA,UACA,MAAMvpB,GAAO,MAAM;AAAA,UACnB,YAAYA,EAAM;AAAA,UAClB,cAAY;AAAA,UACZ,eAAa;AAAA,UACb,YAAY;AAAA,UACZ,aAAa;AAAA,QAAA;AAAA,MACf;AAAA,IAQN;AAAA,IACA,CAAC0oB,GAAWC,MAERD,EAAU,OAAOC,EAAU,MAC3BD,EAAU,aAAaC,EAAU,YACjChqB,GAAM+pB,EAAU,MAAMC,EAAU,IAAI;AAAA,EAG1C,GACC,CAACjO,CAAW,CAAC,GAEVjW,IAAYvE,EAAuC,MAChDua,EAAW;AAAA,IAChB,CAAC/R,GAAKqS,OAAe;AAAA,MACnB,GAAGrS;AAAA,MACH,CAACqS,EAAU,IAAI,GAAGhd,EAAM;AAAA,QACtB,CAACiC,MAA4B+a,EAAU,WAAW,EAAE,eAAeA,GAAW,GAAG/a,GAAO;AAAA,QACxF,CAAC0oB,GAAWC,MAERD,EAAU,OAAOC,EAAU,MAC3BD,EAAU,aAAaC,EAAU,YACjChqB,GAAM+pB,EAAU,MAAMC,EAAU,IAAI;AAAA,MAExC;AAAA,IACF;AAAA,IAEF,EAAE,GAAGF,IAAkB,YAAYa,EAAmB;AAAA,EACxD,GACC,CAAC7O,GAAY6O,CAAkB,CAAC,GAE7BE,IAAe,OAAOjrB,GAAc2oB,GAAuBnM,MAAuB;AACtF,QAAI,CAACgO,EAAiB,WAAW,CAACtJ,EAAkB;AAClD;AAGF,QAAI,CAACyH,GAAU;AACP,YAAAC,IAAO4B,EAAiB,QAAQ,sBAAsB,GACtD3B,KAAa;AAAA,QACjB,GAAGD,EAAK,QAAQ;AAAA,QAChB,GAAGA,EAAK,SAAS;AAAA,MACnB;AAEW,MAAAD,IAAAzH,EAAkB,QAAQ,QAAQ2H,EAAU;AAAA,IAAA;AAGzD,UAAMqC,IAAsB7hB,EAAMrJ,CAAI,EACnC,KAAK,cAAc,MAAMmc,EAAY,KAAK,CAACtX,MAASA,EAAK,SAAS2X,CAAS,CAAC,EAC5E,UAAU,MACiB,CAAC,GAAG,OAAO,OAAO4H,EAAiB,GAAG,GAAGlI,CAAU,EACpD,KAAK,CAAChS,OAAMA,GAAE,SAASlK,CAAI,CACrD;AACH,QAAI,CAACkrB,GAAqB;AACxB,MAAAvT,EAAQ,MAAM,qBAAqB3X,CAAI,MAAMwc,CAAS,GAAG;AACzD;AAAA,IAAA;AAGE,QAAAH,IAA+BhT,EAAM6hB,CAAmB,EACzD,KAAK,EAAE,MAAM5hB,EAAE,UAAU,CAACwE,MAAkB;AAC3C,YAAMqd,MACHjK,EAAkB,SAAS,SAAS,KAAK,CAAA,GAAI,OAAO,CAAC1K,OAAMA,GAAE,MAAM,SAAS1I,EAAc,IAAI,EAAE,SAAS,GAEtGsd,KAActd,EAAc,aAAa,EAAE,OAAOqd,IAAe;AAChE,aAAA;AAAA,QACL,IAAI,OAAO,WAAW;AAAA,QACtB,MAAM;AAAA,QACN,MAAMC,GAAY;AAAA,QAClB,UAAAzC;AAAA,QACA,SAAS;AAAA,UACP,MAAM7a,EAAc;AAAA,UACpB,QAAQsd,IAAa;AAAA,QAAA;AAAA,MAEzB;AAAA,IAAA,CACD,EACA,KAAK,EAAE,MAAM9hB,EAAE,OAAA,GAAU,CAACwE,MAAkB;AAC3C,YAAMqd,MACHjK,EAAkB,SAAS,SAAA,KAAc,CAAA,GAAI,OAAO,CAAC1K,OAAMA,GAAE,SAAS1I,EAAc,IAAI,EAAE,SAAS,GAChGsd,KAActd,EAAc,aAAa,EAAE,OAAOqd,IAAe;AAEhE,aAAA;AAAA,QACL,IAAI,OAAO,WAAW;AAAA,QACtB,MAAMrd,EAAc;AAAA,QACpB,UAAA6a;AAAA,QACA,GAAGyC;AAAA,MACL;AAAA,IAAA,CACD,EACA,UAAU,MAAM,IAAI;AACvB,QAAI,CAAC/O,GAAS;AACZ,MAAA1E,EAAQ,MAAM,qBAAqB3X,CAAI,MAAMwc,CAAS,GAAG;AACzD;AAAA,IAAA;AAGF,QAAI0O,EAAoB;AAClB,UAAA;AACS,QAAA7O,IAAA,MAAM6O,EAAoB,UAAU7O,CAAc;AAAA,MAAA,QACvD;AACN;AAAA,MAAA;AAIE,UAAAgP,IAASC,GAAW,UAAUjP,CAAO;AAC3C,QAAIgP,EAAO;AACT,aAAOziB,EAAa,SAAS,CAAC0iB,GAAW,MAAMjP,CAAO,CAAC,CAAC;AAElD,IAAA1E,EAAA,MAAM0T,EAAO,OAAO,OAAO;AAAA,EACrC,GAEME,IAAoB,CAACC,MAAoC;AAM7D,QAJIA,EAAW,WAAWA,EAAW,UAIjCjlB;AACK,aAAA;AAGH,UAAA,CAACqV,CAAK,IAAI4D,GACV,CAAC1D,CAAK,IAAI+D,GAEV4L,IAAe3P,EAAM;AAAA,MACzB,CAAC+C,MACCA,EAAK,WAAW2M,EAAW,UAC3B3M,EAAK,WAAW2M,EAAW,WAC1B3M,EAAK,gBAAgB,WAAW2M,EAAW,gBAAgB,UAC3D3M,EAAK,gBAAgB,WAAW2M,EAAW,gBAAgB;AAAA,IAChE,GAEMjpB,IAASqZ,EAAM,KAAK,CAAC/W,MAASA,EAAK,OAAO2mB,EAAW,MAAM;AACjE,QAAI,CAACjpB,KAAUA,EAAO,OAAOipB,EAAW;AAC/B,aAAA;AAGT,UAAMpI,IAAW,CAACve,GAAYwe,KAAU,oBAAI,UAAU;AACpD,UAAIA,GAAQ,IAAIxe,EAAK,EAAE;AACd,eAAA;AAGD,MAAAwe,GAAA,IAAIxe,EAAK,EAAE;AAEnB,iBAAWsf,MAAWZ,GAAY1e,GAAM+W,GAAOE,CAAK;AAElD,YADIqI,GAAQ,OAAOqH,EAAW,UAC1BpI,EAASe,IAASd,EAAO,EAAU,QAAA;AAAA,IAE3C;AAEA,WAAO,CAACoI,KAAgB,CAACrI,EAAS7gB,CAAM;AAAA,EAC1C,GAEMmpB,IAAS,CAAC/c,MAA2B;AAGzC,QAFAA,EAAM,eAAe,GACrBA,EAAM,gBAAgB,GAClB,CAAC6b,EAAiB,WAAW,CAACtJ,EAAkB;AAClD;AAGI,UAAAyK,IAAkBnB,EAAiB,QAAQ,sBAAsB,GACjExqB,IAAO2O,EAAM,aAAa,QAAQ,uBAAuB;AAC3D,QAAAid;AAEA,QAAA;AACF,MAAAA,IAAkB,KAAK,MAAMjd,EAAM,aAAa,QAAQ,kBAAkB,CAAC;AAAA,IAAA,QACrE;AACN;AAAA,IAAA;AAEI,UAAAga,IAAWzH,EAAkB,QAAQ,QAAQ;AAAA,MACjD,GAAGvS,EAAM,UAAUgd,EAAgB;AAAA,MACnC,GAAGhd,EAAM,UAAUgd,EAAgB;AAAA,IAAA,CACpC;AAED,IAAAhD,EAAS,KAAK,KAAK,MAAOiD,EAAgB,IAAI,MAAO,EAAE,IAAI,IAC3DjD,EAAS,KAAK,KAAK,MAAOiD,EAAgB,IAAI,KAAM,EAAE,IAAI;AAE1D,UAAMpP,IAAYnT,EAAMsF,EAAM,aAAa,QAAQ,qBAAqB,CAAC,EACtE,KAAKrF,EAAE,QAAQ,CAACxF,MAAMA,CAAC,EACvB,UAAU,MAAA;AAAA,KAAe;AAEf,IAAAmnB,EAAAjrB,GAAM2oB,GAAUnM,CAAS;AAAA,EACxC,GAEMqP,IAAa,CAACld,MAAe;AACjC,IAAAA,EAAM,eAAe,GACrBA,EAAM,aAAa,aAAa;AAAA,EAClC,GAEMmd,IAAY,CAACC,MAAgB;AACjC,UAAMlN,IAAO;AAAA,MACX,GAAGkN;AAAA,MACH,MAAM;AAAA,MACN,IAAI,OAAO,WAAW;AAAA,IACxB;AAEA,IAAIxlB,KACJqC,EAAa,SAAS,CAACgW,GAAkBC,CAAI,CAAC,CAAC;AAAA,EACjD;AAEA,SAAAmN,GAAoBrnB,GAAK,OAAO;AAAA,IAC9B,GAAGiE;AAAA,IACH,YAAYqf,EAAI;AAAA,EAAA,EAChB,GAGA,gBAAAhoB;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,WAAW4F,EAAK,CAAC,eAAeP,CAAS,CAAC;AAAA,MAC1C,UAAU;AAAA,MACV,WAAW,CAAC4H,MAAM;AAChB,QAAIA,EAAE,QAAQ,OAAOA,EAAE,WAAW,CAAC3G,KACjCqC,EAAa,WAAW;AAAA,MAE5B;AAAA,MAEA,UAAA,gBAAAf;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,OAAO;AAAA,YACL,OAAO;AAAA,YACP,QAAQ;AAAA,YACR,UAAU;AAAA,YACV,SAAS;AAAA,UACX;AAAA,UAEC,UAAA;AAAA,YAAC,CAAAtB,KAAY,CAACokB,KACb,gBAAA1qB;AAAA,cAAC;AAAA,cAAA;AAAA,gBACC,WAAW;AAAA,gBACX,OAAO;AAAA,kBACL,UAAU;AAAA,kBACV,KAAK;AAAA,kBACL,OAAO;AAAA,kBACP,QAAQ;AAAA,gBACV;AAAA,gBAEA,UAAA,gBAAAA,EAACwW,KAAQ,WAAU,SAAQ,OAAM,cAC/B,UAAA,gBAAAxW,EAACqN,GAAO,EAAA,MAAO,gBAAArN,EAAAgsB,IAAA,EAAa,OAAO,EAAE,UAAU,GAAM,EAAA,CAAA,GAAI,SAAS,MAAMrB,EAAoB,EAAI,EAAG,CAAA,EACrG,CAAA;AAAA,cAAA;AAAA,YACF;AAAA,YAEF,gBAAA3qB;AAAA,cAAC;AAAA,cAAA;AAAA,gBACC,UAAU;AAAA,gBACV,WAAW;AAAA,gBACX,WAAW,CAACiN,MAAM;AACV,wBAAA,CAAC0O,CAAK,IAAI4D,GACV,CAAC1D,CAAK,IAAI+D;AAEhB,sBAAI3S,EAAE,QAAQ,OAAOA,EAAE,SAAS;AAC9B,0BAAMgf,IAAkB1M,EAAW,CAAC,EAAE,OAAO,CAAChJ,MAAMA,EAAE,QAAQ,EAAE,IAAI,CAAC,EAAE,IAAA7T,EAAA,MAASA,CAAE;AAC9E,wBAAAupB,EAAgB,WAAW;AAC7B;AAGF,oBAAAtjB,EAAa,UAAUsjB,CAAe,GACtChf,EAAE,eAAe;AAAA,kBACR,WAAAA,EAAE,QAAQ,OAAOA,EAAE,SAAS;AACrC,wBAAI,CAAC3G,GAAU;AACb,4BAAM2lB,IAAkBtQ,EAAM,OAAO,CAACpF,MAAMA,EAAE,QAAQ,EAAE,IAAI,CAAC,EAAE,IAAA7T,EAAA,MAASA,CAAE;AACtE,0BAAAupB,EAAgB,WAAW;AAC7B;AAGF,sBAAAtjB,EAAa,eAAesjB,CAAe;AAAA,oBAAA;AAE7C,oBAAAhf,EAAE,eAAe;AAAA,kBAAA,WACRA,EAAE,QAAQ,aAAa;AAChC,wBAAI,CAAC3G,GAAU;AACb,4BAAM4lB,IAAgBvQ,EAAM,OAAO,CAACpF,MAAMA,EAAE,QAAQ,GAC9C4V,IAAgBtQ,EAAM,OAAO,CAAC5O,MAAMA,EAAE,QAAQ;AAEhD,0BAAAif,EAAc,SAAS,GAAG;AAC5B,8BAAM5rB,IAAS4rB,EAAc,QACvBvV,IAAOrW,IAAS,IAAI,UAAU;AACpC,wBAAAmO,GAAM,QAAQ;AAAA,0BACZ,MAAM;AAAA,0BACN,OAAO,UAAUkI,CAAI;AAAA,0BACrB,SACE,gBAAA/O,EAACyD,EAAW,MAAX,EAAgB,UAAA;AAAA,4BAAA;AAAA,4BACkB/K,IAAS,IAAI,GAAGA,CAAM,IAAIqW,CAAI,KAAKA;AAAA,4BAAK;AAAA,0BAAA,GAC3E;AAAA,0BAEF,eAAe,EAAE,QAAQ,GAAK;AAAA,0BAC9B,MAAM,MAAM;AACN,4BAAAwV,EAAc,SAAS,KACzBxjB,EAAa,YAAYwjB,EAAc,IAAI,CAAClf,OAAMA,GAAE,EAAE,CAAC,GAEzDtE,EAAa,YAAYujB,EAAc,IAAI,CAAC3V,OAAMA,GAAE,EAAE,CAAC;AAAA,0BAAA;AAAA,wBACzD,CACD;AAAA,sBAAA,MACH,CAAW4V,EAAc,SAAS,KAChCxjB,EAAa,YAAYwjB,EAAc,IAAI,CAAClf,MAAMA,EAAE,EAAE,CAAC;AAAA,oBACzD;AAEF,oBAAAA,EAAE,gBAAgB,GAClBA,EAAE,eAAe;AAAA,kBAAA;AAAA,gBAErB;AAAA,gBAEA,UAAA,gBAAAjN,EAAC,SAAI,WAAW4F,EAAK,CAAC,YAAY,CAAC,GAAG,KAAK2kB,GACzC,UAAA,gBAAA3iB;AAAA,kBAACwkB;AAAA,kBAAA;AAAA,oBACC,eAAe;AAAA,oBACf,sBAAsB;AAAA,oBACtB,sBAAsB;AAAA,oBACtB,mBAAmB;AAAA,oBACnB,kBAAkB;AAAA,oBAClB,OAAO7M,EAAW,CAAC;AAAA,oBACnB,OAAOK,EAAW,CAAC;AAAA,oBACnB,QAAQ,CAACpb,MAAa;AACnB,sBAAAyc,EAA0D,UAAUzc,GACrE4d,IAAkB5d,CAAQ;AAAA,oBAC5B;AAAA,oBACA,YAAY;AAAA,oBACZ,UAAU,CAAC,GAAG,CAAC;AAAA,oBACf,SAAS;AAAA,oBACT,eAAe6nB,GAAc;AAAA,oBAC7B,WAAApmB;AAAA,oBACA,WAAAmkB;AAAA,oBACA,QAAAqB;AAAA,oBACA,YAAAG;AAAA,oBACA,WAAAC;AAAA,oBACA,mBAAAP;AAAA,oBACA,YAAYhB;AAAA,oBACZ,kBAAkB,CAAChkB;AAAA,oBACnB,gBAAgB,CAACA;AAAA,oBACjB,gBAAgB,CAACA;AAAA,oBACjB,eAAeqC,EAAa;AAAA,oBAC5B,eAAeA,EAAa;AAAA,oBAC5B,eAAe,CAACsE,MAAM;AAClB,sBAAAA,EAAA,QAAQ,CAACrI,MAAS;AACL,wBAAA+D,EAAA,SAAS/D,GAAM,EAAE;AAAA,sBAAA,CAC/B;AAAA,oBACH;AAAA,oBACA,kBAAkB,CAACuK,GAAGyP,MAASjW,EAAa,iBAAiBiW,EAAK,EAAE;AAAA,oBACpE,kBAAkB,MAAMjW,EAAa,iBAAiB,IAAI;AAAA,oBAE1D,UAAA;AAAA,sBAAA,gBAAA3I,EAACssB,IAAS,EAAA,iBAAiB,IACzB,UAAA,gBAAAtsB,EAACusB,IAAc,EAAA,SAAS,MAAM5jB,EAAa,kBAAkB,GAC3D,UAAC,gBAAA3I,EAAAwsB,IAAA,CAAiB,CAAA,EACpB,CAAA,GACF;AAAA,sBACC,gBAAAxsB,EAAAysB,IAAA,EAAW,OAAM,2BAA0B,KAAK,GAAI,CAAA;AAAA,oBAAA;AAAA,kBAAA;AAAA,gBAAA,EAEzD,CAAA;AAAA,cAAA;AAAA,YACF;AAAA,YACC,CAACnmB,KAAYokB,uBACX,OAAI,EAAA,WAAW,uBACd,UACE,gBAAA9iB,EAAAE,IAAA,EAAA,UAAA;AAAA,cAAC,gBAAAF,EAAA,OAAA,EAAI,WAAW,gCACd,UAAA;AAAA,gBAAC,gBAAAA,EAAA,OAAA,EAAI,WAAW,sCACd,UAAA;AAAA,kBAAC,gBAAA5H,EAAAqL,EAAW,MAAX,EAAgB,QAAM,IAAC,OAAO,EAAE,cAAc,EAAE,GAAG,UAEpD,aAAA,CAAA;AAAA,kBAAmB;AAAA,kBAClB,gBAAArL,EAAAqL,EAAW,MAAX,EAAgB,MAAK,aAAY,OAAO,EAAE,UAAU,IAAI,YAAY,EAAA,GAAK,UAE1E,kBAAA,CAAA;AAAA,gBAAA,GACF;AAAA,gBACA,gBAAArL;AAAA,kBAACqN;AAAA,kBAAA;AAAA,oBACC,MAAM;AAAA,oBACN,MAAK;AAAA,oBACL,MAAO,gBAAArN,EAAAmN,IAAA,EAAc,OAAO,EAAE,UAAU,MAAM;AAAA,oBAC9C,SAAS,MAAMwd,EAAoB,EAAK;AAAA,kBAAA;AAAA,gBAAA;AAAA,cAC1C,GACF;AAAA,cACA,gBAAA3qB,EAAC,SAAI,WAAW,gCACd,4BAAC8oB,IAAgB,EAAA,eAAe+B,GAAc,UAAAvkB,EAAoB,CAAA,EACpE,CAAA;AAAA,YAAA,EAAA,CACF,EACF,CAAA;AAAA,UAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IAEJ;AAAA,EACF;AAEJ,CAAC,GC/eYomB,KAAW,CAACC,GAAkBC,MAAmB;AACtD,QAAAC,IAAU,SAAS,cAAc,GAAG;AAC1C,EAAAA,EAAQ,WAAWF,GACXE,EAAA,OAAO,IAAI,gBAAgBD,CAAQ,GAC3CC,EAAQ,MAAM,UAAU,QACf,SAAA,KAAK,YAAYA,CAAO,GAEjCA,EAAQ,MAAM,GAEdA,EAAQ,OAAO;AACjB,GCIaC,KAAkB,OAAOC,GAAkBC,MAA4C;AAC5F,QAAAC,IAAU,MAAM,OAAO,SAAS,GAChCC,IAAW,IAAID,EAAQ,SAAS;AAEnB,EAAAD,EAAA,QAAQ,CAACG,MAAsB;AAChD,QAAIC,IAAwBD,EAAkB,MAC1CE,IAAqB;AAErB,QAAAH,EAAS,aAAaE,CAAa;AAClC;AACD,QAAAC,KACAD,IAAgB,GAAGD,EAAkB,IAAI,KAAKE,CAAkB;AAAA,aACzDH,EAAS,aAAaE,CAAa;AAGxC,UAAAE,IAAYJ,EAAS,aAAaE,CAAa,GAE/CG,IAAa;AAAA,MACjB,GAAGJ,EAAkB,OAAO,IAAI,CAAC5qB,OAAgB;AAAA,QAC/C,OAAOA,EAAM;AAAA,QACb,MAAM,EAAE,IAAIA,EAAM,IAAI,MAAMA,EAAM,OAAO,MAAM,QAAQ;AAAA,MAAA,EACvD;AAAA,MACF,GAAG4qB,EAAkB,QAAQ,IAAI,CAACtd,OAAiB;AAAA,QACjD,OAAOA,EAAO;AAAA,QACd,MAAM,EAAE,IAAIA,EAAO,IAAI,MAAMA,EAAO,OAAO,MAAM,SAAS;AAAA,MAAA,EAC1D;AAAA,MACF,EAAE,OAAO,eAAe,MAAM,KAAK;AAAA,MACnC,EAAE,OAAO,WAAW,MAAM,KAAK;AAAA,IACjC,GAEM/O,IAAc,CAAC,GAAGqsB,EAAkB,QAAQ,GAAGA,EAAkB,OAAO,GACxEjsB,IAAQisB,EAAkB,MAAM,IAAI,CAACK,MAAgB;AACzD,YAAMC,IAAyB,CAAC;AACpB,aAAA3sB,EAAA,QAAQ,CAACE,MAAe;AAClC,cAAM6I,IAAM2jB,IAASxsB,EAAW,MAAM,EAAE,GAClC0sB,IAAe,OAAO7jB,KAAQ,YAAYA,MAAQ,OAAO,KAAK,UAAUA,CAAG,IAAIA;AACxE,QAAA4jB,EAAA,KAAKC,KAAgB,EAAE;AAAA,MAAA,CACrC,GACDD,EAAa,KAAKD,GAAS,gBAAmB,EAAE,GAChDC,EAAa,KAAKD,GAAS,OAAU,EAAE,GAChCC;AAAA,IAAA,CACR,GAEKE,IAAmBJ,EAAW,OAAO,CAAC5qB,MAASA,EAAK,MAAM,KAAK,kBAAkB,OAAO,EAAE,QAC1FirB,IAAoBL,EAAW,OAAO,CAAC5qB,MAASA,EAAK,MAAM,KAAK,kBAAkB,QAAQ,EAAE;AAGlG,IAAA2qB,EAAU,WAAW,GAAG,GAAG,GAAGK,IAAmBC,IAAoB,CAAC;AAEtE,UAAMC,IAASP,EAAU,QAAQ,GAAG,CAAC;AACrC,IAAAO,EAAO,QAAQV,EAAkB,IACjCU,EAAO,YAAY,EAAE,YAAY,UAAU,UAAU,SAAS,GAE9DP,EAAU,WAAW,GAAG,GAAG,GAAGK,CAAgB;AAC9C,UAAMG,IAAYR,EAAU,QAAQ,GAAG,CAAC;AACxC,IAAAQ,EAAU,QAAQ,UAClBA,EAAU,YAAY,EAAE,YAAY,UAAU,UAAU,SAAS,GACvDA,EAAA,OAAO,EAAE,MAAM,IAAM,OAAO,EAAE,MAAM,WAAW,GACzDA,EAAU,OAAO;AAAA,MACf,MAAM;AAAA,MACN,SAAS;AAAA,MACT,SAAS,EAAE,MAAM,SAAS;AAAA,IAC5B,GAEAR,EAAU,WAAW,GAAGK,IAAmB,GAAG,GAAGA,IAAmBC,CAAiB;AACrF,UAAMG,IAAaT,EAAU,QAAQ,GAAGK,IAAmB,CAAC;AAC5D,IAAAI,EAAW,QAAQ,WACnBA,EAAW,YAAY,EAAE,YAAY,UAAU,UAAU,SAAS,GACvDA,EAAA,OAAO,EAAE,MAAM,IAAM,OAAO,EAAE,MAAM,WAAW,GAC1DA,EAAW,OAAO;AAAA,MAChB,MAAM;AAAA,MACN,SAAS;AAAA,MACT,SAAS,EAAE,MAAM,SAAS;AAAA,IAC5B;AAEA,UAAMC,IAAkBV,EAAU,QAAQ,GAAGK,IAAmBC,IAAoB,CAAC;AACrF,IAAAI,EAAgB,OAAO;AAAA,MACrB,MAAM;AAAA,MACN,SAAS;AAAA,MACT,SAAS,EAAE,MAAM,SAAS;AAAA,IAC5B;AAEA,UAAMC,IAAaX,EAAU,QAAQ,GAAGK,IAAmBC,IAAoB,CAAC;AAChF,IAAAK,EAAW,OAAO;AAAA,MAChB,MAAM;AAAA,MACN,SAAS;AAAA,MACT,SAAS,EAAE,MAAM,SAAS;AAAA,IAC5B,GAEkBX,EAAU,OAAOC,EAAW,IAAI,CAAC5qB,MAASA,EAAK,KAAK,CAAC,EAC7D,SAAS,CAACurB,MAAS;AACrB,YAAAC,IAAOZ,EAAW,KAAK,CAAC5qB,MAASA,EAAK,UAAUurB,EAAK,KAAK,GAAG,MAC7DE,IAAYD,GAAM,KAAK,YAAY,MAAM,UAAU,WAAW;AAE/D,MAAAD,EAAA,OAAO,EAAE,MAAM,IAAM,OAAO,EAAE,MAAM,WAAW,GAC/CA,EAAA,OAAO,EAAE,MAAM,WAAW,SAAS,SAAS,SAAS,EAAE,MAAME,IAAY,GAE1ED,MACFD,EAAK,OAAO;AAAA,QACV,OAAO,CAAC,EAAE,MAAM,KAAK,UAAUC,GAAM,QAAW,CAAC,EAAG,CAAA;AAAA,MACtD;AAAA,IACF,CACD,GAEMjtB,GAAA,QAAQ,CAACN,MAAc;AAC5B,MAAA0sB,EAAU,OAAO,OAAO,OAAO1sB,CAAI,CAAC;AAAA,IAAA,CACrC,GAED0sB,EAAU,QAAQ,QAAQ,CAACne,GAAGgB,MAAU;AACtC,UAAIke,IAAY;AAChB,YAAM5rB,IAAS6qB,EAAU,UAAUnd,IAAQ,CAAC;AAC5C,MAAA1N,EAAO,SAAS,EAAE,cAAc,GAAM,GAAG,CAACyrB,MAAS;AACjD,cAAMI,IAAaJ,EAAK,QAAQA,EAAK,MAAM,SAAA,EAAW,SAAS;AACnD,QAAAG,IAAAC,IAAaD,IAAYC,IAAaD,GAElDH,EAAK,SAAS;AAAA,UACZ,KAAK,EAAE,OAAO,OAAO;AAAA,UACrB,MAAM,EAAE,OAAO,OAAO;AAAA,UACtB,QAAQ,EAAE,OAAO,OAAO;AAAA,UACxB,OAAO,EAAE,OAAO,OAAO;AAAA,QACzB;AAAA,MAAA,CACD,GACDzrB,EAAO,QAAQ4rB;AAAA,IAAA,CAChB,GAESf,EAAA,QAAQ,CAAC,EAAE,OAAO,UAAU,QAAQ,GAAG,QAAQ,GAAG;AAAA,EAAA,CAC7D;AAED,QAAMiB,IAAS,MAAMrB,EAAS,KAAK,YAAY,GACzCsB,IAAO,IAAI,KAAK,CAACD,CAAM,GAAG,EAAE,MAAM,qEAAqE;AACpG,EAAA7B,GAAA,GAAGK,CAAQ,SAASyB,CAAI;AACnC,GAEMC,KAAuB,CAACC,MAAyB;AAErD,QAAMC,IADiBD,EAAgB,OAAO,GAAG,CAAC,EAAE,CAAC,EACvB,IAAI,CAACE,MAAW;AAC5C,QAAIA,EAAO,MAAM,YAAY,MAAM;AAC1B,aAAA;AAAA,QACL,MAAMA,EAAO;AAAA,QACb,IAAI;AAAA,MACN;AAGF,QAAIA,EAAO,MAAM,YAAY,MAAM;AAC1B,aAAA;AAAA,QACL,MAAMA,EAAO;AAAA,QACb,IAAI;AAAA,MACN;AAGF,QAAIC,IAAa;AAAA,MACf,MAAM;AAAA,MACN,MAAM;AAAA,MACN,IAAI;AAAA,IACN;AAEI,QAAA;AACW,MAAAA,IAAA,KAAK,MAAMD,EAAO,IAAI;AAAA,IAAA,QAC7B;AACN,MAAAlX,EAAQ,MAAM,gCAAgC;AAAA,IAAA;AAGzC,WAAA;AAAA,MACL,MAAMkX,EAAO;AAAA,MACb,OAAOC,GAAY;AAAA,MACnB,OAAOA,GAAY;AAAA,MACnB,IAAIA,GAAY;AAAA,MAChB,cAAc;AAAA,IAChB;AAAA,EAAA,CACD,GAEKzf,IAASuf,EACZ,OAAO,CAAClsB,MAAWA,EAAO,OAAO,YAAkB,MAAA,OAAO,EAC1D,IAAI,CAACA,OAAY;AAAA,IAChB,IAAIA,EAAO;AAAA,IACX,MAAMA,GAAQ;AAAA,IACd,OAAOA,GAAQ;AAAA,IACf,cAAcA,GAAQ;AAAA,EAAA,EACtB,GAEEgN,IAAUkf,EACb,OAAO,CAAClsB,MAAWA,EAAO,OAAO,YAAkB,MAAA,QAAQ,EAC3D,IAAI,CAACA,OAAY;AAAA,IAChB,IAAIA,EAAO;AAAA,IACX,MAAMA,GAAQ;AAAA,IACd,OAAOA,GAAQ;AAAA,IACf,cAAcA,GAAQ;AAAA,EAAA,EACtB,GAEEvB,IAAQwtB,EAAgB,IAAI,CAAC/rB,MAAc;AAC/C,UAAMmsB,IAAoC;AAAA,MACxC,KAAK,OAAO,WAAW;AAAA,IACzB;AAEc,WAAAH,EAAA,QAAQ,CAACI,GAAK5e,MAAU;AACpC,MAAA2e,EAAUC,EAAI,EAAE,IAAI3lB,EAAMzG,IAAOwN,CAAK,GAAG,KAAK,EAC3C,KAAK9G,EAAE,QAAQ,CAACQ,MAAQA,EAAI,KAAA,CAAM,EAClC,KAAKR,EAAE,SAAS,MAAM,EAAE,EACxB,UAAU,CAACQ,MAAQA,EAAI,UAAU;AAAA,IAAA,CACrC,GAEMilB;AAAA,EAAA,CACR;AAED,SAAO3tB,GAAmB;AAAA,IACxB,QAAAiO;AAAA,IACA,SAAAK;AAAA,IACA,OAAAvO;AAAA,IACA,WAAW;AAAA,EAAA,CACZ;AACH,GAEa8tB,KAAgB,OAAOT,MAAwB;AACpD,QAAAtB,IAAU,MAAM,OAAO,SAAS,GAEhCC,IAAW,MADK,IAAID,EAAQ,SAAS,EACN,KAAK,KAAKsB,CAAM,GAC/C5S,IAAwB,CAAC;AAEtB,SAAAuR,EAAA,UAAU,CAAC+B,MAAU;AAC5B,UAAMC,IAAyB,CAAC,GAC1BC,IAAkBF,EAAM;AAExB,IAAAA,EAAA,QAAQ,CAACG,MAAQ;AACrB,YAAMC,IAAiB,CAAC;AAExB,eAAS9uB,IAAI,GAAGA,KAAK6uB,EAAI,WAAW7uB,KAAK;AACjC,cAAA2tB,IAAOkB,EAAI,QAAQ7uB,CAAC,GAEpB+uB,IAAWpB,EAAK,OAClB,OAAOA,EAAK,QAAS,WACnBA,EAAK,KAAK,OAAO,IAAI,CAACqB,MAAQA,EAAI,IAAI,EAAE,KAAK,EAAE,IAC/CrB,EAAK,OACP;AAEJ,QAAAmB,EAAQ,KAAK,EAAE,OAAOnB,EAAK,OAAO,MAAMoB,GAAU;AAAA,MAAA;AAGpD,MAAAJ,EAAgB,KAAKG,CAAO;AAAA,IAAA,CAC7B;AACD,UAAMlO,IAAiB+N,EAAgB,CAAC,EAAE,CAAC,EAAE;AAE7C,IAAAvT,EAAM,KAAK;AAAA,MACT,IAAIwF;AAAA,MACJ,MAAMgO;AAAA,MACN,MAAMrgB,EAAS;AAAA,MACf,SAAS2f,GAAqBS,CAAe;AAAA,MAC7C,UAAU,EAAE,GAAG,GAAG,GAAG,EAAE;AAAA,IAAA,CACxB;AAAA,EAAA,CACF,GAEMvT;AACT,GC9PM6T,KAAsB,oCAMfC,KAAoD,MAAM;AACrE,QAAMC,IAAmB3N,GAAoB,GACvC4N,IAAYpqB,EAAyB,IAAI,GACzCqqB,IAAiBrqB,EAAyB,IAAI,GAE9C,EAAE,kBAAAsqB,GAAkB,gBAAAC,EAAe,IAAIlnB,GAAwB,GAC/D,EAAE,UAAAtC,GAAU,QAAAmb,GAAQ,aAAA6E,EAAA,IAAgB9f,EAAsB,CAAC,EAAE,UAAAF,GAAU,QAAAmb,GAAQ,aAAA6E,SAAmB;AAAA,IACtG,UAAAhgB;AAAAA,IACA,QAAAmb;AAAAA,IACA,aAAA6E;AAAAA,EAAA,EACA,GAEIyJ,IAAoB,OAAOrhB,MAAe;AACxC,UAAAshB,IAAWthB,GAAO,QAAQ,OAC1BuhB,IAAS,IAAI,WAAW;AACvB,IAAAA,EAAA,SAAS,SAAUhjB,GAAG;AACvB,UAAA;AACF,cAAMme,IAAc,KAAK,MAAMne,GAAG,QAAQ,MAAgB;AACtD,YAAAme,GAAQ,gBAAgBoE;AACpB,gBAAA,IAAI,MAAM,sBAAsB;AAGlC,cAAA7T,IAAwB,MAAM,QAAQyP,GAAQ,KAAK,IAAIA,EAAO,QAAQ,CAAC,GACvErL,IAAUpE,EAAM,IAAI,CAAC/W,MAASA,EAAK,EAAE,GAErCiX,IAAyBuP,EAAO,MAAyB;AAAA,UAC7D,CAACxM,MAASmB,EAAQ,SAASnB,GAAM,QAAQ,KAAKmB,EAAQ,SAASnB,GAAM,QAAQ;AAAA,QAC/E,GAEMsR,IAAcC,GAAoB,UAAU;AAAA,UAChD,OAAAxU;AAAA,UACA,OAAAE;AAAA,UACA,UAAUuP,GAAQ;AAAA,QAAA,CACnB;AAEG,YAAA,CAAC8E,EAAY,SAAS;AAChB,kBAAA,IAAIA,EAAY,OAAO,OAAO,GAC9BxY,EAAA,MAAMwY,EAAY,OAAO,OAAO;AACxC;AAAA,QAAA;AAGF,QAAAL,EAAiBK,EAAY,IAAI;AAAA,eAC1BjjB,GAAQ;AACP,QAAAyK,EAAA,MAAMzK,EAAE,OAAO;AAAA,MAAA;AAAA,IAE3B,GAEAgjB,EAAO,WAAW,MAAM,KAAKD,CAAQ,IAAI,CAAC,GAAG,OAAO;AAAA,EACtD,GAEMI,IAAiB,CAAC1hB,MAAe;AACrC,UAAM2hB,IAAO3hB,GAAO,QAAQ,MAAM,CAAC,GAC7B4hB,IAAa,IAAI,WAAW;AAE9B,QAAA;AACF,MAAAA,EAAW,kBAAkBD,CAAI,GACjCC,EAAW,SAAS,YAAY;AAC9B,cAAM/B,IAAS+B,EAAW;AAE1B,YAAI,CAAC/B,EAAQ;AAEP,cAAAgC,IAAiB,MAAMvB,GAAcT,CAAM,GAE3C,EAAE,eAAAplB,EAAkB,IAAAumB,EAAiB,WAAW,SAAS,GACzDc,IAAernB,EAAc,MAAM,IAAI,CAACvE,MAAS;AACrD,cAAI6rB,IAAQ7rB;AAEG,iBAAA2rB,EAAA,QAAQ,CAACG,MAAc;AAChC,YAAAA,EAAU,OAAO9rB,EAAK,OAAI6rB,IAAQ,EAAE,GAAG7rB,GAAM,SAAS8rB,EAAU,QAAQ;AAAA,UAAA,CAC7E,GAEMD;AAAA,QAAA,CACR,GAGKxQ,IAAWsQ,EACd,OAAO,CAAC3rB,MAAS,CAAC4rB,EAAa,KAAK,CAACG,MAAiBA,EAAa,OAAO/rB,EAAK,EAAE,CAAC,EAClF,IAAI,CAACwX,GAASjM,OAAW,EAAE,GAAGiM,GAAS,UAAU,EAAE,GAAGjM,IAAQ,KAAK,GAAG,EAAA,EAAM,EAAA,GAEzE+f,IAAcC,GAAoB,UAAU;AAAA,UAChD,OAAO,CAAC,GAAGK,GAAc,GAAGvQ,CAAQ;AAAA,UACpC,OAAO9W,EAAc;AAAA,UACrB,UAAUA,EAAc;AAAA,QAAA,CACzB;AAEG,YAAA,CAAC+mB,EAAY,SAAS;AAChB,kBAAA,IAAIA,EAAY,OAAO,OAAO,GAC9BxY,EAAA,MAAMwY,EAAY,OAAO,OAAO;AACxC;AAAA,QAAA;AAGF,QAAAL,EAAiBK,EAAY,IAAI,GACjCxY,EAAQ,QAAQ,4CAA4C;AAAA,MAC9D;AAAA,IAAA,QACM;AACN,MAAAA,EAAQ,MAAM,yBAAyB;AAAA,IAAA;AAAA,EAE3C,GAEMkZ,IAAc,YAAY;AAC1B,QAAA;AACF,YAAM,EAAE,MAAA7kB,EAAS,IAAA2jB,EAAiB,WAAW,SAAS,GAChD,EAAE,eAAAvmB,EAAkB,IAAAumB,EAAiB,WAAW,SAAS,GAEzD3C,IAAW,GAAGhhB,EAAK,WAAW,SAAS,EAAE,CAAC,SAC1C8kB,IAAO,KAAK;AAAA,QAChB;AAAA,UACE,aAAarB;AAAA,UACb,OAAOrmB,EAAc;AAAA,UACrB,OAAOA,EAAc;AAAA,UACrB,UAAUA,EAAc;AAAA,QAC1B;AAAA,QACA;AAAA,QACA;AAAA,MACF,GACMqlB,IAAO,IAAI,KAAK,CAACqC,CAAI,GAAG,EAAE,MAAM,oBAAoB,GACpDC,IAAO,IAAI,gBAAgBtC,CAAI,GAG/BuC,IAAO,OAAO,SAAS,cAAc,GAAG;AAC9C,MAAAA,EAAK,OAAOD,GACZC,EAAK,WAAWhE,GACT,OAAA,SAAS,KAAK,YAAYgE,CAAI,GACrCA,EAAK,MAAM,GAGJ,OAAA,SAAS,KAAK,YAAYA,CAAI,GACrC,IAAI,gBAAgBD,CAAI;AAAA,aACjB7jB,GAAQ;AACP,MAAAyK,EAAA,MAAMzK,EAAE,OAAO;AAAA,IAAA;AAAA,EAE3B,GAEM+jB,IAAmB,OAAOjlB,IAAe,sBAAsB;AAC/D,QAAA;AACF,YAAM,EAAE,eAAA5C,EAAkB,IAAAumB,EAAiB,WAAW,SAAS,GACzD1C,IAAqB7jB,EAAc,MACtC,OAAO,CAACvE,MAASA,EAAK,SAASkK,EAAS,aAAa,EACrD,IAAI,CAACnO,OAAmB;AAAA,QACvB,GAAGA,EAAc;AAAA,QACjB,IAAIA,EAAc;AAAA,QAClB,MAAMA,EAAc;AAAA,MAAA,EACpB;AAEE,YAAAmsB,GAAgB/gB,GAAMihB,CAAkB,GAC9CtV,EAAQ,QAAQ,8CAA8C;AAAA,IAAA,QACxD;AACN,MAAAA,EAAQ,MAAM,gCAAgC;AAAA,IAAA;AAAA,EAElD;AA6BE,SAAA,gBAAA9P,EAAC,OAAI,EAAA,WAAW,iBACd,UAAA;AAAA,IAAA,gBAAA5H;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,QAAM;AAAA,QACN,QAAO;AAAA,QACP,MAAK;AAAA,QACL,KAAK2vB;AAAA,QACL,UAAUI;AAAA,QACV,SAAS,CAACrhB,MAAU;AACjB,UAAAA,EAAM,OAAe,QAAQ;AAAA,QAAA;AAAA,MAChC;AAAA,IACF;AAAA,IACA,gBAAA1O;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,QAAM;AAAA,QACN,QAAO;AAAA,QACP,MAAK;AAAA,QACL,KAAK4vB;AAAA,QACL,UAAUQ;AAAA,QACV,SAAS,CAAC1hB,MAAU;AACjB,UAAAA,EAAM,OAAe,QAAQ;AAAA,QAAA;AAAA,MAChC;AAAA,IACF;AAAA,IACA,gBAAA9G,EAAC,OAAI,EAAA,WAAW,2BACd,UAAA;AAAA,MAAC,gBAAAA,EAAA,OAAA,EAAI,WAAW,gCACb,UAAA;AAAA,QAAC,CAAAtB,KACC,gBAAAtG,EAAAoN,IAAA,EAAS,MAAM,EAAE,OAnDY;AAAA,UACtC;AAAA,YACE,KAAK;AAAA,YACL,OAAO;AAAA,YACP,SAAS,MAAMuiB,GAAW,SAAS,QAAQ;AAAA,UAC7C;AAAA,UACA;AAAA,YACE,KAAK;AAAA,YACL,OAAO;AAAA,YACP,SAAS,MAAMC,GAAgB,SAAS,QAAQ;AAAA,UAAA;AAAA,QAEpD,EAwC+C,GAAG,WAAU,eAAc,SAAS,CAAC,OAAO,GAAG,OAAK,IACvF,UAAA,gBAAA5vB,EAACqN,GAAO,EAAA,MAAM,QAAQ,UAAA/G,GAAoB,MAAM,gBAAAtG,EAACixB,IAAoB,CAAA,CAAA,EAAA,CAAI,EAC3E,CAAA;AAAA,QAEF,gBAAAjxB,EAACoN,MAAS,MAAM,EAAE,OA1CgB;AAAA,UACxC;AAAA,YACE,KAAK;AAAA,YACL,OAAO;AAAA,YACP,SAAS,MAAMwjB,EAAY;AAAA,UAC7B;AAAA,UACA;AAAA,YACE,KAAK;AAAA,YACL,OAAO;AAAA,YACP,SAAS,MAAMI,EAAiB;AAAA,UAAA;AAAA,QAEpC,KA+BkD,WAAU,eAAc,SAAS,CAAC,OAAO,GAAG,OAAK,IACzF,UAAA,gBAAAhxB,EAACqN,GAAO,EAAA,MAAM,QAAQ,MAAM,gBAAArN,EAACkxB,IAAsB,CAAA,CAAA,EAAI,CAAA,EACzD,CAAA;AAAA,MAAA,GACF;AAAA,MACA,gBAAAlxB,EAAC,SAAI,WAAW,mCACZ,gBAAU,CAAC,GAAG,IAAI,CAACwhB,MAAU;AACvB,cAAA9G,IAAW4L,MAAgB9E,EAAM;AAErC,eAAA,gBAAAxhB;AAAA,UAACwW;AAAA,UAAA;AAAA,YAEC,OAAO,GAAIkE,IAAoB,UAAT,MAAgB,IAAI8G,EAAM,MAAM,YAAA,CAAa;AAAA,YACnE,WAAW;AAAA,YAEX,UAAA,gBAAAxhB;AAAA,cAACqN;AAAA,cAAA;AAAA,gBAEC,MAAK;AAAA,gBACL,MAAMmU,EAAM;AAAA,gBACZ,OAAO,EAAE,YAAY9G,IAAW,uBAAuB,OAAU;AAAA,gBACjE,SAAS,MAAM;AACb,sBAAI8G,GAAO,QAAgB,QAAAA,EAAM,QAAQ;AACzC,kBAAIA,GAAO,eAAasO,EAAepV,IAAW,SAAY8G,EAAM,EAAE;AAAA,gBAAA;AAAA,cACxE;AAAA,cAPKA,EAAM;AAAA,YAAA;AAAA,UAQb;AAAA,UAbKA,EAAM;AAAA,QAcb;AAAA,MAAA,CAEH,EACH,CAAA;AAAA,IAAA,EACF,CAAA;AAAA,EAAA,GACF;AAEJ,GCxOa2P,KAAsC,CAAC,EAAE,UAAA7qB,GAAU,oBAAA8qB,QAAyB;AACvF,QAAMzoB,IAAeC,GAAwB,GACvC,EAAE,WAAAyoB,GAAW,cAAAC,MAAiB9qB,EAAsB,CAAC,EAAE,eAAA2C,GAAe,WAAAkP,GAAW,UAAA6I,SAAgB;AAAA,IACrG,eAAe/X,GAAe,SAAS,IAAI,KAAK,CAACvE,MAASA,EAAK,OAAOyT,CAAS,GAAG;AAAA,IAClF,YAAY6I,KAAY,CACrB,GAAA,IAAI,CAACG,MAAQ;AACN,YAAAzc,KAAQuE,GAAe,SAAS,CAAC,GAAG,KAAK,CAACvE,MAASA,EAAK,OAAOyc,CAAG;AACpE,UAACzc;AACE,eAAA;AAAA,UACL,IAAIA,GAAM;AAAA,UACV,MAAMA,EAAK;AAAA,UACX,MAAMA,EAAK;AAAA,UACX,MAAMA,GAAM;AAAA,QACd;AAAA,IACD,CAAA,EACA,OAAO,CAACA,MAAS,CAAC,CAACA,CAAI;AAAA,EAAA,EAC1B;AAEF,2BACG,OACC,EAAA,UAAA,gBAAA5E;AAAA,IAAC8Y;AAAA,IAAA;AAAA,MACC,MAAK;AAAA,MACL,MAAK;AAAA,MACL,WAAWlT,EAAK,gBAAgB;AAAA,MAChC,WAAW0rB,KAAgB;AAAA,MAC3B,UAAU,CAACznB,MAAQlB,EAAa,QAAQkB,CAAG;AAAA,MAC3C,oBAAAunB;AAAA,MACA,OAAO;AAAA,QACL;AAAA,UACE,UAAU;AAAA,UACV,KAAK;AAAA,UACL,OACE,gBAAApxB;AAAA,YAACuxB;AAAA,YAAA;AAAA,cACC,OAAOF,GAAW;AAAA,cAClB,wBAAOG,IAAuB,EAAA;AAAA,cAC9B,MAAK;AAAA,cACL,QAAQ,CAACF,KAAgBA,MAAiB;AAAA,cAC1C,gBAAgB,CAAClQ,MAAW;AACb,gBAAAzY,EAAA,SAAS,SAASyY,CAAM;AAAA,cAAA;AAAA,YACvC;AAAA,UAAA;AAAA,QAGN;AAAA,QACA,GAAGiQ,EAAU,IAAI,CAACzsB,GAAMuL,MAAU;AAC1B,gBAAAtC,IAAgBsW,GAAkBvf,EAAK,IAAgB;AAEtD,iBAAA;AAAA,YACL,UAAA0B;AAAA,YACA,KAAK1B,EAAK;AAAA,YACV,OACE,gBAAA5E;AAAA,cAACuxB;AAAA,cAAA;AAAA,gBACC,gBAAgB,CAACnQ,MAAW;AACb,kBAAAzY,EAAA,SAAS/D,EAAK,IAAIwc,CAAM;AAAA,gBACvC;AAAA,gBACA,MAAMvT,GAAe;AAAA,gBACrB,MAAMjJ,GAAM,QAAQA,GAAM;AAAA,gBAC1B,YAAYA,GAAM,MAAM;AAAA,gBACxB,OAAOiJ,GAAe;AAAA,gBACtB,OAAAsC;AAAA,gBACA,QAAQvL,EAAK,OAAO0sB;AAAA,gBACpB,OAAOD,GAAW;AAAA,gBAClB,SAAS,MAAM1oB,EAAa,SAAS/D,EAAK,EAAE;AAAA,cAAA;AAAA,YAC9C;AAAA,YAEF,UAAU;AAAA,UACZ;AAAA,QACD,CAAA;AAAA,MAAA;AAAA,IACH;AAAA,EAAA,GAEJ;AAEJ,GAEM2sB,KAUD,CAAC,EAAE,OAAAE,IAAQ,GAAG,OAAAthB,IAAQ,IAAI,MAAArE,GAAM,MAAAC,GAAM,QAAA2lB,GAAQ,YAAArlB,GAAY,OAAAH,IAAQN,GAAU,MAAM,SAAA+lB,GAAS,gBAAAC,QAAqB;AACnH,QAAMnuB,IAAQ;AAAA,IACZguB,IAAQ,KACNthB,MAAU,MAAM;AAAA,MACd,KAAK;AAAA,MACL,OAAO;AAAA,MACP,SAAS,MAAMyhB,IAAiB,OAAO;AAAA,IACzC;AAAA,IACFH,IAAQ,KACNthB,MAAU,MAAM;AAAA,MACd,KAAK;AAAA,MACL,OAAO;AAAA,MACP,SAAS,MAAMyhB,IAAiB,WAAW;AAAA,IAC7C;AAAA,IACFH,IAAQ,KACNthB,MAAU,MAAM;AAAA,MACd,KAAK;AAAA,MACL,OAAO;AAAA,MACP,SAAS,MAAMyhB,IAAiB,aAAa;AAAA,IAC/C;AAAA,IACFH,IAAQ,KACNthB,IAAQ,IAAIshB,KAAS;AAAA,MACnB,KAAK;AAAA,MACL,OAAO;AAAA,MACP,SAAS,MAAMG,IAAiB,aAAa;AAAA,IAC/C;AAAA,IACFH,IAAQ,KACNthB,IAAQ,KACRA,IAAQ,KAAK;AAAA,MACX,KAAK;AAAA,MACL,OAAO;AAAA,MACP,SAAS,MAAMyhB,IAAiB,YAAY;AAAA,IAAA;AAAA,IAEhD,OAAO,CAAChvB,MAAS,CAAC,CAACA,CAAI;AAEzB,SACG,gBAAA5C,EAAAoN,IAAA,EAAS,MAAM,EAAE,OAAA3J,EAAS,GAAA,SAAS,CAAC,aAAa,GAChD,UAAC,gBAAAmE,EAAA,OAAA,EAAI,WAAU,uBAAsB,eAAa8pB,GAEhD,UAAA;AAAA,IAAA,gBAAA1xB;AAAA,MAAC6xB;AAAA,MAAA;AAAA,QACC,MAAK;AAAA,QACL,OAAM;AAAA,QACN,OAAO;AAAA,UACL,YAAY3lB;AAAA,UACZ,UAAU;AAAA,UACV,OAAO;AAAA,UACP,QAAQ;AAAA,UACR,YAAY;AAAA,UACZ,cAAc;AAAA,QAChB;AAAA,QACA,MAAAJ;AAAA,MAAA;AAAA,IACF;AAAA,IACCC;AAAA,IACD,gBAAA/L;AAAA,MAACsL;AAAA,MAAA;AAAA,QACC,QAAQe;AAAA,QACR,OAAO;AAAA,UACL,UAAU;AAAA,QAAA;AAAA,MACZ;AAAA,IACF;AAAA,IACCslB,KACC,gBAAA3xB;AAAA,MAACqN;AAAA,MAAA;AAAA,QACC,WAAU;AAAA,QACV,MAAK;AAAA,QACL,MAAK;AAAA,QACL,OAAO,EAAE,QAAQ,IAAI,OAAO,IAAI,OAAO,SAAS,cAAc,OAAO,YAAY,EAAE;AAAA,QACnF,MAAO,gBAAArN,EAAAmN,IAAA,EAAc,OAAO,EAAE,UAAU,MAAM;AAAA,QAC9C,SAAS,CAACF,MAAM;AACd,UAAAA,EAAE,gBAAgB,GACR0kB,IAAA;AAAA,QAAA;AAAA,MACZ;AAAA,IAAA;AAAA,EACF,EAAA,CAEJ,EACF,CAAA;AAEJ,GCvJaG,KAAuBvyB,EAAM;AAAA,EACxCiJ,GAAgD,SAC9C,EAAE,qBAAA8hB,GAAqB,oBAAA8G,EAAA,GACvB1sB,GACA;AACA,UAAM,CAACqtB,GAAaC,CAAc,IAAInyB,EAAS,EAAK,GAC9CoyB,IAAgBzrB,EAAsB,CAAC,EAAE,eAAA2C,GAAe,WAAAkP,SACpDlP,GAAe,SAAS,IAAI,KAAK,CAACvE,MAASA,EAAK,OAAOyT,CAAS,CACzE;AAED,WAEI,gBAAAzQ,EAAAE,IAAA,EAAA,UAAA;AAAA,MAAA,gBAAA9H,EAACyvB,IAAiB,EAAA;AAAA,MAClB,gBAAA7nB,EAAC,OAAI,EAAA,WAAW,iBACd,UAAA;AAAA,QAAC,gBAAA5H,EAAAmxB,IAAA,EAAU,UAAUY,GAAa,oBAAAX,EAAwC,CAAA;AAAA,QAC1E,gBAAApxB;AAAA,UAACqqB;AAAA,UAAA;AAAA,YACC,KAAA3lB;AAAA,YACA,WAAWkB,EAAK,CAAC,CAACqsB,KAAiB,QAAQ,CAAC;AAAA,YAC5C,qBAAA3H;AAAA,YACA,eAAe0H;AAAA,UAAA;AAAA,QACjB;AAAA,0BACCE,IAAY,CAAA,CAAA;AAAA,MAAA,GACf;AAAA,wBACC9L,IAAW,CAAA,CAAA;AAAA,IAAA,GACd;AAAA,EAEH,CAAA;AACH,GAEM8L,KAAwB3yB,EAAM,KAAK,MAAM;AAC7C,QAAM,EAAE,WAAA8xB,GAAW,cAAAC,GAAc,YAAArV,EAAe,IAAAzV;AAAA,IAC9C,CAAC,EAAE,eAAA2C,GAAe,UAAA+X,GAAU,WAAA7I,GAAW,YAAA4D,QAAiB;AAChDqV,YAAAA,KAAgBnoB,GAAe,SAAS,CAAA,GAAI,KAAK,CAACvE,MAASA,EAAK,OAAOyT,CAAS,GAAG;AAGlF,aAAA;AAAA,QACL,YAHiBlP,GAAe,SAAS,CAAA,GAAI,OAAO,CAACvE,MAASsc,EAAS,SAAStc,EAAK,EAAE,CAAC,EAGnE,IAAI,CAAC,EAAE,IAAAlC,GAAI,MAAA3C,EAAA,OAAY,EAAE,IAAA2C,GAAI,MAAA3C,EAAA,EAAO;AAAA,QACzD,cAAAuxB;AAAAA,QACA,YAAArV;AAAAA,MACF;AAAA,IAAA;AAAA,EAEJ,GAEMkW,IAAe5sB,EAAuB,IAAI,GAC1C6sB,IAAa1wB,EAAQ,MAClB2wB,GAAsBte,IAAc,QAAW;AAAA,IACpD,aAAaoe,EAAa;AAAA,EAAA,CAC3B,GACA,CAACA,EAAa,OAAO,CAAC;AAEzB,SACG,gBAAAnyB,EAAA,OAAA,EAAI,OAAO,EAAE,SAAS,WAAA,GAAc,KAAKmyB,GACvC,UAAAd,EAAU,IAAI,CAACzsB,MACd,gBAAA5E,EAAC,OAAmB,EAAA,WAAW4F,EAAK,CAAC,eAAe0rB,MAAiB1sB,GAAM,MAAM,QAAQ,CAAC,GACvF,UAAAwE,EAAMxE,GAAM,IAAI,EACd;AAAA,IAAKkK,EAAS;AAAA,IAAe,MAC5BC,IAA4B,YAAY,EAAE,IAAInK,GAAM,IAAI,SAASwtB,EAAY,CAAA;AAAA,EAE9E,EAAA,KAAKtjB,EAAS,UAAU,MAAMqH,IAAuB,YAAY,EAAE,IAAIvR,GAAM,IAAI,SAASwtB,EAAY,CAAA,CAAC,EACvG;AAAA,IAAKtjB,EAAS;AAAA,IAAY,MACzBwF,IAAyB,YAAY,EAAE,IAAI1P,GAAM,IAAI,SAASwtB,EAAY,CAAA;AAAA,EAE3E,EAAA,KAAKtjB,EAAS,OAAO,MAAMuK,IAAoB,YAAY,EAAE,IAAIzU,GAAM,IAAI,SAASwtB,EAAY,CAAA,CAAC,EACjG,KAAKtjB,EAAS,QAAQ,MAAMyK,IAAqB,YAAY,EAAE,IAAI3U,GAAM,IAAI,SAASwtB,EAAY,CAAA,CAAC,EAEnG,UAAU,MAAM;AACT,UAAA7V,IAAYN,EAAW,KAAK,CAACO,MAAQA,EAAI,SAAS5X,EAAK,IAAI;AACjE,WAAI2X,IACKA,GAAW,YAAY,EAAE,IAAI3X,EAAK,IAAI,SAASwtB,GAAY,IAG7D;AAAA,EACR,CAAA,KAnBKxtB,GAAM,EAoBhB,CACD,EACH,CAAA;AAEJ,CAAC,GCnFY0tB,KAAgB9pB;AAAA,EAC3B,CAAC,EAAE,SAAS2G,GAAG,qBAAAmb,GAAqB,oBAAA8G,GAAoB,GAAG5vB,EAAM,GAAGkD,wBAE/D,OAAI,EAAA,WAAW,UACd,UAAC,gBAAA1E,EAAAuyB,IAAA,EACC,4BAACnT,IACC,EAAA,UAAA;AAAA,IAAA,gBAAApf;AAAA,MAAC8xB;AAAA,MAAA;AAAA,QACC,KAAAptB;AAAA,QACA,qBAAA4lB;AAAA,QACA,oBAAA8G;AAAA,MAAA;AAAA,IACF;AAAA,sBACChN,IAAwB,EAAA;AAAA,IACzB,gBAAApkB,EAACiiB,IAAoB,EAAA,GAAGzgB,EAAO,CAAA;AAAA,EAAA,EACjC,CAAA,EACF,CAAA,GACF;AAGN,GCmEagxB,KAAgB,CAK3Bjc,OAEO;AAAA,EACL,MAAMA,EAAE;AAAA,EACR,MAAMA,EAAE;AAAA,EACR,OAAOA,EAAE;AAAA,EACT,aAAaA,EAAE;AAAA,EACf,OAAOA,EAAE;AAAA,EACT,kBAAkBA,EAAE;AAAA,EACpB,cACEA,EAAE,iBACD,CAAC,EAAE,OAAApG,SAAa;AAAA,IACf,MAAM,GAAGoG,EAAE,QAAQA,EAAE,WAAW,GAAGpG,CAAK;AAAA,EAAA;AAAA,EAE5C,WAAWoG,EAAE;AAAA,EACb,YAAYA,EAAE,aACVA,EAAE,aACF,CAAC,EAAE,IAAA7T,GAAI,eAAAmL,GAAe,MAAAlL,GAAM,UAAAyN,QAAe;AACzC,UAAM,CAACqiB,GAAMC,CAAO,IAAI7yB,EAAS,EAAK,GAChC,EAAE,OAAAwX,EAAA,IAAUC,GAAM,SAAS,GAC3B,EAAE,YAAA5G,EAAW,IAAI9H,GAAwB,GAEzC+pB,IADOnsB,EAAsB,CAAC5C,OAAWA,EAAM,eAAe,SAAS,CAAA,GAAI,KAAK,CAAC2S,MAAMA,EAAE,OAAO7T,CAAE,CAAC,GAClF,SAAS;AAE9B,WAAA,gBAAA1C;AAAA,MAAC0N;AAAA,MAAA;AAAA,QACC,IAAAhL;AAAA,QACA,eAAAmL;AAAA,QACA,MAAMlL,EAAK;AAAA,QACX,YAAYyN;AAAA,QACZ,eAAa;AAAA,QACb,YAAYmG,EAAE;AAAA,QACd,aAAaA,EAAE;AAAA,QACf,SACEA,GAAG,SACC;AAAA,UACE,gBAAAvW;AAAA,YAACqN;AAAA,YAAA;AAAA,cAEC,MAAK;AAAA,cACL,OAAO,EAAE,YAAY,QAAQ,WAAWolB,IAAO,mBAAmB,OAAU;AAAA,cAC5E,SAAS,MAAMC,EAAQ,CAACE,MAAM,CAACA,CAAC;AAAA,cAEhC,4BAACtY,IAAa,CAAA,CAAA;AAAA,YAAA;AAAA,YALV;AAAA,UAAA;AAAA,QAMN,IAEF;AAAA,QAGL,UAAAmY,KAAQlc,GAAG,UACV,gBAAAvW;AAAA,UAAC2Q;AAAA,UAAA;AAAA,YACC,WAAU;AAAA,YACV,QAAO;AAAA,YACP,eAAegiB;AAAA,YACf,gBAAgB,CAACxjB,GAAG0jB,MAAW;AAClB,cAAAniB,EAAAhO,GAAI,CAACR,OACdA,EAAM,QAAQ,SAAS2wB,GAChB3wB,EACR;AAAA,YACH;AAAA,YAEE,WAAAqU,GAAG,UAAU,CAAI,GAAA,IAAI,CAAC,EAAE,MAAAxK,GAAM,SAAA+mB,GAAS,OAAAC,QAAY;AACnD,oBAAMC,IAAW5pB,EAAM,EAAE,SAAA0pB,EAAS,CAAA,EAC/B,KAAK,EAAE,SAAS,OAAO,GAAG,MAAO,gBAAA9yB,EAAAsI,IAAA,EAAW,MAAK,WAAW,CAAA,CAAE,EAC9D,KAAK,EAAE,SAAS,UAAU,MACzB,gBAAAtI,EAACizB,MACC,UAAC,gBAAAjzB,EAAAqL,EAAW,MAAX,EAAgB,OAAO,EAAE,UAAUgM,EAAM,WAAW,GAAI,aAAM,EACjE,CAAA,CACD,EACA,WAAW,GAER6b,IAAa9pB,EAAM,EAAE,SAAA0pB,GAAS,EACjC,KAAK,EAAE,SAAS,UAAU,MAAM,IAAI,EACpC,UAAU,MACT,gBAAA9yB,EAACqL,EAAW,MAAX,EAAgB,OAAO,EAAE,UAAUgM,EAAM,WAAe,GAAA,UAAA0b,EAAM,CAAA,CAChE,GAEGI,IAAgB/pB,EAAM,EAAE,SAAA0pB,EAAS,CAAA,EACpC,KAAK,EAAE,SAAS,UAAU,MAAM,SAAS,EACzC,UAAU,MAAM;AAAA,eAAS;AAG1B,qBAAA,gBAAA9yB;AAAA,gBAAC2Q,EAAK;AAAA,gBAAL;AAAA,kBAEC,MAAA5E;AAAA,kBACA,OAAOmnB;AAAA,kBACP,eAAAC;AAAA,kBACA,OAAO;AAAA,oBACL,cAAc;AAAA,kBAChB;AAAA,kBAEC,UAAAH;AAAA,gBAAA;AAAA,gBARIjnB;AAAA,cASP;AAAA,YAEH,CAAA;AAAA,UAAA;AAAA,QAAA;AAAA,MACH;AAAA,IAEJ;AAAA,EAAA;AAGV;ACzME,KAAK,UACPqnB,GAAO,OAAO,EAAE,QAAQ,KAAK,QAAQ;ACGhC,MAAMC,KAAkD,CAAC,EAAE,OAAAtxB,GAAO,UAAAyP,GAAU,UAAA8hB,QAAe;AAChG,QAAM,EAAE,OAAAjc,EAAA,IAAUC,GAAM,SAAS;AAG/B,SAAA,gBAAAtX;AAAA,IAAC2X;AAAA,IAAA;AAAA,MACC,SAAS,gBAAA3X,EAACkW,IAAK,EAAA,MAAK,QAAQ,CAAA;AAAA,MAC5B,UAAS;AAAA,MACT,OAAAnU;AAAA,MACA,UAAAyP;AAAA,MACA,OAAO6F,EAAM,SAAS,SAAS,YAAY;AAAA,MAC3C,QAAO;AAAA,MACP,SAAS,CAACO,GAAQjC,MAAW;AACpB,QAAAA,EAAA,UAAU,WAAW,mBAAmB,sBAAsB;AAAA,UACnE,oBAAoB;AAAA,QAAA,CACrB,GAEMA,EAAA,UAAU,WAAW,mBAAmB,qBAAqB;AAAA,UAClE,aAAa;AAAA,UACb,YAAY;AAAA,QAAA,CACb,GAEDiC,EAAO,UAAU;AAAA,UACf,IAAI;AAAA,UACJ,OAAO;AAAA,UACP,oBAAoB;AAAA,UACpB,KAAK,OAAOA,MAAW;AACjB,gBAAA;AACI,oBAAAd,GAAgB,KAAK,UAAUW,GAAM,MAAMG,EAAO,SAAU,CAAA,CAAC,CAAC,GACpEF,EAAQ,QAAQ,sBAAsB;AAAA,YAAA,QAChC;AACN,cAAAA,EAAQ,MAAM,8BAA8B;AAAA,YAAA;AAAA,UAC9C;AAAA,QACF,CACD,GAEDE,EAAO,UAAU;AAAA,UACf,IAAI;AAAA,UACJ,OAAO;AAAA,UACP,oBAAoB;AAAA,UACpB,cAAc;AAAA,UACd,KAAK,CAACA,MAAW;AACT,kBAAAC,IAAY,KAAK,UAAUJ,GAAM,MAAMG,EAAO,SAAU,CAAA,GAAG,MAAM,CAAC;AACxEA,YAAAA,EAAO,SAASC,CAAS;AAAA,UAAA;AAAA,QAC3B,CACD;AAAA,MACH;AAAA,MACA,SAAS;AAAA,QACP,UAAAyb;AAAA,QACA,iBAAiB;AAAA,QACjB,SAAS,EAAE,SAAS,GAAM;AAAA,QAC1B,UAAU;AAAA,QACV,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,sBAAsB;AAAA,QACtB,MAAM;AAAA,UACJ,oBAAoB;AAAA,UACpB,+BAA+B;AAAA,QACjC;AAAA,QACA,WAAW;AAAA,UACT,oBAAoB;AAAA,UACpB,uBAAuB;AAAA,UACvB,yBAAyB;AAAA,UACzB,sBAAsB;AAAA,QACxB;AAAA,QACA,qBAAqB;AAAA,MAAA;AAAA,IACvB;AAAA,EACF;AAEJ,GCtEMC,KACJ,2HAUWC,KAA8D,CAAC;AAAA,EAC1E,UAAAhiB;AAAA,EACA,cAAAqZ;AAAA,EACA,SAAA4I;AAAA,EACA,OAAAC;AAAA,EACA,gBAAAC;AACF,MAAM;AACJ,QAAM,CAACC,GAAcC,CAAe,IAAIh0B,EAAS8zB,CAAc,GACzD,EAAE,YAAAlyB,GAAY,SAAAI,EAAQ,IAAIkgB,GAAoB;AAEpD,SAAAvc,EAAU,MAAM;AACV,QAAA,CAACM;AACH;AAGF,UAAM,EAAE,eAAAqD,EAAA,IAAkB1H,EAAW,SAAS,GACxCqyB,IAAc3qB,EAAc,MAAM,KAAK,CAACoN,MAAMA,EAAE,SAAS,WAAW;AAC1E,QAAKud;AAID,UAAA;AACF,cAAM/xB,IAAQ6xB,IAAenc,GAAM,MAAMmc,CAAY,IAAI;AACjD,QAAA/xB,EAAA,YAAYiyB,EAAY,IAAI5tB,EAAa,gBAAgB,IAAIC,GAAapE,CAAK,CAAC;AAAA,MAAA,QAClF;AAAA,MAAA;AAAA,EAER,GACC,CAAC6xB,CAAY,CAAC,GAIb,gBAAAhsB,EAAAE,IAAA,EAAA,UAAA;AAAA,IAAC,gBAAAF,EAAA,OAAA,EAAI,WAAW,4EACd,UAAA;AAAA,MAAA,gBAAA5H,EAACwW,GAAQ,EAAA,OAAO+c,IACd,UAAA,gBAAA3rB,EAACyD,EAAW,MAAX,EAAgB,OAAO,EAAE,UAAU,IAAI,QAAQ,OAAU,GAAA,UAAA;AAAA,QAAA;AAAA,QAEvD,gBAAArL,EAAAgZ,IAAA,EAAmB,OAAO,EAAE,UAAU,IAAI,YAAY,GAAG,SAAS,KAAK,eAAe,WAAA,EAAc,CAAA;AAAA,MAAA,EAAA,CACvG,EACF,CAAA;AAAA,MACC,gBAAAhZ,EAAA,OAAA,EAAI,WAAW,4CACb,UACC0zB,KAAA,gBAAA1zB;AAAA,QAACwW;AAAA,QAAA;AAAA,UACC,OACGqU,IAEG,SADA;AAAA,UAIN,UAAA,gBAAA7qB;AAAA,YAACqN;AAAA,YAAA;AAAA,cACC,MAAM;AAAA,cACN,MAAM;AAAA,cACN,SAAAomB;AAAA,cACA,wBAAOM,IAAmB,EAAA;AAAA,cAC1B,UAAU,CAAClJ;AAAA,cACX,SAAS,MAAM;AACT,oBAAA;AACI,wBAAAO,KAAUwI,KAAgB,IAAI,KAAK,EAAE,WAAW,IAAI,OAAOnc,GAAM,MAAMmc,KAAgB,EAAE;AACvF,kBAAAF,IAAA,EAAE,OAAOjyB,EAAW,WAAW,eAAe,SAAS2pB,GAAQ;AAAA,gBAAA,QACjE;AACN,kBAAA4I,GAAa,MAAM;AAAA,oBACjB,SAAS;AAAA,oBACT,aAAa;AAAA,oBACb,WAAW;AAAA,kBAAA,CACZ;AAAA,gBAAA;AAAA,cAEL;AAAA,cACD,UAAA;AAAA,YAAA;AAAA,UAAA;AAAA,QAED;AAAA,MAAA,EAGN,CAAA;AAAA,IAAA,GACF;AAAA,IACA,gBAAAh0B,EAAC,OAAI,EAAA,WAAW,uCACd,UAAA,gBAAAA;AAAA,MAACqzB;AAAA,MAAA;AAAA,QACC,OAAOO;AAAA,QACP,UAAU,CAACjd,MAAS;AAClB,UAAAkd,EAAgBld,CAAI,GACpBnF,IAAWmF,KAAQ,EAAE;AAAA,QAAA;AAAA,MACvB;AAAA,IAAA,EAEJ,CAAA;AAAA,EAAA,GACF;AAEJ;ACzFA,IAAKsd,uBAAAA,OACHA,EAAA,SAAS,UACTA,EAAA,QAAQ,SACRA,EAAA,QAAQ,SAHLA,IAAAA,MAAA,CAAA,CAAA;AAeE,MAAMC,KAAgD,CAAC;AAAA,EAC5D,gBAAAP;AAAA,EACA,UAAAniB;AAAA,EACA,OAAAkiB;AAAA,EACA,SAAAS;AAAA,EACA,SAAAV,IAAU;AAAA,EACV,WAAWW,IAAYZ;AACzB,MAAM;AACJ,QAAM,CAACvK,GAAQC,CAAS,IAAI9e,GAA2B,qBAAqB,EAAE,GACxE,CAACiqB,GAASC,CAAU,IAAIlqB;AAAA,IAAsC;AAAA,IAAsB;AAAA;AAAA,EAAwB,GAE5G,EAAE,SAAAvI,EAAQ,IAAIkgB,GAAoB,GAClC,EAAE,WAAA9b,GAAW,UAAAiD,GAAU,cAAA2hB,EAAa,IAAIrkB,EAAsB,CAAC,EAAE,eAAA2C,GAAe,UAAAD,SAAgB;AAAA,IACpG,UAAAA;AAAAA,IACA,cAAcC,EAAc,MAAM,KAAK,CAACoN,MAAMA,EAAE,SAASzH,EAAS,KAAK;AAAA,IACvE,YAAY3F,EAAc,SAAS,CAAI,GAAA;AAAA,MACrC,CAACe,GAAK8V,OAAU;AAAA,QACd,GAAG9V;AAAA,QACH,CAAC8V,EAAK,EAAE,GAAGA,EAAK;AAAA,MAAA;AAAA,MAElB,CAAA;AAAA,IAAC;AAAA,EACH,EACA,GAEI,CAACuU,GAAcC,CAAe,IAAI30B,EAAiB,OAAO,GAE1D40B,IAAS/yB,EAAqD,MAC7DwH,IAIC,YAAYA,IAIX,OAAO,QAAQA,EAAS,QAAQ,SAAS,EAAE,EAC/C,IAAI,CAAC,CAACzI,GAAKkC,CAAI,OAAO,EAAE,GAAGA,GAAM,QAAQlC,IAAM,EAC/C,OAAO,CAACsY,MAAM,CAAC,CAACjK,EAAS,KAAK,EAAE,SAAS7I,IAAY8S,EAAE,MAAM,CAAa,CAAC,EAC3E,OAAO,CAACA,MAAMA,EAAE,KAAK,YAAY,EAAE,SAASkQ,GAAQ,YAAY,KAAK,EAAE,CAAC,EACxE,KAAK,CAAC7oB,GAAG,OAAOA,EAAE,SAAS,MAAM,EAAE,SAAS,EAAE,IAPxC,CAAC,IAJD,CAAC,GAYT,CAAC8I,GAAU+f,CAAM,CAAC;AAErB,2BACGpQ,IAAW,EAAA,WAAU,qBAAoB,WAAU,cAAa,YAAW,+BAC1E,UAAA;AAAA,IAAA,gBAAA7Y,EAAC00B,MAAM,SAAS,IAAI,aAAa,IAAI,WAAU,yDAC7C,UAAA,gBAAA10B;AAAA,MAACo0B;AAAA,MAAA;AAAA,QACC,gBAAAT;AAAA,QACA,SAAAF;AAAA,QACA,cAAA5I;AAAA,QACA,OAAA6I;AAAA,QACA,UAAAliB;AAAA,MAAA;AAAA,IAAA,GAEJ;AAAA,sBACCmjB,IAAkB,EAAA;AAAA,sBAClBD,IAAM,EAAA,SAAS,IAAI,SAAS,IAAI,WAAW,uDAC1C,UAAA;AAAA,MAAC,gBAAA9sB,EAAA,OAAA,EAAI,WAAW,0EACd,UAAA;AAAA,QAAA,gBAAA5H;AAAA,UAAC;AAAA,UAAA;AAAA,YACC,WAAU;AAAA,YACV,MAAK;AAAA,YACL,aAAY;AAAA,YACZ,OAAOipB;AAAA,YACP,UAAU,CAAChc,MAAMic,EAAUjc,EAAE,OAAO,KAAK;AAAA,UAAA;AAAA,QAC3C;AAAA,QACA,gBAAAjN,EAAC,SAAI,WAAW,4CACb,eACE,gBAAAA,EAAAwW,GAAA,EAAQ,OAAO,SACd,UAAA,gBAAAxW;AAAA,UAACqN;AAAA,UAAA;AAAA,YACC,MAAM;AAAA,YACN,MAAM;AAAA,YACN,wBAAOunB,IAAc,EAAA;AAAA,YACrB,SAAS,MAAM;AACH,cAAAT,IAAA,GACVK,EAAgB,OAAO,GACvBtL,EAAU,EAAE;AAAA,YAAA;AAAA,UACd;AAAA,WAEJ,EAEJ,CAAA;AAAA,MAAA,GACF;AAAA,MACA,gBAAAlpB,EAAC,OAAI,EAAA,WAAW,uCACd,UAAA,gBAAAA,EAACkW,IAAK,EAAA,UAAUud,GACd,UAAA,gBAAA7rB,EAAC,OAAI,EAAA,WAAW,iCACb,UAAA;AAAA,QAAA,CAACsB,KACA,gBAAAtB,EAACyD,EAAW,MAAX,EAAgB,MAAK,aAAY,OAAO,EAAE,WAAW,UAAU,WAAW,IAAI,UAAU,GAAM,GAAA,UAAA;AAAA,UAAA;AAAA,4BAE5F,MAAG,EAAA;AAAA,UAAE;AAAA,4BAEL,MAAG,EAAA;AAAA,UACJ,gBAAArL;AAAA,YAACqL,EAAW;AAAA,YAAX;AAAA,cACC,MAAK;AAAA,cACL,QAAO;AAAA,cACP,OAAO,EAAE,UAAU,IAAI,WAAW,GAAG,SAAS,eAAe;AAAA,cAC9D,UAAA;AAAA,YAAA;AAAA,UAAA;AAAA,QAED,GACF;AAAA,QAED,QAAQ,SAAS4d,GAAQ,YAAiB,KAAA,EAAE,KAAK/f,KAChD,gBAAAtB;AAAA,UAAC;AAAA,UAAA;AAAA,YACC,WAAWhC,EAAK,uCAAuC2uB,MAAiB,WAAW,QAAQ;AAAA,YAC3F,SAAS,MAAMC,EAAgB,OAAO;AAAA,YAEtC,UAAA;AAAA,cAAA,gBAAA5sB,EAACyD,EAAW,MAAX,EAAgB,aAAU,QAAO,UAAQ,IACxC,UAAA;AAAA,gBAAA,gBAAArL;AAAA,kBAAC60B;AAAA,kBAAA;AAAA,oBACC,QAAQzrB,EAAMF,CAAQ,EACnB,KAAK,EAAE,OAAOG,EAAE,YAAY,GAAG,MAAM,OAAgB,EACrD,KAAK,EAAE,QAAQA,EAAE,YAAY,GAAG,MAAM,SAAkB,EACxD,UAAU,MAAM,SAAkB;AAAA,kBAAA;AAAA,gBACvC;AAAA,gBAAE;AAAA,cAAA,GAEJ;AAAA,cACA,gBAAArJ,EAACqL,EAAW,MAAX,EAAgB,MAAM,aAAa,aAAU,eAC3C,UAAAjC,EAAMF,CAAQ,EACZ,KAAK,EAAE,QAAQG,EAAE,EAAE,GAAG,CAAC,EAAE,QAAAC,EAAO,MAAMA,GAAQ,WAAW,EACzD,UAAU,MAAA;AAAA,eAAe,EAC9B,CAAA;AAAA,YAAA;AAAA,UAAA;AAAA,QACF;AAAA,QAEDmrB,EAAO,IAAI,CAACxhB,MACX,gBAAArL;AAAA,UAAC;AAAA,UAAA;AAAA,YAEC,WAAWhC,EAAK,uCAAuCqN,EAAM,WAAWshB,KAAgB,QAAQ;AAAA,YAChG,SAAS,MAAMC,EAAgBvhB,EAAM,MAAM;AAAA,YAC3C,eAAe,MAAMpR,EAAQ,SAASoR,EAAM,MAAM;AAAA,YAElD,UAAA;AAAA,cAAC,gBAAArL,EAAAyD,EAAW,MAAX,EAAgB,aAAU,QAAO,UAAU,EAAE,SAAS4H,EAAM,KAAA,GAC3D,UAAA;AAAA,gBAAC,gBAAAjT,EAAA60B,IAAA,EAAW,QAAQ5hB,EAAM,WAAW/J,GAAU,OAAO,MAAM,SAAS,UAAU,UAAW,CAAA;AAAA,gBACzF+J,EAAM;AAAA,cAAA,GACT;AAAA,cACA,gBAAAjT,EAACqL,EAAW,MAAX,EAAgB,MAAM,aAAa,aAAU,eAC3C,UAAA4H,EAAM,YACT,CAAA;AAAA,YAAA;AAAA,UAAA;AAAA,UAXKA,EAAM;AAAA,QAad,CAAA;AAAA,MAAA,EACH,CAAA,EACF,CAAA,EACF,CAAA;AAAA,IAAA,GACF;AAAA,sBACC0hB,IAAkB,EAAA;AAAA,sBAClBD,IAAM,EAAA,SAAS,IAAI,aAAa,IAAI,WAAW,0DAC9C,UAAA;AAAA,MAAC,gBAAA10B,EAAA,OAAA,EAAI,WAAW,6EACd,UAAA,gBAAAA;AAAA,QAAC8Y;AAAA,QAAA;AAAA,UACC,eAAc;AAAA,UACd,MAAK;AAAA,UACL,OAAO,EAAE,OAAO,OAAO;AAAA,UACvB,UAAU,CAACuI,MAAQiT,EAAWjT,CAAwB;AAAA,UACtD,OAAO,OAAO,OAAO4S,EAAiB,EAAE,IAAI,CAAChqB,OAAO;AAAA,YAClD,KAAKA;AAAA,YACL,OAAOA;AAAA,UAAA,EACP;AAAA,UACF,oBACE,gBAAAjK,EAACwW,GAAQ,EAAA,OAAM,eACb,UAAA,gBAAAxW;AAAA,YAACqN;AAAA,YAAA;AAAA,cACC,MAAK;AAAA,cACL,MAAO,gBAAArN,EAAAmN,IAAA,EAAc,OAAO,EAAE,UAAU,MAAM;AAAA,cAC9C,SAAS,MAAMtL,EAAQ,eAAe,MAAS;AAAA,YAAA;AAAA,UAAA,EAEnD,CAAA;AAAA,QAAA;AAAA,MAAA,GAGN;AAAA,MACA,gBAAA7B,EAAC,OAAI,EAAA,WAAW,uCACd,UAAA,gBAAAA;AAAA,QAACqzB;AAAA,QAAA;AAAA,UACC,UAAQ;AAAA,UACR,OAAOjqB,EAAMF,CAAQ,EAClB;AAAA,YAAK,EAAE,QAAQG,EAAE,EAAE;AAAA,YAAG,CAAC,EAAE,QAAAC,EACxB,MAAAF,EAAMmrB,CAAY,EACf;AAAA,cAAK;AAAA,cAAS,MACbO;AAAA,gBACE;AAAA,kBACE,WAAWxrB,GAAQ;AAAA,kBACnB,QAAQA,GAAQ;AAAA,gBAClB;AAAA,gBACA+qB,KAAW;AAAA;AAAA,cAAA;AAAA,YACb,EAED,UAAU,MAAMS;AAAA,cAAexrB,GAAQ,MAAMirB,CAAY;AAAA,cAAGF,KAAW;AAAA;AAAA,YAAyB,CAAA;AAAA,UAAA,EAEpG,UAAU,MAAM,EAAE;AAAA,QAAA;AAAA,MAAA,EAEzB,CAAA;AAAA,IAAA,EACF,CAAA;AAAA,EAAA,GACF;AAEJ,GAEMS,KAAiB,CAACnyB,GAAe0xB,MAA+B;AACpE,QAAMU,IAAW3rB,EAAM,CAACirB,GAAS1xB,CAAI,CAAC,EACnC,KAAK,CAAC,UAA0B,EAAE,QAAQ0G,EAAE,EAAG,CAAA,GAAG,CAAC,GAAG,EAAE,QAAAwG,EAAQ,CAAA,MAAMA,CAAM,EAC5E,KAAK,CAAC,SAAyB,EAAE,OAAOxG,EAAE,EAAA,CAAG,GAAG,CAAC,CAAA,EAAG,EAAE,OAAA9G,EAAO,CAAA,MAAMA,CAAK,EACxE,KAAK,CAAC,SAAyB,EAAE,OAAO8G,EAAE,EAAG,CAAA,GAAG,CAAC,CAAG,EAAA,EAAE,OAAA4J,GAAO,MAAMA,CAAK,EACxE,KAAK,CAAC,SAAyB,EAAE,WAAW5J,EAAE,GAAG,GAAG,CAAC,CAAA,EAAG,EAAE,WAAA6J,EAAA,CAAW,MAAMA,CAAS,EACpF,UAAU,OAAO,CAAG,EAAA;AAEvB,SAAOuE,GAAM,UAAUsd,GAAU,QAAW,CAAC;AAC/C,GAEMF,KAAoE,CAAC,EAAE,QAAAtpB,QACvEA,MAAW,YACN,OAGLA,MAAW,YAEX,gBAAAvL;AAAA,EAACg1B;AAAA,EAAA;AAAA,IACC,cAAc,CAAC,4BAA4B,6BAA6B;AAAA,IACxE,OAAO,EAAE,aAAa,GAAG,UAAU,IAAI,SAAS,IAAI;AAAA,EAAA;AACtD,IAKF,gBAAAh1B;AAAA,EAACi1B;AAAA,EAAA;AAAA,IACC,cAAc,CAAC,0BAA0B,2BAA2B;AAAA,IACpE,OAAO,EAAE,aAAa,GAAG,UAAU,GAAG;AAAA,EAAA;AACxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GClPSC,KAA0B,CAAC,EAAE,MAAAve,GAAM,WAAAtR,QACvCsR,EAAK,QAAQ,cAAc,CAACvN,GAAOL,MAAY;AAChD,MAAAmD;AACA,SAAA,eAAe,KAAKnD,CAAO,IACrBmD,IAAA,YACC,QAAQ,KAAKnD,CAAO,IACrBmD,IAAA,YAEAA,IAAA,WAEH,gBAAgB7G,CAAS,mBAAmB6G,CAAK,MAAMnD,CAAO;AAAA,CACtE,GCdUosB,KAAa;AAAA,EACxB,QAAAC;AACF,GCkBMC,KAAkB,CAACjnB,MAAoD;AACvE,MAAA;AACI,UAAAknB,IAAalnB,EAAM,MAAM,MAAM;AACjC,QAAAknB,EAAW,UAAU;AAChB,aAAA;AAIH,UAAAC,IADYD,EAAW,IAAI,EACP,QAAQ,KAAK,EAAE,EAAE,QAAQ,KAAK,EAAE,GACpD,CAACnqB,GAAMC,CAAK,IAAImqB,EAAQ,MAAM,IAAI;AAExC,WAAInqB,IACK,CAAC,SAASD,CAAI,GAAG,SAASC,CAAK,CAAC,IAGlC,SAASD,CAAI;AAAA,EAAA,QACd;AACC,WAAA;AAAA,EAAA;AAEX,GAEMqqB,KAAiB,CAACz1B,GAAcsC,MAAiC;AACjE,MAAA,CAACyD;AACH,WAAO,CAAC;AAGJ,QAAAsI,IAAyBhF,EAAMrJ,CAAI,EACtC,KAAK,YAAY,MAAM01B,GAAmBpzB,CAAM,CAAC,EACjD,KAAK,SAAS,MAAMqzB,GAAwBrzB,CAAM,CAAC,EACnD,UAAU,MAAM,IAAI;AACvB,MAAI,CAAC+L;AACH,WAAO,CAAC;AAGJ,QAAAsa,IAAWtf,EAAMisB,GAAgBjnB,EAAM,MAAM,CAAC,EACjD,KAAK/E,EAAE,QAAQ,CAACkN,OAAO,EAAE,MAAMA,GAAG,IAAIA,IAAI,EAC1C,KAAK,CAAClN,EAAE,QAAQA,EAAE,MAAM,GAAG,CAAC,CAAC,GAAGhI,CAAC,OAAO,EAAE,MAAM,GAAG,IAAIA,EAAI,EAAA,EAC3D,UAAU,OAAO,EAAE,MAAM,GAAG,IAAIgB,EAAO,OAAA,EAAS,GAE7CszB,IAAcvsB,EAAMgF,EAAM,IAAI,EACjC,KAAK,eAAe,MAAM,cAAc,EACxC,KAAK,cAAc,MAAM,aAAa,EACtC,KAAK,iBAAiB,MAAM,gBAAgB,EAC5C,KAAK,WAAW,MAAM,UAAU,EAChC,UAAU,CAACmI,MAAMA,CAAC;AAEd,SAAA;AAAA,IACL;AAAA,MACE,MAAMmS,EAAS;AAAA,MACf,IAAIA,EAAS;AAAA,MACb,SAASta,EAAM;AAAA,MACf,QAAQunB;AAAA,MACR,UAAU;AAAA,IAAA;AAAA,EAEd;AACF,GAEaC,KAAY,CAAC71B,MACnB+F,OAIEqvB,GAAW;AAAA,EAChB,CAACU,MAAS;AACH,IAAAA,EAAA,IAAI,aAAa,iBAAiB,MAAM;AAC7C,UAAMC,IAAUD,EAAK,MAAM,MAAME,EAAS,GAEpC1zB,IAASwzB,EAAK,MAAM,IAAI,SAAS,GACjCG,IAAcC,GAAsB;AAAA,MACxC,QAAA5zB;AAAA,MACA,gBAAgBtC;AAAA,MAChB,QAAQ+1B,EAAQ;AAAA,MAChB,OAAOA,EAAQ;AAAA,MACf,sBAAsBA,EAAQ;AAAA,IAAA,CAC/B;AAED,WAAIE,EAAY,KAAK,CAACxsB,MAAMA,EAAE,aAAa,OAAO,IAC3CqsB,EAAA,IAAI,aAAa,iBAAiB,OAAO,IACrCG,EAAY,KAAK,CAACxsB,MAAMA,EAAE,aAAa,SAAS,IACpDqsB,EAAA,IAAI,aAAa,iBAAiB,SAAS,IACvCG,EAAY,KAAK,CAACxsB,MAAMA,EAAE,aAAa,MAAM,IACjDqsB,EAAA,IAAI,aAAa,iBAAiB,MAAM,IACpCG,EAAY,KAAK,CAACxsB,MAAMA,EAAE,aAAa,MAAM,KACjDqsB,EAAA,IAAI,aAAa,iBAAiB,MAAM,GAGxCG;AAAA,EACT;AAAA,EACA;AAAA,IACE,cAAc,CAAC5kB,MACNA,EAAO,aAAa;AAAA,MAAK,CAAC,MAC/B,EAAE,QAAQ;AAAA,QACR,CAAC8kB,MACCA,EAAO,GAAGC,EAA0B,KACpCD,EAAO,GAAGE,EAAwB,KAClCF,EAAO,GAAGG,EAAgC,KAC1CH,EAAO,GAAGI,EAAsB;AAAA,MAAA;AAAA,IAEtC;AAAA,EACF;AAEJ,IA1CS,CAAC,GAsDCL,KAAwB,CAAC;AAAA,EACpC,QAAA5zB;AAAA,EACA,gBAAAk0B,IAAiB;AAAA,EACjB,QAAAC,IAAS;AAAA,EACT,OAAAC;AAAA,EACA,sBAAAC;AACF,MAAiD;AAC/C,MAAIr0B,EAAO,OAAO,WAAW;AAC3B,WAAO,CAAC;AAGV,QAAMs0B,IAAwBt0B,IAASmzB,GAAee,GAAgBl0B,CAAM,IAAI,CAAC,GAC3Eu0B,IAAgCH,EACnC,OAAO,CAAC1d,MAAM,CAAC,CAACA,EAAE,KAAK,EACvB;AAAA,IAAI,CAACA,MACJ8d,GAAiB;AAAA,MACf,MAAM9d,EAAE,KAAK,CAAC;AAAA,MACd,IAAIA,EAAE,KAAK,CAAC;AAAA,MACZ,UAAU3P,EAAM2P,EAAE,KAAe,EAC9B,KAAK1P,EAAE,OAAO,WAAW,OAAO,GAAG,MAAM,MAAe,EACxD,KAAKA,EAAE,OAAO,WAAW,OAAO,GAAG,MAAM,MAAe,EACxD,UAAU,MAAM,SAAkB;AAAA,MACrC,SAAS0P,EAAE;AAAA,MACX,QAAQ;AAAA,IACT,CAAA;AAAA,EACH,GAEIid,IAAc,CAAC,GAAGW,GAAuB,GAAGC,CAAe;AAEjE,MAAIL,MAAmB,WAAWE,EAAM,SAAS,GAAG;AAC5C,UAAAK,IAAuBL,EAAM,CAAC,EAAE;AACtC,IAAIK,MAAyB,UACfd,EAAA;AAAA,MACVa,GAAiB;AAAA,QACf,MAAM;AAAA,QACN,IAAIx0B,EAAO;AAAA,QACX,UAAUm0B,IAAS,UAAU;AAAA,QAC7B,SAAS,sEAAsEO,GAAgBD,CAAoB,CAAC;AAAA,QACpH,QAAQ;AAAA,MACT,CAAA;AAAA,IACH;AAAA,EAEO,WAAAJ,KAAwBD,EAAM,SAAS,GAAG;AAC7C,UAAAK,IAAuBL,EAAM,CAAC,EAAE,MAChCO,IAAqB7wB,GAAa,SAAS2wB,CAAoB;AAKrE,IAJmB1tB,EAAMotB,CAAM,EAC5B,KAAK,IAAM,MAAMQ,EAAmB,MAAMN,CAAoB,CAAC,EAC/D,UAAU,MAAMM,EAAmB,UAAUN,CAAoB,CAAC,KAGvDV,EAAA;AAAA,MACVa,GAAiB;AAAA,QACf,MAAM;AAAA,QACN,IAAIx0B,EAAO;AAAA,QACX,UAAUm0B,IAAS,UAAU;AAAA,QAC7B,SAAS,6CAA6CO,GAAgBL,EAAqB,QAAQ,CAAC,kBAAkBK,GAAgBD,CAAoB,CAAC;AAAA,QAC3J,QAAQ;AAAA,MACT,CAAA;AAAA,IACH;AAAA,EACF;AAGK,SAAAd;AACT,GAEMa,KAAmB,CAACI,OACbA,EAAA,gBAAgB,CAAC9nB,MAAM;AAC1B,QAAA0d,IAAU,SAAS,cAAc,KAAK;AAC5C,SAAAA,EAAQ,YAAYqI,GAAwB;AAAA,IAC1C,MAAM+B,EAAW;AAAA,IACjB,WAAW;AAAA,EAAA,CACZ,GAEMpK;AACT,GAEOoK;AC3LT,IAAIC,KAAaC;AAEV,MAAMC,KAAkB,CAACvB,GAAkBqB,GAAwBG,GAAcC,MAAe;AACrG,QAAMC,IAAcnuB,EAAM8tB,EAAW,IAAI,EACtC,KAAK,YAAY,MAAM;AAChB,UAAAM,IAAS,GAAGN,EAAW,KAAK;AAE3B,WAAArB,EAAK,MAAM,OAAO;AAAA,MACvB,SAAS,EAAE,MAAAwB,GAAY,IAAAC,GAAQ,QAAAE,EAAO;AAAA,MACtC,WAAW,EAAE,QAAQH,IAAOG,EAAO,SAAS,EAAE;AAAA;AAAA,IAAA,CAC/C;AAAA,EACF,CAAA,EACA;AAAA,IAAU,MACT3B,EAAK,MAAM,OAAO;AAAA,MAChB,SAAS,EAAE,MAAAwB,GAAY,IAAAC,GAAQ,QAAQJ,EAAW,MAAM;AAAA,MACxD,WAAW,EAAE,QAAQG,IAAOH,EAAW,MAAM,OAAO;AAAA,IACrD,CAAA;AAAA,EACH;AAEF,EAAArB,EAAK,SAAS0B,CAAW;AAC3B,GAEME,KAAkB,CAAClhB,MAClBA,IAIkBA,GAAG,KAAK,KAAKmhB,GAAS,KAAK,GAAG,SAAS,cAAc,KAAK,MACxDD,GAAgBlhB,GAAG,MAAM,IAJzC,IAOLohB,KACJ,MACA,CAACC,MAAwD;AACjD,QAAAC,IAAOC,GAAWF,EAAQ,KAAK,GAE/BG,IAAOH,EAAQ,MAAM,OAAOA,EAAQ,GAAG,GACvChzB,IAAOizB,EAAK,aAAaD,EAAQ,KAAK,EAAE;AAC9C,MACE,CAACH,GAAgB7yB,CAAI,KACpB,CAACgzB,EAAQ,YAAYA,EAAQ,QAAQ,KACrC,CAACA,EAAQ,YAAY,CAACG,KAAQnzB,EAAK,SAAS;AAEtC,WAAA;AAGT,QAAMozB,IAAqBd,GAAW;AAAA,IAAI,CAACrzB,OACxC;AAAA,MACC,GAAGA;AAAA,MACH,QAAQA,EAAE,OAAO,WAAW,KAAK,EAAE;AAAA,MACnC,OAAOuzB;AAAA,IACT;AAAA,EACF,GAEMC,IAAOU,GAAM,QAAQH,EAAQ;AACnC,UAAQhzB,EAAK,MAAM;AAAA,IACjB,KAAK;AAAA,IACL,KAAK,gBAAgB;AACnB,YAAMqzB,IAASL,EAAQ,MAAM,MAAM7B,EAAS;AAErC,aAAA;AAAA,QACL,MAAAsB;AAAA,QACA,SAAS,CAAC,GAAGa,GAAoB,EAAE,MAAM,YAAY,MAAMD,EAAO,UAAU,GAAG,GAAGD,CAAkB;AAAA,QACpG,UAAU;AAAA,MACZ;AAAA,IAAA;AAAA,IAEF,KAAK,UAAU;AACb,YAAMC,IAASL,EAAQ,MAAM,MAAM7B,EAAS,GACtCoC,IAAQC,GAAiBxzB,CAAI,GAC7ByzB,KAAcJ,EAAO,SAAS,IAAI,KAAK,CAAClf,MAAMA,EAAE,KAAK,CAAC,MAAMof,IAAQ,CAAC,KAAKpf,EAAE,KAAK,CAAC,MAAMof,EAAM,CAAC,CAAC;AACtG,aAAKE,IAIE;AAAA,QACL,MAAMzzB,EAAK,OAAO;AAAA,QAClB,SAASszB,GAAoB,EAAE,MAAMG,EAAW,MAAM;AAAA,QACtD,UAAU;AAAA,MACZ,IAPS;AAAA,IAOT;AAAA,IAEF,KAAK;AAAA,IACL,KAAK,gBAAgB;AACnB,YAAMJ,IAASL,EAAQ,MAAM,MAAM7B,EAAS,GACtCoC,IAAQC,GAAiBxzB,CAAI,GAC7ByzB,KAAcJ,EAAO,SAAS,IAAI,KAAK,CAAClf,MAAMA,EAAE,KAAK,CAAC,MAAMof,IAAQ,CAAC,KAAKpf,EAAE,KAAK,CAAC,MAAMof,EAAM,CAAC,CAAC;AACtG,aAAKE,IAIE;AAAA,QACL,MAAAhB;AAAA,QACA,SAASa,GAAoB,EAAE,MAAMG,EAAW,MAAM;AAAA,QACtD,UAAU;AAAA,MACZ,IAPS;AAAA,IAOT;AAAA,IAEF;AACS,aAAA;AAAA,EAAA;AAEb,GAEID,KAAmB,CAACxzB,MAA8C;AACtE,MAAI0zB,IAAW1zB;AACf,EAAI,CAAC,sBAAsB,gBAAgB,EAAE,SAAS0zB,EAAS,QAAQ,QAAQ,EAAE,KAAKA,EAAS,QAAQ,gBACrGA,IAAWA,EAAS,OAAO;AAG7B,MAAIC,IAAYD;AAChB,SAAOC,EAAU;AACf,IAAAA,IAAYA,EAAU;AAGxB,SAAO,CAACA,EAAU,MAAMD,EAAS,EAAE;AACrC,GAEME,KAAY,CAAC5zB,MAA8C;AAC/D,MAAI0zB,IAAW1zB;AACX,EAAA0zB,EAAS,UAAU,CAAC,sBAAsB,gBAAgB,EAAE,SAASA,EAAS,OAAO,IAAI,MAC3FA,IAAWA,EAAS;AAGtB,MAAIC,IAAYD;AAChB,SAAOC,EAAU;AACf,IAAAA,IAAYA,EAAU;AAGxB,SAAO,CAACA,EAAU,MAAMD,EAAS,EAAE;AACrC,GAEaG,KAAsB,CAACrf,IAA8B,OAAO;AACvE,QAAMsf,IAAmBtf,EAAO,IAAI,CAAC,EAAC,OAAA7V,GAAO,MAAAwI,SAAW;AAAA,IACtD,OAASxI;AAAA,IACT,MAAQ;AAAA,IACR,QAAUwI,KAAQ;AAAA,IAClB,MAAQ;AAAA,EAAA,EACR;AACF,SAAAmrB,KAAa,CAAC,GAAGC,IAAgB,GAAGuB,CAAgB,GAC7CC,GAAe;AAAA,IACpB,UAAU,CAAChB,GAA0B,CAAA;AAAA,EAAA,CACtC;AACH,GAEaiB,KAAiB,MAC5BC,GAAa,CAAChD,GAAMiD,MAAQ;AAC1B,QAAMf,IAAOlC,EAAK,MAAM,OAAOiD,CAAG;AAClC,MAAI,CAACf;AACI,WAAA;AAGH,QAAAp1B,IAAOkzB,EAAK,MAAM,IAAI,YAAYkC,EAAK,MAAMA,EAAK,EAAE,GACpDtrB,IAAUyqB,GAAW,KAAK,CAAC1a,MAAQA,EAAI,UAAU7Z,CAAI;AAC3D,MAAI8J;AACK,WAAA;AAAA,MACL,KAAKsrB,EAAK;AAAA,MACV,KAAKA,EAAK;AAAA,MACV,OAAO;AAAA,MACP,SAAS;AACD,cAAAgB,IAAM,SAAS,cAAc,KAAK;AACpC,eAAAA,EAAA,UAAU,IAAI,sBAAsB,GACxCA,EAAI,MAAM,aAAa,OACvBA,EAAI,YAAY7D,GAAwB;AAAA,UACtC,MAAM,iCAAiCzoB,EAAQ,IAAI;AAAA,EAAYA,EAAQ,KAAK,KAAKA,EAAQ,MAAM;AAAA;AAAA,UAC/F,WAAW;AAAA,QAAA,CACZ,GACM,EAAE,KAAAssB,EAAI;AAAA,MAAA;AAAA,IAEjB;AAIF,QAAMn0B,IADOkzB,GAAWjC,EAAK,KAAK,EAChB,aAAaiD,GAAK,EAAE,GAEhCb,IAASpC,EAAK,MAAM,MAAME,EAAS,GACnCoC,IAAQK,GAAU5zB,CAAI,GACtByzB,KAAcJ,EAAO,SAAS,IAAI,KAAK,CAAClf,MAAMA,EAAE,KAAK,CAAC,MAAMof,IAAQ,CAAC,KAAKpf,EAAE,KAAK,CAAC,MAAMof,EAAM,CAAC,CAAC;AACtG,MAAIE,KAAcF,GAAO;AACvB,UAAM91B,IAASwzB,EAAK,MAAM,IAAI,SAAS;AAEhC,WAAA;AAAA,MACL,KAAKsC,EAAM,CAAC;AAAA,MACZ,KAAKA,EAAM,CAAC;AAAA,MACZ,OAAO;AAAA,MACP,SAAS;AACD,cAAAY,IAAM,SAAS,cAAc,KAAK;AACpC,eAAAA,EAAA,UAAU,IAAI,sBAAsB,GACxCA,EAAI,MAAM,aAAa,OACvBA,EAAI,YAAY7D,GAAwB;AAAA,UACtC,MAAM,GAAG7yB,EAAO,MAAM81B,EAAM,CAAC,GAAGA,EAAM,CAAC,CAAC,CAAC,OAAOpB,GAAgBsB,EAAW,IAAI,CAAC;AAAA,UAChF,WAAW;AAAA,QAAA,CACZ,GACM,EAAE,KAAAU,EAAI;AAAA,MAAA;AAAA,IAEjB;AAAA,EAAA;AAGK,SAAA;AACT,CAAC,GAEUC,KAAoBC;AAAA,EAC/BC,GAAe,OAAO;AAAA,IACpB,EAAE,KAAK,CAACngB,EAAE,SAASA,EAAE,UAAUA,EAAE,cAAcA,EAAE,cAAcA,EAAE,SAASA,EAAE,WAAW,GAAG,OAAO,UAAU;AAAA,IAC3G,EAAE,KAAK,CAACA,EAAE,QAAQA,EAAE,IAAI,GAAG,OAAO,UAAU;AAAA,IAC5C,EAAE,KAAK,CAACA,EAAE,SAASA,EAAE,YAAY,GAAGA,EAAE,SAASA,EAAE,MAAMA,EAAE,QAAQA,EAAE,KAAK,GAAGA,EAAE,aAAa,GAAG,OAAO,UAAU;AAAA,IAC9G,EAAE,KAAK,CAACA,EAAE,QAAQA,EAAE,MAAMA,EAAE,MAAMA,EAAE,KAAK,GAAG,OAAO,UAAU;AAAA,IAC7D,EAAE,KAAKA,EAAE,SAAS,OAAO,UAAU;AAAA,EACpC,CAAA;AACH,GAEaogB,KAAmBF;AAAA,EAC9BC,GAAe,OAAO;AAAA,IACpB,EAAE,KAAK,CAACngB,EAAE,SAASA,EAAE,UAAUA,EAAE,cAAcA,EAAE,cAAcA,EAAE,SAASA,EAAE,WAAW,GAAG,OAAO,UAAU;AAAA,IAC3G,EAAE,KAAK,CAACA,EAAE,QAAQA,EAAE,IAAI,GAAG,OAAO,UAAU;AAAA,IAC5C,EAAE,KAAK,CAACA,EAAE,SAASA,EAAE,YAAY,GAAGA,EAAE,SAASA,EAAE,MAAMA,EAAE,QAAQA,EAAE,KAAK,GAAGA,EAAE,aAAa,GAAG,OAAO,UAAU;AAAA,IAC9G,EAAE,KAAK,CAACA,EAAE,QAAQA,EAAE,MAAMA,EAAE,MAAMA,EAAE,KAAK,GAAG,OAAO,UAAU;AAAA,IAC7D,EAAE,KAAKA,EAAE,SAAS,OAAO,UAAU;AAAA,EACpC,CAAA;AACH,GAEMqgB,KAAc,IAAIC;AAAA,EACtBC,GAAW,OAAO;AAAA,IAChB,QAAQC;AAAAA,IACR,MAAM;AAAA,IACN,cAAc;AAAA,MACZ,eAAe,EAAE,UAAU,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG,EAAE;AAAA,MAC1D,WAAW;AAAA,IAAA;AAAA,EAEd,CAAA;AACH,GAEMC,KAAsB,IAAIH;AAAA,EAC9BC,GAAW,OAAO;AAAA,IAChB,QAAQG,GAAkB,UAAU;AAAA,MAClC,MAAMC,GAAW,CAAC90B,MACZA,EAAK,SAAS,oBACT,EAAE,QAAQ20B,GAAU,IAGtB,IACR;AAAA,IAAA,CACF;AAAA,IACD,MAAM;AAAA,IACN,cAAc;AAAA,MACZ,eAAe,EAAE,UAAU,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG,EAAE;AAAA,MAC1D,WAAW;AAAA,IAAA;AAAA,EAEd,CAAA;AACH,GAQaI,KAAgB,CAAC,EAAE,MAAA55B,GAAM,MAAA65B,IAAO,IAAM,QAAAxgB,QACjD;AAAA,EACErZ,MAAS,aAAaq5B,KAAcI;AAAA,EACpCf,GAAoBrf,CAAM;AAAA,EAC1Bwf,GAAe;AAAA,EACfiB,GAAc;AAAA,EACdD,KAAQhE,GAAU71B,CAAI;AAAA,EACtBg2B;AAAA,EACA+D,GAAQ;AAAA,EACRC,GAAO,GAAG;AAAA,IACR,GAAGC;AAAA,IACH,GAAGC;AAAA,IACH,EAAE,KAAK,SAAS,KAAKC,IAAwB,OAAOA,GAAuB;AAAA,EAC5E,CAAA;AACH,EAAE,OAAO,CAACC,MAAQ,CAAC,CAACA,CAAG,GC3QnBC,KAA8B,EAAE,OAAO,CAAA,GAAI,UAAU,OAAO,gBAAgB,YAAY,QAAQ,GAAM,GAE/FhE,KAA2BiE,GAAY,OAA4B,GACnElE,KAA6BkE,GAAY,OAA6B,GACtEhE,KAAmCgE,GAAY,OAA4B,GAC3E/D,KAAyB+D,GAAY,OAAgB,GAErDtE,KAAYuE,GAAW,OAAkB;AAAA,EACpD,SAAS;AACA,WAAAF;AAAA,EACT;AAAA,EACA,OAAOr4B,GAAOw1B,GAAa;AACnB,UAAAgD,IAAuBhD,EAAY,QAAQ,KAAK,CAACtqB,MAAMA,EAAE,GAAGkpB,EAA0B,CAAC,GACvFI,IAA8CntB,EAAMmxB,CAAoB,EAC3E,KAAK,EAAE,OAAOlxB,EAAE,OAAU,GAAA,CAAC4D,MAAMA,EAAE,KAAK,EACxC,UAAU,MAAMlL,EAAM,cAAc,GAEjCy4B,IAA6BjD,EAAY,QAAQ,KAAK,CAACtqB,MAAMA,EAAE,GAAGopB,EAAgC,CAAC,GACnGK,IAAuBttB,EAAMoxB,CAA0B,EAC1D,KAAK,EAAE,OAAOnxB,EAAE,YAAY,GAAG,CAAC,EAAE,OAAAtH,EAAAA,MAAYA,CAAK,EACnD,KAAK,EAAE,OAAOsH,EAAE,QAAA,GAAW,MAAM;AAAA,KAAS,EAC1C,UAAU,MAAMtH,EAAM,oBAAoB,GAEvC04B,IAAqBlD,EAAY,QAAQ,KAAK,CAACtqB,MAAMA,EAAE,GAAGmpB,EAAwB,CAAC,GACnFtkB,IAAoC1I,EAAMqxB,CAAkB,EAC/D,KAAK,EAAE,OAAOpxB,EAAE,EAAA,GAAK,CAAC4D,MAAMA,EAAE,KAAK,EACnC,UAAU,MAAMlL,EAAM,QAAQ,IAAI,GAE/B24B,IAAmBnD,EAAY,QAAQ,KAAK,CAACtqB,MAAMA,EAAE,GAAGqpB,EAAsB,CAAC,GAC/EE,IAAkBptB,EAAMsxB,CAAgB,EAC3C,KAAK,EAAE,OAAOrxB,EAAE,QAAQ,GAAG,CAAC,EAAE,OAAAtH,QAAYA,CAAK,EAC/C,UAAU,MAAMA,EAAM,MAAM;AAE/B,QAAI,CAAC+P;AACH,aAAO,EAAE,GAAG/P,GAAO,gBAAAw0B,GAAgB,sBAAAG,GAAsB,QAAAF,EAAO;AAIlE,QAAI,CAACe,EAAY,cAAc,CAACgD,KAAwB,CAACE;AACvD,aAAO,EAAE,GAAG14B,GAAO,gBAAAw0B,GAAgB,sBAAAG,GAAsB,QAAAF,EAAO;AAG5D,UAAAn0B,IAASk1B,EAAY,OAAO,SAAS;AACpC,WAAA;AAAA,MACL,QAAAl1B;AAAA,MACA,gBAAAk0B;AAAA,MACA,sBAAAG;AAAA,MACA,QAAAF;AAAA,MACA,MAAM1kB;AAAA,MACN,UAAUA,EAAa,OAAO;AAAA,MAC9B,OAAO1I,EAAMmtB,CAAc,EACxB,KAAK,SAAS,MAAMzkB,EAAa,eAAezP,CAAM,CAAC,EACvD,UAAU,MAAMyP,EAAa,UAAUzP,CAAM,CAAC;AAAA,IACnD;AAAA,EACF;AAAA,EACA,QAAQjC,GAAGC,GAAG;AACZ,WACED,EAAE,WAAWC,EAAE,UACfD,EAAE,mBAAmBC,EAAE,kBACvBD,EAAE,SAASC,EAAE,QACbD,EAAE,yBAAyBC,EAAE,wBAC7BD,EAAE,WAAWC,EAAE;AAAA,EAAA;AAGrB,CAAC,GAOY63B,KAAsB,CAAC,EAAE,MAAA3iB,GAAM,MAAAxV,IAAO,iBAC1CqJ,EAAMmM,CAAI,EACd;AAAA,EAAK,EAAE,QAAQlM,EAAE,EAAE;AAAA,EAAG,CAAC,MACtB,OAAO,QAAQ,EAAE,MAAgB,EAAE,IAAI,CAAC,CAAC1C,GAAGC,CAAC,OAAO;AAAA,IAClD,OAAOD;AAAA,IACP,MAAA5G;AAAA,IACA,OAAO;AAAA,IACP,QAAQg3B,GAAgBnwB,CAAC;AAAA,IACzB,OAAOwwB;AAAA,EAAA,EACP;AAAA,EAEH,UAAU,MAAM,EAAE,GAGVL,KAAkB,CAACh3B,MAC9BqJ,EAAMrJ,CAAI,EACP,KAAKsJ,EAAE,QAAQ,CAACY,MAAMA,EAAE,aAAa,EACrC,KAAK,EAAE,QAAQZ,EAAE,EAAA,GAAK,MAAM,QAAQ,EACpC,KAAK,EAAE,OAAOA,EAAE,EAAK,GAAA,CAAC0P,MAAM,GAAGge,GAAgBhe,EAAE,KAAK,CAAC,IAAI,EAC3D,UAAU,MAAM,SAAS,GC7FxB4hB,KAAiB,CAACnpB,GAAmCopB,MACzDC,GAAW,eAAe,GAAG,CAACzpB,MAAW;AAEnC,EADJwpB,IAAgBxpB,EAAO,KAAK,GACvBA,EAAO,cAIZI,IAAWJ,EAAO,MAAM,IAAI,SAAA,CAAU;AACxC,CAAC,GAEG0pB,KAAc,CAACC,IAAS,OAAWA,IAAS5B,KAAmBH,IAuBxD1wB,KAAa/I,EAAM;AAAA,EAC9B,CACE;AAAA,IACE,SAAA8I,IAAU;AAAA,IACV,YAAA2yB,IAAa;AAAA,IACb,QAAAxE,IAAS;AAAA,IACT,SAAA3xB;AAAA,IACA,UAAAyB;AAAA,IACA,OAAAvE;AAAA,IACA,UAAAyP;AAAA,IAAA,aACAypB;AAAAA,IACA,WAAA51B;AAAA,IACA,eAAAu1B;AAAA,IACA,MAAA76B,IAAO;AAAA,IACP,WAAAm7B;AAAA,IACA,cAAAppB;AAAA,IACA,sBAAA4kB;AAAA,IACA,MAAAkD,IAAO;AAAA,IACP,GAAGp4B;AAAA,KAELkD,MACG;AACG,UAAAmP,IAAYtO,EAAuB,IAAI,GACvC41B,IAAa51B,EAAmB,IAAI,GACpC,EAAE,OAAA8R,EAAA,IAAUC,GAAM,SAAS,GAE3B,EAAE,cAAAtO,GAAc,eAAAC,EAAA,IAAkBzC;AAAA,MACtC,CAAC,EAAE,cAAAwC,IAAe,CAAA,GAAI,eAAAC,IAAgB,UAAU,EAAE,cAAAD,GAAc,eAAAC,EAAc;AAAA,IAChF,GACMmQ,IAAS,CAAC,GAAGpQ,GAAc,GAAGC,CAAa,GAE3CmyB,IAAc15B;AAAA,MAClB,OAAO;AAAA,QACL,cAAc,IAAI25B,GAAY;AAAA,QAC9B,OAAO,IAAIA,GAAY;AAAA,QACvB,aAAa,IAAIA,GAAY;AAAA,QAC7B,UAAU,IAAIA,GAAY;AAAA,QAC1B,gBAAgB,IAAIA,GAAY;AAAA,QAChC,cAAc,IAAIA,GAAY;AAAA,MAAA;AAAA,MAEhC,CAAA;AAAA,IACF;AAEA,WAAA71B,EAAU,MAAM;AACV,UAAA,CAACqO,EAAU;AACb;AAGI,YAAAynB,IAAa,IAAIT,GAAW;AAAA,QAChC,QAAQhnB,EAAU;AAAA,QAClB,OAAO0nB,GAAY,OAAO;AAAA,UACxB,KAAKx5B;AAAA,UACL,YAAY;AAAA,YACV84B,GAAW;AAAA,YACXW,GAAgB;AAAA,YAChBJ,EAAY,aAAa,GAAGzB,GAAc,EAAE,MAAA55B,GAAM,MAAA65B,GAAM,QAAAxgB,EAAO,CAAC,CAAC;AAAA,YACjEgiB,EAAY,eAAe,GAAGT,GAAenpB,GAAUopB,CAAa,CAAC;AAAA,YACrEQ,EAAY,MAAM,GAAGN,GAAYzjB,EAAM,SAAS,MAAM,CAAC;AAAA,YACvD+jB,EAAY,YAAY,GAAGH,IAAcQ,GAAeR,CAAW,IAAI,EAAE;AAAA,YACzEG,EAAY,SAAS,GAAGP,GAAW,SAAS,GAAG,CAACv0B,CAAQ,CAAC;AAAA,YACzD80B,EAAY,aAAa,GAAGF,IAAY,EAAE,MAAAn7B,EAAM,CAAA,KAAK,CAAE,CAAA;AAAA,UAAA;AAAA,QAE1D,CAAA;AAAA,MAAA,CACF;AAEA,aAAAo7B,EAAmB,UAAUG,GAEvB,MAAM;AACX,QAAAA,EAAW,QAAQ,GAClBH,EAAmB,UAAU;AAAA,MAChC;AAAA,IACF,GAAG,EAAE,GAEL31B,EAAU,MAAM;AACd,UAAI,CAAC21B,EAAW,WAAWp5B,MAAU;AACnC;AAGF,YAAM25B,IAAKP,EAAW;AAClB,MAAAO,EAAG,MAAM,IAAI,GAAGC,GAAK,GAAG55B,EAAM,MAAM;AAAA,CAAI,CAAC,CAAC,KAI9C25B,EAAG,SAAS;AAAA,QACV,SAAS;AAAA,UACP,MAAM;AAAA,UACN,IAAIA,EAAG,MAAM,IAAI;AAAA,UACjB,QAAQ35B;AAAA,QAAA;AAAA,MACV,CACD;AAAA,IAAA,GACA,CAACA,CAAK,CAAC,GAEVyD,EAAU,MAAM;AACV,MAAC21B,EAAW,WAIhBA,EAAW,QAAQ,SAAS;AAAA,QAC1B,SAASC,EAAY,MAAM,YAAYN,GAAYzjB,EAAM,SAAS,MAAM,CAAC;AAAA,MAAA,CAC1E;AAAA,IAAA,GACA,CAACA,EAAM,IAAI,CAAC,GAEf7R,EAAU,MAAM;AACV,MAAC21B,EAAW,WAIhBA,EAAW,QAAQ,SAAS;AAAA,QAC1B,SAASC,EAAY,YAAY,YAAYH,IAAcQ,GAAeR,CAAW,IAAI,CAAE,CAAA;AAAA,MAAA,CAC5F;AAAA,IAAA,GACA,CAACA,CAAW,CAAC,GAEhBz1B,EAAU,MAAM;AACV,MAAC21B,EAAW,WAIhBA,EAAW,QAAQ,SAAS;AAAA,QAC1B,SAASC,EAAY,SAAS,YAAYP,GAAW,SAAS,GAAG,CAACv0B,CAAQ,CAAC;AAAA,MAAA,CAC5E;AAAA,IAAA,GACA,CAACA,CAAQ,CAAC,GAEbd,EAAU,MAAM;AACV,MAAC21B,EAAW,WAIhBA,EAAW,QAAQ,SAAS;AAAA,QAC1B,SAASC,EAAY,eAAe,YAAYT,GAAenpB,GAAUopB,CAAa,CAAC;AAAA,MAAA,CACxF;AAAA,IAAA,GACA,CAACppB,GAAUopB,CAAa,CAAC,GAE5Bp1B,EAAU,MAAM;AACV,MAAC21B,EAAW,WAIhBA,EAAW,QAAQ,SAAS;AAAA,QAC1B,SAAS;AAAA,UACPC,EAAY,aAAa,YAAYzB,GAAc,EAAE,MAAA55B,GAAM,MAAA65B,GAAM,QAAAxgB,EAAO,CAAC,CAAC;AAAA,UAC1E+c,GAA2B;AAAA,YACzB/sB,EAAMrJ,CAAI,EACP,KAAK,SAAS,MAAM,OAAgB,EACpC,UAAU,MAAM,UAAmB;AAAA,UAAA;AAAA,QACxC;AAAA,MACF,CACD;AAAA,IACA,GAAA,CAACA,GAAM65B,GAAMxgB,CAAM,CAAC,GAEvB5T,EAAU,MAAM;AACV,MAAC21B,EAAW,WAIhBA,EAAW,QAAQ,SAAS;AAAA,QAC1B,SAASC,EAAY,aAAa,YAAYF,IAAY,EAAE,MAAAn7B,EAAM,CAAA,KAAK,CAAE,CAAA;AAAA,MAAA,CAC1E;AAAA,IAAA,GACA,CAACm7B,GAAWn7B,CAAI,CAAC,GAEpByF,EAAU,MAAM;AACd,UAAI,GAAC21B,EAAW,WAAW,CAACr1B,OAIxB;AAAA,YAAAgM,KAAiB,MAAoC;AACvD,UAAAqpB,EAAW,QAAQ,SAAS;AAAA,YAC1B,SAAS/E,GAAyB,GAAG,IAAI;AAAA,UAAA,CAC1C;AACD;AAAA,QAAA;AAGF,QAAA+E,EAAW,QAAQ,SAAS;AAAA,UAC1B,SAAS/E,GAAyB,GAAGhiB,GAAmBtC,CAAY,CAAC;AAAA,QAAA,CACtE;AAAA;AAAA,IAAA,GACA,CAACA,CAAY,CAAC,GAEjBtM,EAAU,MAAM;AACd,UAAI,GAAC21B,EAAW,WAAW,CAACr1B,OAIxB;AAAA,YAAA4wB,KAAyB,MAA4C;AACvE,UAAAyE,EAAW,QAAQ,SAAS;AAAA,YAC1B,SAAS9E,GAAiC,GAAG,IAAI;AAAA,UAAA,CAClD;AACD;AAAA,QAAA;AAGF,QAAA8E,EAAW,QAAQ,SAAS;AAAA,UAC1B,SAAS9E,GAAiC,GAAGjiB,GAAmBsiB,CAAoB,CAAC;AAAA,QAAA,CACtF;AAAA;AAAA,IAAA,GACA,CAACA,CAAoB,CAAC,GAEzBlxB,EAAU,MAAM;AACV,MAAC21B,EAAW,WAIhBA,EAAW,QAAQ,SAAS;AAAA,QAC1B,SAAS7E,GAAuB,GAAGE,CAAM;AAAA,MAAA,CAC1C;AAAA,IAAA,GACA,CAACA,CAAM,CAAC,GAGT,gBAAAx2B;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,KAAK8D,GAAY+P,GAAWnP,CAAG;AAAA,QAC/B,WAAWkB;AAAA,UACT;AAAA,UACAf,KAAW,CAACm2B,KAAc;AAAA,UAC1BA,KAAc;AAAA,UACd3yB,KAAW;AAAA,UACXhD;AAAA,QACF;AAAA,QACA,OAAO,EAAE,mBAAmBR,EAAQ;AAAA,QACpC,aAAW9E;AAAA,QACV,GAAGyB;AAAA,MAAA;AAAA,IACN;AAAA,EAAA;AAGN,GC7Pao6B,KAAoC,CAACp6B,MAAU;AAC1D,QAAM,EAAE,QAAAyV,GAAQ,WAAAC,GAAW,WAAAC,GAAW,QAAAiC,GAAQ,cAAA1Z,MAAiB8B,GACzD,EAAE,mBAAA6R,EAAA,IAAsBtQ,GAAsB,CAAC,EAAE,mBAAAsQ,EAAAA,OAAyB,EAAE,mBAAAA,EAAAA,EAAoB,GAChG,CAACwoB,CAAI,IAAIlrB,EAAK,QAAyB,GACvC5Q,IAAO4Q,EAAK,SAAS,QAAQkrB,CAAI;AAEvC,SAAAr2B,EAAU,MAAM;AACd,IAAIyR,KACF4kB,EAAK,YAAY;AAAA,EACnB,GACC,CAAC5kB,GAAQ4kB,CAAI,CAAC,GAGf,gBAAA77B;AAAA,IAACyO;AAAA,IAAA;AAAA,MACC,OAAM;AAAA,MACN,MAAMwI;AAAA,MACN,gBAAc;AAAA,MACd,UAAUC;AAAA,MACV,OAAO;AAAA,MACP,QAAO;AAAA,MACP,eAAe;AAAA,QACb,MAAM;AAAA,QACN,UAAU;AAAA,MACZ;AAAA,MACA,cAAAxX;AAAA,MAEA,UAAA,gBAAAkI;AAAA,QAAC+I;AAAA,QAAA;AAAA,UACC,IAAG;AAAA,UACH,cAAc;AAAA,UACd,MAAAkrB;AAAA,UACA,QAAO;AAAA,UACP,eAAe,EAAE,MAAM,aAAa;AAAA,UACpC,UAAU,CAAC,EAAE,OAAAt4B,GAAO,MAAAwI,GAAM,cAAA1B,QAAmB;AAC/B,YAAA8M,IAAA;AAAA,cACV,IAAI,OAAO,WAAW;AAAA,cACtB,QAAQ5T,KAAS,KAAK,OAAU,GAAA,SAAS,IAAIA,IAAQ;AAAA,cACrD,MAAAwI;AAAA,cACA,cAAA1B;AAAA,YAAA,CACD;AAAA,UACH;AAAA,UAEC,UAAA;AAAA,YAAA+O,KACE,gBAAApZ,EAAA2Q,EAAK,MAAL,EAAU,OAAO,oBAChB,UAAA,gBAAA3Q;AAAA,cAAC87B;AAAA,cAAA;AAAA,gBACC,YAAY,EAAE,OAAO,QAAQ,OAAO,SAAS,UAAU,QAAQ;AAAA,gBAC/D,SAAS1iB;AAAA,gBACT,UAAU,CAACvP,MAAQ;AACX,wBAAAtG,IAAQF,GAAgBwG,GAAiBuP,CAAM;AACrD,kBAAI7V,KACFs4B,EAAK,eAAe;AAAA,oBAClB,MAAMt4B,GAAO;AAAA,oBACb,OAAOA,GAAO;AAAA,kBAAA,CACf;AAAA,gBACH;AAAA,cACF;AAAA,YAAA,GAEJ;AAAA,8BAEDoN,EAAK,MAAL,EAAU,MAAK,QAAO,OAAM,SAAQ,OAAO,CAAC,EAAE,UAAU,GAAM,CAAA,GAC7D,4BAAC1I,IAAM,EAAA,cAAa,MAAM,CAAA,GAC5B;AAAA,YACA,gBAAAjI;AAAA,cAAC2Q,EAAK;AAAA,cAAL;AAAA,gBACC,MAAK;AAAA,gBACL,OAAO5Q,MAAS,eAAe,aAAa;AAAA,gBAC5C,OAAO,CAAC,EAAE,UAAUyB,EAAM,eAAe,WAAW;AAAA,gBAEnD,UAAAA,EAAM,eAAe,WACnB,gBAAAxB,EAAAsI,IAAA,EAAW,cAAc+K,EAAA,CAAmB,IAE7C,gBAAArT,EAACoF,IAAiB,EAAA,SAAS,EAAG,CAAA;AAAA,cAAA;AAAA,YAElC;AAAA,YACC,gBAAApF,EAAA2Q,EAAK,MAAL,EAAU,MAAK,gBAAe,OAAM,iBACnC,UAAC,gBAAA3Q,EAAAiI,IAAA,EAAM,cAAa,MAAM,CAAA,EAC5B,CAAA;AAAA,UAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IACF;AAAA,EACF;AAEJ,GC7Ea8zB,KAAmE,CAACv6B,MAAU;AACzF,QAAM,EAAE,QAAAyV,GAAQ,WAAAC,GAAW,WAAAC,GAAW,OAAA5T,GAAO,QAAA6V,GAAQ,cAAA1Z,MAAiB8B,GAChE,EAAE,mBAAA6R,EAAA,IAAsBtQ,GAAsB,CAAC,EAAE,mBAAAsQ,EAAAA,OAAyB,EAAE,mBAAAA,EAAAA,EAAoB,GAChG,CAACwoB,CAAI,IAAIlrB,EAAK,QAAQ,GAEtB,CAACqrB,GAAeC,CAAgB,IAAIp8B,EAA8B;AAExE,SAAA2F,EAAU,MAAM;AACd,IAAIyR,MACF4kB,EAAK,YAAY,GACjBA,EAAK,eAAe;AAAA,MAClB,MAAMt4B,GAAO;AAAA,MACb,OAAOA,GAAO;AAAA,MACd,cAAcA,GAAO;AAAA,IAAA,CACtB,GACD04B,EAAiBz4B,GAAQD,GAAO,OAAiB6V,CAA6B,CAAC;AAAA,KAEhF,CAACnC,GAAQ4kB,GAAMt4B,GAAO6V,CAAM,CAAC,GAG9B,gBAAApZ;AAAA,IAACyO;AAAA,IAAA;AAAA,MACC,OAAM;AAAA,MACN,MAAMwI;AAAA,MACN,UAAUC;AAAA,MACV,gBAAc;AAAA,MACd,QAAO;AAAA,MACP,eAAe;AAAA,QACb,MAAM;AAAA,QACN,UAAU;AAAA,MACZ;AAAA,MACA,OAAO;AAAA,MACP,cAAAxX;AAAA,MAEA,UAAA,gBAAAkI;AAAA,QAAC+I;AAAA,QAAA;AAAA,UACC,IAAG;AAAA,UACH,MAAAkrB;AAAA,UACA,QAAO;AAAA,UACP,cAAc;AAAA,UACd,eAAe;AAAA,YACb,MAAMt4B,GAAO;AAAA,YACb,OAAOA,GAAO;AAAA,YACd,cAAcA,GAAO;AAAA,UACvB;AAAA,UACA,UAAU,CAACZ,MAAS;AACN,YAAAwU,IAAA;AAAA,cACV,GAAG5T;AAAA,cACH,GAAGZ;AAAA,cACH,OAAOA,GAAM,OAAO,OAAA,GAAU,SAAS,IAAIA,GAAM,QAAQ;AAAA,YAAA,CAC1D;AAAA,UACH;AAAA,UAEC,UAAA;AAAA,YAAAyW,KACE,gBAAApZ,EAAA2Q,EAAK,MAAL,EAAU,OAAO,oBAChB,UAAA,gBAAA3Q;AAAA,cAAC87B;AAAA,cAAA;AAAA,gBACC,YAAY,EAAE,OAAO,QAAQ,OAAO,SAAS,UAAU,QAAQ;AAAA,gBAC/D,SAAS1iB;AAAA,gBACT,OAAO4iB;AAAA,gBACP,UAAU,CAACnyB,MAAQ;AACjB,kBAAAoyB,EAAiBpyB,CAAG;AACdtG,wBAAAA,IAAQF,GAAgBwG,GAAiBuP,CAAM;AACrD,kBAAI7V,KACFs4B,EAAK,eAAe;AAAA,oBAClB,MAAMt4B,GAAO;AAAA,oBACb,OAAOA,GAAO;AAAA,kBAAA,CACf;AAAA,gBACH;AAAA,cACF;AAAA,YAAA,GAEJ;AAAA,8BAEDoN,EAAK,MAAL,EAAU,MAAK,QAAO,OAAM,SAAQ,OAAO,CAAC,EAAE,UAAU,GAAA,CAAM,GAC7D,UAAA,gBAAA3Q,EAACiI,KAAM,CAAA,GACT;AAAA,YACC,gBAAAjI,EAAA2Q,EAAK,MAAL,EAAU,MAAK,SAAQ,OAAM,YAAW,OAAO,CAAC,EAAE,UAAUnP,EAAM,eAAe,UAAU,CAAC,GAC1F,UAAAA,EAAM,eAAe,WACnB,gBAAAxB,EAAAsI,IAAA,EAAW,cAAc+K,EAAmB,CAAA,IAE7C,gBAAArT,EAACoF,IAAiB,EAAA,SAAS,GAAG,EAElC,CAAA;AAAA,YACC,gBAAApF,EAAA2Q,EAAK,MAAL,EAAU,MAAK,gBAAe,OAAM,iBACnC,UAAC,gBAAA3Q,EAAAiI,IAAA,EAAM,cAAa,MAAM,CAAA,EAC5B,CAAA;AAAA,UAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IACF;AAAA,EACF;AAEJ,GCrFMi0B,KAID,CAAC,EAAE,KAAAnN,GAAK,OAAA5e,GAAO,UAAAgsB,QAAe;AAC3B,QAAAz3B,IAAMa,EAAuB,IAAI,GACjC,CAAG,EAAA62B,CAAI,IAAI9pB,GAAwB;AAAA,IACvC,QAAQ;AAAA,IACR,QAAQC,GAAS;AACR,aAAA;AAAA,QACL,WAAWA,EAAQ,aAAa;AAAA,MAClC;AAAA,IACF;AAAA,IACA,MAAM3P,GAAgB2P,GAAS;AACzB,UAAA,CAAC7N,EAAI;AACP;AAEF,YAAM23B,IAAYz5B,EAAK,OACjB05B,IAAansB;AAEnB,UAAIksB,MAAcC;AAChB;AAGI,YAAAC,IAAoB73B,EAAI,SAAS,sBAAsB,GACvD83B,KAAgBD,EAAkB,SAASA,EAAkB,OAAO,GAGpEE,IADelqB,EAAQ,gBAAgB,EACE,IAAIgqB,EAAkB;AACjE,MAAAF,IAAYC,KAAcG,IAAeD,KAIzCH,IAAYC,KAAcG,IAAeD,MAI7CL,EAASE,GAAWC,CAAU,GAC9B15B,EAAK,QAAQ05B;AAAA,IAAA;AAAA,EACf,CACD,GAEK,CAAC,EAAE,YAAA7pB,EAAA,GAAciqB,CAAI,IAAI9pB,GAAQ;AAAA,IACrC,MAAM;AAAA,IACN,MAAM,OACG,EAAE,IAAImc,EAAI,IAAI,OAAA5e,EAAM;AAAA,IAE7B,SAAS,CAACoC,OAAkB;AAAA,MAC1B,YAAYA,EAAQ,WAAW;AAAA,IACjC;AAAA,EAAA,CACD;AAEI,SAAAmqB,EAAAN,EAAK13B,CAAG,CAAC,GAEZ,gBAAA1E,EAAC28B,IAAK,EAAA,KAAAj4B,GAAU,OAAO,EAAE,SAAS+N,IAAa,IAAI,EAAE,GAAG,WAAW,EAAE,SAAS,SAAS,GACrF,UAAC,gBAAAzS,EAAA,OAAA,EAAI,WAAU,gCACb,4BAACuK,IAAM,EAAA,YAAU,IAAC,eAAc,UAC9B,UAAA;AAAA,IAAC,gBAAAvK,EAAA,OAAA,EAAI,WAAU,kCAAiC,UAAC,KAAA;AAAA,IAChD,gBAAA4H,EAAA2C,IAAA,EAAM,MAAI,IAAC,KAAK,GACf,UAAA;AAAA,MAAA,gBAAAvK,EAACqL,EAAW,MAAX,EAAiB,UAAA0jB,EAAI,MAAK;AAAA,MAC1B,gBAAA/uB,EAAAqL,EAAW,MAAX,EAAgB,MAAK,aAAY,OAAO,EAAE,UAAU,GAClD,GAAA,UAAA0jB,EAAI,MACP,CAAA;AAAA,IAAA,EACF,CAAA;AAAA,EAAA,EACF,CAAA,EACF,CAAA,GACF;AAEJ,GAEa6N,KAA8C,CAACp7B,MAAU;AACpE,QAAM,EAAE,QAAAyV,GAAQ,WAAAC,GAAW,WAAAC,GAAW,QAAA7T,GAAQ,cAAA5D,MAAiB8B,GAEzD,CAACqB,GAASg6B,CAAU,IAAIh9B,EAA4B,CAAA,CAAE;AAE5D,EAAA2F,EAAU,MAAM;AACd,IAAIyR,KACF4lB,EAAW,CAAC,GAAIv5B,KAAU,CAAA,CAAG,CAAC;AAAA,EAChC,GACC,CAAC2T,GAAQ3T,CAAM,CAAC;AAEb,QAAA64B,IAAW,CAAC9E,GAAcC,MAAgB;AAC9C,QAAIA,MAAO;AACT;AAGI,UAAAwF,IAAU,CAAC,GAAGj6B,CAAO,GACrBgqB,IAAUiQ,EAAQ,OAAOzF,GAAM,CAAC,EAAE,CAAC;AACjC,IAAAyF,EAAA,OAAOxF,GAAI,GAAGzK,CAAO,GAC7BgQ,EAAWC,CAAO;AAAA,EACpB;AAGE,SAAA,gBAAA98B;AAAA,IAACyO;AAAA,IAAA;AAAA,MACC,OAAM;AAAA,MACN,MAAMwI;AAAA,MACN,UAAUC;AAAA,MACV,OAAO;AAAA,MACP,gBAAc;AAAA,MACd,WAAW,EAAE,YAAY,GAAG;AAAA,MAC5B,QAAO;AAAA,MACP,eAAe;AAAA,QACb,UAAU;AAAA,QACV,MAAM;AAAA,MACR;AAAA,MACA,cAAAxX;AAAA,MAEA,UAAC,gBAAAM,EAAA2Q,GAAA,EAAK,IAAG,yBAAwB,UAAU,MAAMwG,IAAYtU,CAAO,GAClE,UAAA,gBAAA7C,EAACuK,IAAM,EAAA,KAAK,GAAG,iBAAgB,WAC5B,UAAQ1H,EAAA,IAAI,CAACJ,GAAQ0N,MACpB,gBAAAnQ,EAACk8B,IAA0B,EAAA,KAAKz5B,GAAQ,OAAA0N,GAAc,UAAAgsB,EAAtC,GAAA15B,EAAO,EAAmD,CAC3E,GACH,EACF,CAAA;AAAA,IAAA;AAAA,EACF;AAEJ,GClIas6B,KAAiC,MAAM;AAClD,QAAM,EAAE,QAAAp9B,GAAQ,WAAAC,GAAW,gBAAAE,GAAgB,cAAAJ,EAAA,IAAiBO,GAAuB,GAE7EyC,IAAK,QACLs6B,IAAe75B,GAAwB,GACvC,EAAE,qBAAA85B,GAAqB,cAAAj0B,GAAc,eAAAC,EAAkB,IAAAlG;AAAA,IAC3D,CAAC,EAAE,eAAApC,GAAe,cAAAqI,GAAc,eAAAC,SAAqB;AAAA,MACnD,qBAAqBtJ,GAAQ,aAAagB,EAAchB,EAAO,UAAU,IAAI;AAAA,MAC7E,cAAAqJ;AAAAA,MACA,eAAAC;AAAAA,IACF;AAAA,EACF;AAEA,SAEI,gBAAArB,EAAAE,IAAA,EAAA,UAAA;AAAA,IAAA,gBAAA9H;AAAA,MAAC47B;AAAA,MAAA;AAAA,QACC,IAAAl5B;AAAA,QACA,YAAY/C,GAAQ;AAAA,QACpB,QAAQG,EAAe,KAAK;AAAA,QAC5B,QAAQH,GAAQ,eAAe,WAAWqJ,IAAeC;AAAA,QACzD,WAAW,MAAMrJ,EAAU,MAAS;AAAA,QACpC,WAAW,CAAC+C,MAA0B;AACpC,UAAKhD,MACQq9B,EAAA,UAAUr9B,EAAO,YAAYgD,CAAI,GAC9C/C,EAAU,MAAS;AAAA,QACrB;AAAA,QACA,cAAAF;AAAA,MAAA;AAAA,IACF;AAAA,IACA,gBAAAM;AAAA,MAAC+7B;AAAA,MAAA;AAAA,QACC,IAAAr5B;AAAA,QACA,YAAY/C,GAAQ;AAAA,QACpB,QAAQG,EAAe,MAAM;AAAA,QAC7B,QAAQH,GAAQ,eAAe,WAAWqJ,IAAeC;AAAA,QACzD,OAAOtJ,GAAQ;AAAA,QACf,WAAW,MAAMC,EAAU,MAAS;AAAA,QACpC,WAAW,CAAC+C,MAAS;AACnB,UAAKhD,MACLq9B,EAAa,aAAar9B,EAAO,YAAYgD,EAAK,IAAIA,CAAI,GAC1D/C,EAAU,MAAS;AAAA,QACrB;AAAA,QACA,cAAAF;AAAA,MAAA;AAAA,IACF;AAAA,IACA,gBAAAM;AAAA,MAAC48B;AAAA,MAAA;AAAA,QACC,QAAQ98B,EAAe,SAAS;AAAA,QAChC,QAAQm9B;AAAA,QACR,WAAW,MAAMr9B,EAAU,MAAS;AAAA,QACpC,WAAW,CAAC+C,MAAS;AACnB,UAAKhD,MACQq9B,EAAA,eAAer9B,EAAO,YAAYgD,CAAI,GACnD/C,EAAU,MAAS;AAAA,QACrB;AAAA,QACA,cAAAF;AAAA,MAAA;AAAA,IAAA;AAAA,EACF,GACF;AAEJ,GCxCaw9B,KAAoC,MAAM;AACrD,QAAMF,IAAe75B,GAAwB,GACvC,EAAE,kBAAAg6B,GAAkB,UAAA72B,GAAU,cAAAwC,GAAc,WAAAhG,GAAW,eAAAs6B,GAAe,QAAAt7B,MAAWiB;AAAA,IACrF,CAAC,EAAE,kBAAAo6B,GAAkB,UAAA72B,GAAU,cAAAwC,GAAc,eAAAnI,GAAe,QAAAmB,SAAc;AAAA,MACxE,kBAAAq7B;AAAAA,MACA,UAAA72B;AAAAA,MACA,cAAAwC;AAAAA,MACA,QAAAhH;AAAAA,MACA,WAAWnB,EAAc;AAAA,MACzB,eAAeA,GAAe,OAAO,QAAQ;AAAA,IAC/C;AAAA,EACF,GAEM,EAAE,eAAAiB,GAAe,YAAAH,EAAW,IAAI2B,GAAoB,GACpDusB,IAAYpqB,EAAyB,IAAI,GAEzC83B,IAAc,OAAOr2B,MAAgC;AACnD,UAAA,EAAE,MAAA+E,MAAS/E;AAEb,QAAA;AACI,YAAArG,IAAgBc,EAAW,SAAA,EAAW;AAC5C,YAAMqrB,GAAgB/gB,GAAM,CAAC,EAAE,GAAGpL,GAAe,MAAM,kBAAkB,IAAI,OAAO,WAAW,EAAG,CAAA,CAAC,GACnG+W,EAAQ,QAAQ,8CAA8C;AAAA,IAAA,QACxD;AACN,MAAAA,EAAQ,MAAM,gCAAgC;AAAA,IAAA;AAAA,EAElD,GAEM4lB,IAAc,MAAM;AACxB,IAAA3N,GAAW,SAAS,QAAQ;AAAA,EAC9B,GAEM4N,IAAgB,OAAO7uB,MAAe;AAC1C,UAAM2hB,IAAO3hB,GAAO,QAAQ,MAAM,CAAC,GAC7BuhB,IAAS,IAAI,WAAW;AAE1B,QAAA;AACF,MAAAA,EAAO,kBAAkBI,CAAI,GAC7BJ,EAAO,SAAS,YAAY;AAC1B,cAAM1B,IAAS0B,EAAO;AAEtB,YAAI,CAAC1B,EAAQ;AAGP,cAAAiP,KADwB,MAAMxO,GAAcT,CAAM,GACjC,CAAC,EAAE;AAE1B,QAAAyO,EAAa,iBAAiBQ,CAAQ,GACxB57B,EAAA,SAAA,EAAW,WAAW47B,CAAQ;AAAA,MAC9C,GACA9lB,EAAQ,QAAQ,4CAA4C;AAAA,IAAA,QACtD;AACN,MAAAA,EAAQ,MAAM,yBAAyB;AAAA,IAAA;AAAA,EAE3C;AAEA,SAEI,gBAAA9P,EAAAE,IAAA,EAAA,UAAA;AAAA,IAAC,gBAAAF,EAAA2C,IAAA,EAAM,YAAU,IAAC,iBAAiB,iBAAiB,eAAe,UAAU,WAAW,uBACtF,UAAA;AAAA,MAAA,gBAAA3C,EAAC2C,MAAM,KAAK,GAAG,YAAU,IAAC,WAAU,cAClC,UAAA;AAAA,QAAA,gBAAAvK;AAAA,UAACqN;AAAA,UAAA;AAAA,YACC,MAAK;AAAA,YACL,MAAM;AAAA,YACN,OAAM;AAAA,YACN,wBAAOowB,IAAe,EAAA;AAAA,YACtB,SAAS,MAAMJ,EAAY,EAAE,MAAM,SAAS;AAAA,YAC7C,UAAA;AAAA,UAAA;AAAA,QAED;AAAA,QACA,gBAAAr9B;AAAA,UAACqN;AAAA,UAAA;AAAA,YACC,MAAK;AAAA,YACL,MAAM;AAAA,YACN,OAAM;AAAA,YACN,UAAA/G;AAAA,YACA,wBAAO4S,IAAe,EAAA;AAAA,YACtB,SAAS,MAAMokB,EAAY;AAAA,YAC5B,UAAA;AAAA,UAAA;AAAA,QAED;AAAA,QACCx7B,KAAU,CAACwE,KAER,gBAAAsB,EAAAE,IAAA,EAAA,UAAA;AAAA,UAAA,gBAAA9H;AAAA,YAAC09B;AAAA,YAAA;AAAA,cACC,MAAM;AAAA,cACN,OAAO;AAAA,gBACL,QAAQ;AAAA,cAAA;AAAA,YACV;AAAA,UACF;AAAA,UACA,gBAAA19B,EAACwW,GAAQ,EAAA,OAAO,iBACd,UAAA,gBAAAxW;AAAA,YAACqN;AAAA,YAAA;AAAA,cACC,MAAK;AAAA,cACL,MAAM;AAAA,cACN,OAAM;AAAA,cACN,wBAAO7F,IAAkB,EAAA;AAAA,cACzB,SAAS,MAAMw1B,EAAa,YAAYl7B,GAAQ,CAAC;AAAA,YAAA;AAAA,UAAA,GAErD;AAAA,UACA,gBAAA9B,EAACwW,GAAQ,EAAA,OAAO,iBACd,UAAA,gBAAAxW;AAAA,YAACqN;AAAA,YAAA;AAAA,cACC,MAAK;AAAA,cACL,MAAM;AAAA,cACN,OAAM;AAAA,cACN,wBAAOswB,IAAgB,EAAA;AAAA,cACvB,SAAS,MAAMX,EAAa,YAAYl7B,GAAQ,CAAC;AAAA,YAAA;AAAA,UAAA,GAErD;AAAA,UACA,gBAAA9B,EAACwW,GACC,EAAA,UAAA,gBAAAxW,EAAC+S,IAAW,EAAA,OAAM,eAAc,QAAO,UAAS,WAAW,MAAMiqB,EAAa,UAAUl7B,GAAQ,CAAC,GAC/F,UAAA,gBAAA9B,EAACqN,GAAO,EAAA,MAAK,QAAO,MAAM,SAAS,MAAO,gBAAArN,EAAAgT,IAAA,CAAA,CAAe,EAAI,CAAA,EAAA,CAC/D,EACF,CAAA;AAAA,UACA,gBAAAhT;AAAA,YAACqN;AAAA,YAAA;AAAA,cACC,MAAK;AAAA,cACL,MAAM;AAAA,cACN,OAAM;AAAA,cACN,wBAAOF,IAAc,EAAA;AAAA,cACrB,SAAS,MAAM6vB,EAAa,UAAU,IAAI;AAAA,cAC3C,UAAA;AAAA,YAAA;AAAA,UAAA;AAAA,QAED,EACF,CAAA;AAAA,MAAA,GAEJ;AAAA,MACA,gBAAAh9B;AAAA,QAACkI;AAAA,QAAA;AAAA,UACC,aAAak1B,GAAe,WAAW;AAAA,UACvC,OAAO,EAAE,OAAO,IAAI;AAAA,UACpB,eAAeA,GAAe;AAAA,UAC9B,MAAM;AAAA,UACN,UAAU92B,KAAY,CAACwC,KAAgBq0B;AAAA,UACvC,OAAOr6B;AAAA,UACP,UAAU,CAACH,MAASq6B,EAAa,gBAAgBr6B,CAAiB;AAAA,UAClE,SAAS;AAAA,YACP;AAAA,cACE,KAAK;AAAA,cACL,OAAO;AAAA,cACP,OAAO;AAAA,YACT;AAAA,YACA;AAAA,cACE,KAAK;AAAA,cACL,OAAO;AAAA,cACP,OAAO;AAAA,YAAA;AAAA,UACT;AAAA,QACF;AAAA,MAAA;AAAA,IACF,GACF;AAAA,IACA,gBAAA3C;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,UAAQ;AAAA,QACR,QAAM;AAAA,QACN,QAAO;AAAA,QACP,MAAK;AAAA,QACL,KAAK2vB;AAAA,QACL,UAAU4N;AAAA,QACV,SAAS,CAAC7uB,MAAU;AACjB,UAAAA,EAAM,OAAe,QAAQ;AAAA,QAAA;AAAA,MAChC;AAAA,IAAA;AAAA,EACF,GACF;AAEJ,GClJakvB,KAAuD,CAAC;AAAA,EACnE,IAAAl7B;AAAA,EACA,cAAA2H;AAAA,EACA,OAAAtI;AAAA,EACA,UAAAuE,IAAW;AAAA,EACX,cAAAwC,IAAe;AAAA,EACf,kBAAAq0B,IAAmB;AAAA,EACnB,aAAA5zB;AAAA,EACA,cAAAP;AAAA,EACA,eAAAC;AAAA,EACA,WAAA0K;AAAA,EACA,UAAAkqB;AAAA,EACA,aAAAC;AAAA,EACA,cAAAC;AAAA,EACA,UAAAvsB;AACF,MAAM;AACE,QAAA8Q,IAAa/c,EAAO,EAAK,GACzB,EAAE,YAAA9D,GAAY,eAAAG,EAAc,IAAIwB,GAAoB,GACpD45B,IAAe75B,GAAwB,GACvC,EAAE,eAAAxC,MAAkBoC,GAAsB,CAAC,EAAE,eAAApC,SAAqB;AAAA,IACtE,eAAAA;AAAAA,EAAA,EACA,GAEI4hB,IAAcC,GAAqB,CAACwb,MAA6B;AACrE,IAAAxsB,IAAWwsB,CAAK;AAAA,KACf,GAAG;AAEN,SAAAx4B,EAAU,MAAM;AACd,IAAA/D,EAAW,SAAS;AAAA,MAClB,IAAAiB;AAAA,MACA,UAAA4D;AAAA,MACA,cAAAwC;AAAA,MACA,kBAAAq0B;AAAA,MACA,aAAA5zB;AAAA,MACA,cAAAP;AAAA,MACA,eAAAC;AAAA,MACA,UAAU40B,KAAY;AAAA,MACtB,aAAaC,KAAe;AAAA,IAAA,CAC7B;AAAA,EACH,GAAG,CAACp7B,GAAI4D,GAAUwC,GAAcq0B,GAAkB5zB,GAAaP,GAAc80B,GAAaD,GAAU50B,CAAa,CAAC,GAElHzD,EAAU,MAAM;AACd,IAAA5D,EAAc,SAAS;AAAA,MACrB,cAAAm8B;AAAA,MACA,UAAUxb;AAAA,IAAA,CACX;AAAA,EAAA,GACA,CAACwb,GAAcxb,CAAW,CAAC,GAE9B/c,EAAU,MAAM;AACV,IAAA8c,EAAW,WAAWvgB,MAAU,UAAa,CAAC5B,EAAM4B,GAAOpB,CAAa,KAC7Dq8B,EAAA,iBAAiB77B,GAAmBY,CAAK,CAAC;AAAA,EACzD,GACC,CAACA,CAAK,CAAC,GAEVyD,EAAU,OACRw3B,EAAa,iBAAiB77B,GAAmBY,MAAU,SAAYsI,IAAetI,CAAK,CAAC,GAC5FugB,EAAW,UAAU,IAEd,MAAM;AACX,UAAM,EAAE,sBAAA2b,EAAA,IAAyBx8B,EAAW,SAAS;AAErD,WAAO,OAAOw8B,CAAoB,EAAE,QAAQ,CAACtc,MAAO;AAClD,MAAAA,EAAG,KAAK;AAAA,IAAA,CACT;AAAA,EACH,IACC,EAAE,GAELnc,EAAU,MAAM;AACV,IAACM,QAILrE,EAAW,SAAS,EAAE,mBAAmB2S,GAAmBT,CAAS,GAAG;AAAA,EAAA,GACvE,CAACA,CAAS,CAAC,GAEP;AACT,GCvGMuqB,KAAiD,CAAC18B,MAAU;AAC1D,QAAA,EAAE,UAAA/B,MAAa+B,GAEfw7B,IAAe75B,GAAwB,GACvC,EAAE,QAAArB,GAAQ,UAAAwE,EAAA,IAAavD,GAAsB,CAAC,EAAE,QAAAjB,GAAQ,UAAAwE,SAAgB;AAAA,IAC5E,QAAAxE;AAAAA,IACA,UAAAwE;AAAAA,EAAA,EACA;AAGA,SAAA,gBAAAtG;AAAA,IAACoN;AAAA,IAAA;AAAA,MACC,oBAAkB;AAAA,MAClB,gBAAe;AAAA,MACf,UAAA9G;AAAA,MACA,cAAc;AAAA,QACZ,UAAU;AAAA,MACZ;AAAA,MACA,MAAM;AAAA,QACJ,OAAO;AAAA,UACL;AAAA,YACE,KAAK;AAAA,YACL,OAAO,gBAAAtG,EAACkL,IAAW,EAAA,MAAK,gBAAgB,CAAA;AAAA,YACxC,SAAS,MAAM;AACb,cAAIpJ,KAAQk7B,EAAa,YAAYl7B,GAAQ,CAAC;AAAA,YAAA;AAAA,UAElD;AAAA,UACA;AAAA,YACE,KAAK;AAAA,YACL,OAAO,gBAAA9B,EAACkL,IAAW,EAAA,MAAK,gBAAgB,CAAA;AAAA,YACxC,SAAS,MAAM;AACb,cAAIpJ,KAAQk7B,EAAa,YAAYl7B,GAAQ,CAAC;AAAA,YAAA;AAAA,UAElD;AAAA,UACA;AAAA,YACE,MAAM;AAAA,UACR;AAAA,UACA;AAAA,YACE,KAAK;AAAA,YACL,OAAO,gBAAA9B,EAACkL,IAAW,EAAA,MAAK,aAAa,CAAA;AAAA,YACrC,SAAS,MAAM;AACb,cAAIpJ,KAAQk7B,EAAa,UAAUl7B,GAAQ,CAAC;AAAA,YAAA;AAAA,UAC9C;AAAA,QACF;AAAA,MAEJ;AAAA,MACA,SAAS,CAAC,aAAa;AAAA,MAEtB,UAAArC;AAAA,IAAA;AAAA,EACH;AAEJ,GAEa0+B,KAAmB5+B,EAAM,KAAK2+B,EAAW,GCvCzCE,KAAmBC,GAA4B,CAAC,EAAE,SAAAzG,GAAS,GAAGp2B,QAAY;AAC/E,QAAA;AAAA,IACJ,KAAK,EAAE,OAAA2O,EAAM;AAAA,IACb,QAAQ,EAAE,IAAAzN,EAAG;AAAA,IACb,OAAAs7B;AAAA,EAAA,IACEpG,GAEEoF,IAAe75B,GAAwB,GACvC,EAAE,UAAAmD,GAAU,OAAAvE,GAAO,MAAAsM,EAAK,IAAItL,GAAsB,CAAC,EAAE,eAAApC,GAAe,UAAA2F,SAAgB;AAAA,IACxF,OAAO3F,GAAe,QAAQwP,CAAK,IAAIzN,CAAE;AAAA,IACzC,MAAO/B,GAAe,QAAQwP,CAAK,GAAW,OAAO,SAASzN,CAAE;AAAA,IAChE,UAAA4D;AAAAA,EAAA,EACA,GAEI7D,IAASM;AAAA,IACbY,GAAiBjB,CAAE;AAAA,IACnB,CAACtC,GAAGC,MAAMD,GAAG,OAAO,UAAaC,GAAG,OAAO,UAAaD,GAAG,OAAOC,GAAG;AAAA,EACvE,GAEM,CAACya,GAAOC,CAAQ,IAAIlb,EAASkC,CAAK;AACxC,EAAAiZ,GAAgB,MAAM;AACpB,IAAIF,MAAU/Y,KACZgZ,EAAShZ,CAAK;AAAA,EAChB,GACC,CAACA,CAAK,CAAC;AAEV,QAAMu8B,IAASrW;AAAA,IACb,CAACpe,MAAgB;AACf,MAAAkR,EAASlR,CAAG,GACZmzB,EAAa,WAAWnzB,GAAK,EAAE,GAAGnH,GAAI,GAAGyN,GAAO;AAAA,IAClD;AAAA,IACA,CAAC6sB,GAAcjiB,CAAQ;AAAA,EACzB;AAGE,SAAA,gBAAA/a;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,WAAU;AAAA,MACV,SAAS,MAAMg9B,EAAa,UAAU,EAAE,GAAGt6B,GAAI,GAAGyN,GAAO;AAAA,MACzD,eAAe,MAAM6sB,EAAa,UAAU,EAAE,GAAGt6B,GAAI,GAAGyN,GAAO;AAAA,MAC9D,GAAG3O;AAAA,MAEF,UAAAw8B,EAAM,QAAQ,MAAc,UAAU;AAAA,QACtC,UAAA13B;AAAA,QACA,QAAA7D;AAAA,QACA,OAAOqY;AAAA,QACP,MAAAzM;AAAA,QACA,UAAUiwB;AAAA,MACX,CAAA,KAAK,gBAAAt+B,EAACu+B,IAAe,EAAA,UAAAj4B,GAAoB,QAAA7D,GAAgB,OAAOqY,GAAO,UAAUwjB,GAAQ,MAAAjwB,EAAY,CAAA;AAAA,IAAA;AAAA,EACxG;AAEJ,CAAC,GAeKkwB,KAA2C,CAAC,EAAE,QAAA97B,GAAQ,OAAAV,GAAO,UAAAyP,GAAU,UAAAlL,GAAU,MAAA+H,QAAW;AAChG,QAAM3L,IAAKhB,EAAQ,MAAM,OAAO,WAAW,GAAG,CAAA,CAAE,GAC1C4D,IAAcC,EAA6C,IAAI,GAC/DyiB,IAAM5kB,GAAoB,GAE1B,EAAE,mBAAAiQ,GAAmB,mBAAAmrB,EAAA,IAAsBz7B;AAAA,IAC/C,CAAC,EAAE,mBAAAsQ,GAAmB,sBAAA4qB,SAA4B;AAAA,MAChD,mBAAA5qB;AAAAA,MACA,mBAAmBjK,EAAM3G,CAAM,EAC5B,KAAK,EAAE,SAAS,SAAS,OAAO4G,EAAE,OAAO,GAAG,CAACxF,OAAO;AAAA,QACnD,MAAM;AAAA,QACN,OAAOo6B,EAAqBp6B,EAAE,KAAK,KAAK;AAAA,MAAA,EACxC,EACD,UAAU,OAAO,EAAE,MAAM,GAAwB,OAAOwP,IAAoB;AAAA,IACjF;AAAA,EACF;AAqDA,SAnDA7N,EAAU,MAAM;AAKd,QAJI,CAAC6N,KAID,CAAC5Q,GAAQ,SAAS+7B,EAAkB,SAAS;AAC/C;AAGI,UAAA56B,IAAQokB,EAAI,WAAW,SAAS,GAEhCyW,IAAgBprB,EAAkB,MAAM,GACxCpD,IAAiBoD,EAAkB,cAAc5Q,EAAO,KAAK;AACrD,IAAAg8B,EAAA,IAAI,KAAKxuB,CAAc,GAErC+X,EAAI,WAAW,SAAS;AAAA,MACtB,sBAAsB;AAAA,QACpB,GAAGpkB,EAAM;AAAA,QACT,CAACnB,EAAO,KAAK,GAAGg8B;AAAA,MAAA;AAAA,IAClB,CACD;AAAA,EAAA,GACA,CAACprB,GAAmB5Q,CAAM,CAAC,GAE9B+C,EAAU,MAAM;AACV,QAAA,CAACF,EAAY;AACf;AAGF,UAAMo5B,IAAkBp5B,EAAY,QAAQ,QAAQ,kBAAkB,GAChEq5B,IAAgB,CAAC1xB,MAAa;AAClC,MAAIA,EAAE,WAAW3H,EAAY,WAAW,CAACA,EAAY,YAIjD,oBAAoBA,EAAY,WAClCA,EAAY,QAAQ,MAAM,GAC1BA,EAAY,QAAQ,iBAAiBA,EAAY,QAAQ,MAAM,UAE/DA,EAAY,QAAQ,cAA8B,YAAY,EAAG,MAAM;AAAA,IAE3E;AAEA,WAAAo5B,EAAgB,MAAM,SAAS,QACfA,EAAA,iBAAiB,SAASC,CAAa,GAEhD,MAAM;AACX,MAAAD,EAAgB,MAAM,SAAS,IACfA,EAAA,oBAAoB,SAASC,CAAa;AAAA,IAC5D;AAAA,EACF,GAAG,EAAE,GAEAl8B,IAkBH,gBAAAzC;AAAA,IAACoI;AAAA,IAAA;AAAA,MACC,KAAK9C;AAAA,MACL,IAAA5C;AAAA,MACA,MAAM0G,EAAM3G,CAAM,EACf,KAAK,EAAE,SAAS,SAAS,OAAO4G,EAAE,UAAU,MAAM,OAAgB,EAClE,UAAU,MAAM,UAAmB;AAAA,MACtC,WAAU;AAAA,MACV,SAAO;AAAA,MACP,aAAagF,GAAM,WAAW;AAAA,MAC9B,eAAeA,GAAM;AAAA,MACrB,cAAcmwB,EAAkB;AAAA,MAChC,SAAS;AAAA,MACT,OAAAz8B;AAAA,MACA,UAAAuE;AAAA,MACA,UAAAkL;AAAA,IAAA;AAAA,EACF,IA/BE,gBAAAxR;AAAA,IAACuI;AAAA,IAAA;AAAA,MACC,IAAA7F;AAAA,MACA,KAAK4C;AAAA,MACL,WAAU;AAAA,MACV,SAAS;AAAA,MACT,OAAAvD;AAAA,MACA,UAAAuE;AAAA,MACA,aAAa+H,GAAM,WAAW;AAAA,MAC9B,eAAeA,GAAM;AAAA,MACrB,YAAY;AAAA,MACZ,UAAU,CAACpB,MAAMuE,EAASvE,EAAE,OAAO,KAAK;AAAA,IAAA;AAAA,EAC1C;AAsBN,GCtKa2xB,KAAmD,CAAC,EAAE,cAAA91B,GAAc,UAAAxC,QAAe;AAC9F,QAAM8I,IAASrM,GAAsB,CAACgO,MAAUA,EAAM,eAAe,MAAM,GACrE,EAAE,WAAAnR,EAAU,IAAIK,GAAuB;AAG3C,SAAA,gBAAAD,EAAC,OAAI,EAAA,WAAW,aACd,UAAA,gBAAA4H,EAAC2C,IAAM,EAAA,YAAU,IAAC,iBAAgB,iBAAgB,eAAc,UAC9D,UAAA;AAAA,IAAA,gBAAAvK,EAACuK,IAAM,EAAA,KAAK,GAAG,WAAW,gBAAgB,eAAe,UACvD,UAAC,gBAAAvK,EAAAqL,EAAW,MAAX,EAAgB,WAAW,qCAAqC,mBAAM,CAAA,GACzE;AAAA,IACCvC,KACC,gBAAAlB,EAAC,OAAI,EAAA,WAAW,eACb,UAAA;AAAA,MAAAwH,GAAQ,SAAS,KACf,gBAAApP,EAAAwW,GAAA,EAAQ,OAAM,kBACb,UAAA,gBAAAxW;AAAA,QAACqN;AAAA,QAAA;AAAA,UACC,WAAU;AAAA,UACV,wBAAOwxB,IAAa,EAAA;AAAA,UACpB,MAAM;AAAA,UACN,MAAM;AAAA,UACN,UAAAv4B;AAAA,UACA,SAAS,MAAM;AACH,YAAA1G,EAAA;AAAA,cACR,MAAM;AAAA,cACN,YAAY;AAAA,cACZ,MAAM;AAAA,YAAA,CACP;AAAA,UAAA;AAAA,QACH;AAAA,MAAA,GAEJ;AAAA,MAEF,gBAAAI,EAACwW,GAAQ,EAAA,OAAM,aACb,UAAA,gBAAAxW;AAAA,QAACqN;AAAA,QAAA;AAAA,UACC,WAAU;AAAA,UACV,MAAM;AAAA,UACN,MAAM;AAAA,UACN,wBAAOyxB,IAAa,EAAA;AAAA,UACpB,UAAAx4B;AAAA,UACA,SAAS,MAAM;AACH,YAAA1G,EAAA;AAAA,cACR,MAAM;AAAA,cACN,YAAY;AAAA,cACZ,MAAM;AAAA,YAAA,CACP;AAAA,UAAA;AAAA,QACH;AAAA,MAAA,EAEJ,CAAA;AAAA,IAAA,EACF,CAAA;AAAA,EAAA,EAAA,CAEJ,EACF,CAAA;AAEJ,GAEam/B,KAAoD,CAAC,EAAE,cAAAj2B,GAAc,UAAAxC,QAAe;AAC/F,QAAMmJ,IAAU1M,GAAsB,CAACgO,MAAUA,EAAM,eAAe,OAAO,GACvE,EAAE,WAAAnR,EAAU,IAAIK,GAAuB;AAG3C,SAAA,gBAAAD,EAAC,OAAI,EAAA,WAAW,aACd,UAAA,gBAAA4H,EAAC2C,IAAM,EAAA,YAAU,IAAC,iBAAiB,iBAAiB,eAAe,UACjE,UAAA;AAAA,IAAA,gBAAAvK,EAACuK,IAAM,EAAA,KAAK,GAAG,WAAW,gBAAgB,eAAe,UACvD,UAAC,gBAAAvK,EAAAqL,EAAW,MAAX,EAAgB,WAAW,qCAAqC,oBAAO,CAAA,GAC1E;AAAA,IACCvC,KACC,gBAAAlB,EAAC,OAAI,EAAA,WAAW,eACb,UAAA;AAAA,MAAA6H,GAAS,SAAS,KAChB,gBAAAzP,EAAAwW,GAAA,EAAQ,OAAM,kBACb,UAAA,gBAAAxW;AAAA,QAACqN;AAAA,QAAA;AAAA,UACC,WAAU;AAAA,UACV,wBAAOwxB,IAAa,EAAA;AAAA,UACpB,MAAM;AAAA,UACN,MAAM;AAAA,UACN,UAAAv4B;AAAA,UACA,SAAS,MAAM;AACH,YAAA1G,EAAA;AAAA,cACR,MAAM;AAAA,cACN,YAAY;AAAA,cACZ,MAAM;AAAA,YAAA,CACP;AAAA,UAAA;AAAA,QACH;AAAA,MAAA,GAEJ;AAAA,MAEF,gBAAAI,EAACwW,GAAQ,EAAA,OAAM,cACb,UAAA,gBAAAxW;AAAA,QAACqN;AAAA,QAAA;AAAA,UACC,WAAU;AAAA,UACV,MAAM;AAAA,UACN,MAAM;AAAA,UACN,wBAAOyxB,IAAa,EAAA;AAAA,UACpB,UAAAx4B;AAAA,UACA,SAAS,MAAM;AACH,YAAA1G,EAAA;AAAA,cACR,MAAM;AAAA,cACN,YAAY;AAAA,cACZ,MAAM;AAAA,YAAA,CACP;AAAA,UAAA;AAAA,QACH;AAAA,MAAA,EAEJ,CAAA;AAAA,IAAA,EACF,CAAA;AAAA,EAAA,EAAA,CAEJ,EACF,CAAA;AAEJ,GAEao/B,KAA6D,CAAC,EAAE,cAAAl2B,GAAc,UAAAxC,GAAU,QAAA8S,QAAa;AAChH,QAAM,EAAE,WAAAxZ,GAAW,cAAAF,EAAa,IAAIO,GAAuB,GACrD+8B,IAAe75B,GAAwB;AAE7C,SACG,gBAAAnD,EAAA,OAAA,EAAI,WAAW4F,EAAK,CAAC,WAAW,CAAC,GAChC,UAAA,gBAAAgC,EAAC2C,MAAM,YAAU,IAAC,iBAAiB,iBAAiB,eAAe,UACjE,UAAA;AAAA,IAAA,gBAAA3C,EAAC2C,IAAM,EAAA,KAAK,GAAG,WAAW,gBACvB,UAAA;AAAA,MAAQ6O,GAAA,OAAO,QAAQ,MAAM,WAAW,cACtC,gBAAApZ,EAAAqL,EAAW,MAAX,EAAgB,WAAWzF,EAAK,CAAC,iBAAiB,uBAAuB,cAAc,CAAC,GACtF,UAAQwT,GAAA,OAAO,QAAQ,MAAM,eAChC;AAAA,MAED,gBAAApZ,EAAAqL,EAAW,MAAX,EAAgB,WAAWzF,EAAK,CAAC,iBAAiB,qBAAqB,CAAC,GAAI,UAAAwT,EAAO,KAAK,CAAA;AAAA,MACxFA,GAAQ,OAAO,QAAQ,OAAO,UAC7B,gBAAApZ;AAAA,QAACqL,EAAW;AAAA,QAAX;AAAA,UACC,WAAWzF,EAAK,CAAC,iBAAiB,yBAAyB,cAAc,CAAC;AAAA,UAC1E,MAAK;AAAA,UACL,OAAO,EAAE,UAAU,GAAG;AAAA,UAErB,UAAAwT,GAAQ,OAAO,QAAQ,OAAO;AAAA,QAAA;AAAA,MACjC;AAAA,MAEF,gBAAApZ;AAAA,QAACqL,EAAW;AAAA,QAAX;AAAA,UACC,WAAWzF,EAAK,CAAC,iBAAiB,uBAAuB,CAAC;AAAA,UAC1D,MAAK;AAAA,UACL,OAAO,EAAE,UAAU,GAAG;AAAA,UAErB,UAAOwT,EAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IACV,GACF;AAAA,IACA,gBAAAxR;AAAA,MAAC2C;AAAA,MAAA;AAAA,QACC,YAAU;AAAA,QACV,KAAK;AAAA,QACL,eAAe;AAAA,QACf,OAAO;AAAA,UACL,OAAO;AAAA,QACT;AAAA,QAEA,UAAA;AAAA,UAAA,gBAAAvK;AAAA,YAACsL;AAAA,YAAA;AAAA,cACC,QAAQ8N,GAAQ,OAAO;AAAA,cACvB,OAAO;AAAA,gBACL,UAAU;AAAA,cAAA;AAAA,YACZ;AAAA,UACF;AAAA,UACCtQ,uBACE,OACC,EAAA,UAAA,gBAAA9I;AAAA,YAACoN;AAAA,YAAA;AAAA,cACC,SAAS,CAAC,OAAO;AAAA,cACjB,cAAc,EAAE,UAAU,IAAI;AAAA,cAC9B,UAAA9G;AAAA,cACA,MAAM;AAAA,gBACJ,OAAO;AAAA,kBACL;AAAA,oBACE,KAAK;AAAA,oBACL,OAAO;AAAA,oBACP,SAAS,MAAM;AACH,sBAAA1G,EAAA;AAAA,wBACR,MAAM;AAAA,wBACN,YAAY;AAAA,wBACZ,MAAMwZ;AAAA,sBAAA,CACP;AAAA,oBAAA;AAAA,kBAEL;AAAA,kBACA;AAAA,oBACE,KAAK;AAAA,oBACL,OAAO;AAAA,oBACP,SAAS,MAAM;AACb,sBAAA3K,GAAM,QAAQ;AAAA,wBACZ,OAAO;AAAA,wBACP,MAAM;AAAA,wBACN,cAAA/O;AAAA,wBACA,SACE,gBAAAkI,EAACyD,EAAW,WAAX,EAAqB,UAAA;AAAA,0BAAA;AAAA,0BACI,gBAAArL,EAAC,UAAQ,EAAA,UAAAoZ,EAAO,KAAK,CAAA;AAAA,0BAAS;AAAA,wBAAA,GACxD;AAAA,wBAEF,QAAQ;AAAA,wBACR,eAAe,EAAE,QAAQ,GAAK;AAAA,wBAC9B,MAAM,MAAM4jB,EAAa,aAAa,UAAU5jB,EAAO,EAAE;AAAA,sBAAA,CAC1D;AAAA,oBAAA;AAAA,kBACH;AAAA,gBACF;AAAA,cAEJ;AAAA,cAEA,4BAAC5C,GAAQ,EAAA,OAAM,YACb,UAAA,gBAAAxW,EAACqN,KAAO,WAAU,yBAAwB,MAAK,QAAO,MAAM,SAAS,MAAO,gBAAArN,EAAAsN,IAAA,EAAa,GAAI,EAC/F,CAAA;AAAA,YAAA;AAAA,UAAA,EAEJ,CAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IAAA;AAAA,EAEJ,EAAA,CACF,EACF,CAAA;AAEJ,GAEa2xB,KAA8D,CAAC,EAAE,cAAAn2B,GAAc,UAAAxC,GAAU,QAAA8S,QAAa;AACjH,QAAM,EAAE,WAAAxZ,GAAW,cAAAF,EAAa,IAAIO,GAAuB,GACrD+8B,IAAe75B,GAAwB;AAE7C,SACG,gBAAAnD,EAAA,OAAA,EAAI,WAAW4F,EAAK,CAAC,WAAW,CAAC,GAChC,UAAA,gBAAAgC,EAAC2C,MAAM,YAAU,IAAC,iBAAgB,iBAAgB,eAAe,UAC/D,UAAA;AAAA,IAAA,gBAAA3C,EAAC2C,MAAM,KAAK,GAAG,WAAW,gBAAgB,eAAe,UACtD,UAAA;AAAA,MAAQ6O,GAAA,OAAO,QAAQ,MAAM,WAAW,cACtC,gBAAApZ,EAAAqL,EAAW,MAAX,EAAgB,WAAWzF,EAAK,CAAC,iBAAiB,uBAAuB,cAAc,CAAC,GACtF,UAAQwT,GAAA,OAAO,QAAQ,MAAM,eAChC;AAAA,wBAED/N,EAAW,MAAX,EAAgB,WAAW,qCAAsC,YAAO,MAAK;AAAA,MAC7E+N,GAAQ,OAAO,QAAQ,OAAO,WAAW,cACxC,gBAAApZ;AAAA,QAACqL,EAAW;AAAA,QAAX;AAAA,UACC,WAAWzF,EAAK,CAAC,iBAAiB,yBAAyB,cAAc,CAAC;AAAA,UAC1E,MAAK;AAAA,UACL,OAAO,EAAE,UAAU,GAAG;AAAA,UAErB,UAAAwT,GAAQ,OAAO,QAAQ,OAAO;AAAA,QAAA;AAAA,MACjC;AAAA,MAED,gBAAApZ,EAAAqL,EAAW,MAAX,EAAgB,WAAW,uCAAuC,MAAK,aAAY,OAAO,EAAE,UAAU,GAAG,GACvG,YAAO,MACV,CAAA;AAAA,IAAA,GACF;AAAA,IACA,gBAAAzD;AAAA,MAAC2C;AAAA,MAAA;AAAA,QACC,YAAU;AAAA,QACV,KAAK;AAAA,QACL,eAAe;AAAA,QACf,OAAO;AAAA,UACL,OAAO;AAAA,QACT;AAAA,QAEA,UAAA;AAAA,UAAA,gBAAAvK;AAAA,YAACsL;AAAA,YAAA;AAAA,cACC,QAAQ8N,GAAQ,OAAO;AAAA,cACvB,OAAO;AAAA,gBACL,UAAU;AAAA,cAAA;AAAA,YACZ;AAAA,UACF;AAAA,UACCtQ,uBACE,OACC,EAAA,UAAA,gBAAA9I;AAAA,YAACoN;AAAA,YAAA;AAAA,cACC,SAAS,CAAC,OAAO;AAAA,cACjB,cAAc,EAAE,UAAU,IAAI;AAAA,cAC9B,UAAA9G;AAAA,cACA,MAAM;AAAA,gBACJ,OAAO;AAAA,kBACL;AAAA,oBACE,KAAK;AAAA,oBACL,OAAO;AAAA,oBACP,SAAS,MAAM;AACH,sBAAA1G,EAAA;AAAA,wBACR,MAAM;AAAA,wBACN,YAAY;AAAA,wBACZ,MAAMwZ;AAAA,sBAAA,CACP;AAAA,oBAAA;AAAA,kBAEL;AAAA,kBACA;AAAA,oBACE,KAAK;AAAA,oBACL,OAAO;AAAA,oBACP,SAAS,MAAM;AACb,sBAAA3K,GAAM,QAAQ;AAAA,wBACZ,OAAO;AAAA,wBACP,SACE,gBAAA7G,EAACyD,EAAW,WAAX,EAAqB,UAAA;AAAA,0BAAA;AAAA,0BACI,gBAAArL,EAAC,UAAQ,EAAA,UAAAoZ,EAAO,KAAK,CAAA;AAAA,0BAAS;AAAA,wBAAA,GACxD;AAAA,wBAEF,cAAA1Z;AAAA,wBACA,MAAM;AAAA,wBACN,QAAQ;AAAA,wBACR,eAAe;AAAA,0BACb,QAAQ;AAAA,wBACV;AAAA,wBACA,MAAM,MAAMs9B,EAAa,aAAa,WAAW5jB,EAAO,EAAE;AAAA,sBAAA,CAC3D;AAAA,oBAAA;AAAA,kBACH;AAAA,gBACF;AAAA,cAEJ;AAAA,cAEA,4BAAC5C,GAAQ,EAAA,OAAM,YACb,UAAA,gBAAAxW,EAACqN,KAAO,WAAU,yBAAwB,MAAK,QAAO,MAAM,SAAS,MAAO,gBAAArN,EAAAsN,IAAA,EAAa,GAAI,EAC/F,CAAA;AAAA,YAAA;AAAA,UAAA,EAEJ,CAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IAAA;AAAA,EAEJ,EAAA,CACF,EACF,CAAA;AAEJ,GCzTa4xB,KAA4D,CAAC,EAAE,aAAAC,EAAY,wBACrF,MACC,EAAA,UAAA;AAAA,EAAA,gBAAAn/B,EAAC,QAAG,SAAS,GAAG,OAAO,EAAE,OAAO,MAAM;AAAA,EACrCm/B,EAAY,QAAQ,IAAI,CAACvQ,MAAW;AAC7B,UAAAgJ,IAAUhJ,EAAO,WAAW,GAC5BwQ,IAASxH,EAAQ,OAAO,OAAO,QAAQ,IAEvCyH,IAAaj2B,EAAMg2B,CAAM,EAC5B,KAAK,UAAU,MAAM,OAAO,EAC5B,KAAK,WAAW,MAAM,QAAQ,EAC9B,UAAU,MAAM;AAAA,KAAS,GAEtBE,IAAWl2B,EAAMwuB,EAAQ,OAAO,EAAE,EACrC,KAAK,UAAU,MAAM,OAAO,EAC5B,KAAK,WAAW,MAAM,QAAQ,EAC9B,KAAK,gBAAgB,MAAM,aAAa,EACxC,UAAU,MAAA;AAAA,KAAe;AAG1B,WAAA,gBAAAhwB;AAAA,MAAC;AAAA,MAAA;AAAA,QAEC,SAASgnB,EAAO;AAAA,QAChB,aAAW0Q;AAAA,QACX,eAAaD;AAAA,QACb,OAAO;AAAA,UACL,OAAOzQ,EAAO,QAAQ;AAAA,QACxB;AAAA,QAEC,UAAA;AAAA,UAAA,CAACA,EAAO,iBAAiB2Q,GAAW3Q,EAAO,OAAO,UAAU,QAAQgJ,CAAO;AAAA,UAC3EhJ,EAAO,OAAO,aAAA,KACb,gBAAA5uB;AAAA,YAAC;AAAA,YAAA;AAAA,cACC,WAAW4F,EAAK,WAAWgpB,EAAO,OAAO,mBAAmB,YAAY;AAAA,cACxE,aAAaA,EAAO,iBAAiB;AAAA,cACrC,cAAcA,EAAO,iBAAiB;AAAA,YAAA;AAAA,UAAA;AAAA,QACxC;AAAA,MAAA;AAAA,MAdGA,EAAO;AAAA,IAgBd;AAAA,EAEH,CAAA;AAAA,EAAA,GArCMuQ,EAAY,EAsCrB,GClCWK,KAKR,CAAC,EAAE,KAAApQ,GAAK,UAAA9oB,GAAU,aAAAm5B,GAAa,UAAAC,QAAe;AAC3C,QAAAC,IAAQp6B,EAA4B,IAAI,GACxCy3B,IAAe75B,GAAwB,GACvC,EAAE,QAAArB,GAAQ,UAAA4Y,MAAa3X,GAAsB,CAAC,EAAE,QAAAjB,GAAQ,aAAAyH,SAAmB;AAAA,IAC/E,QAAAzH;AAAAA,IACA,UAAU,MAAM,QAAQyH,CAAW,KAAKA,EAAY,SAAS6lB,EAAI,EAAE;AAAA,EAAA,EACnE,GAEI,CAAC,EAAE,YAAAhd,GAAY,WAAA/K,EAAa,GAAAgL,CAAO,IAAIC,GAAQ;AAAA,IACnD,QAAQ;AAAA,IACR,SAAS,CAACC,OAAa;AAAA,MACrB,YAAYA,EAAQ,OAAO,EAAE,SAAS,IAAM;AAAA,MAC5C,YAAYA,EAAQ,+BAAA,GAAkC,KAAK,KAAK,IAAI,SAAS;AAAA,IAAA;AAAA,IAE/E,MAAM,CAACC,MAA4CwqB,EAAa,SAASxqB,EAAW,OAAO4c,EAAI,KAAK;AAAA,EAAA,CACrG,GAEK,CAAC,EAAE,YAAA3c,KAAcC,GAASC,CAAU,IAAIC,GAAQ;AAAA,IACpD,SAAS,CAACL,OAAa;AAAA,MACrB,YAAYA,EAAQ,WAAW;AAAA,IAAA;AAAA,IAEjC,MAAM,MAAM6c;AAAA,IACZ,MAAM;AAAA,EAAA,CACP;AAEU,EAAAzc,EAAAN,EAAQstB,CAAK,CAAC,GAEzBn6B,EAAU,MAAM;AACV,QAAA,CAACm6B,EAAM;AACT;AAGF,IAAAD,IAAWC,EAAM,OAAO;AACxB,UAAMh6B,IAAiB,IAAI,eAAe,CAACD,MAAY;AAC7C,MAAAA,EAAA,QAAQ,CAACk6B,MAAU;AACzB,QAAKA,EAAM,OAAO,aAAa,oBAAoB,KAInDF,IAAWE,EAAM,MAAqB;AAAA,MAAA,CACvC;AAAA,IAAA,CACF;AAEc,WAAAj6B,EAAA,QAAQg6B,EAAM,OAAO,GAC7B,MAAM;AACX,MAAAh6B,EAAe,WAAW;AAAA,IAC5B;AAAA,EACF,GAAG,EAAE;AAEL,QAAM,EAAE,UAAAk6B,EAAS,IAAI98B,GAAsB,CAAC,EAAE,eAAApC,SAAqB;AAAA,IACjE,WAAWA,GAAe,SAAS,CAAK,IAAA,KAAK,CAACC,MAASA,EAAK,QAAQwuB,GAAK,UAAU,GAAG;AAAA,EAAA,EACtF,GAEI/gB,IAAO3M,EAAQ,MACZm+B,GAAU,OAChB,CAACA,CAAQ,CAAC,GACPxzB,IAAagC,GAAM;AAGvB,SAAA,gBAAAzG;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,KAAK+3B;AAAA,MACL,WAAW/5B;AAAA,QACT;AAAA,QACAwM,KAAc/K,MAAc,UAAU;AAAA,QACtC+K,KAAc/K,MAAc,QAAQ;AAAA,QACpC,CAACgF,KAAcqO,KAAY;AAAA,QAC3B,CAACrO,KAAc/F,KAAY;AAAA,QAC3B,CAAC+F,KAAcvK,GAAQ,MAAM29B,EAAY,SAAS,CAACn5B,KAAY;AAAA,QAC/D+F,KAAc,QAAQA,CAAU;AAAA,MAClC;AAAA,MACA,OAAO;AAAA,QACL,SAASoG,IAAa,MAAM;AAAA,MAC9B;AAAA,MACA,sBAAoBgtB,EAAY;AAAA,MAEhC,UAAA;AAAA,QAAA,gBAAAz/B;AAAA,UAAC;AAAA,UAAA;AAAA,YACC,WAAW4F,EAAK,gBAAgB,CAACU,KAAY,aAAa+F,KAAc,MAAM;AAAA,YAC9E,KAAK/F,IAAW,SAAYoM;AAAA,YAC5B,sBAAsB,MAAMsqB,EAAa,UAAU,EAAE,GAAG,MAAM,GAAGyC,EAAY,OAAO;AAAA,YAEpF,UAAA,gBAAAz/B,EAAC,SAAI,WAAW,QACd,4BAACqL,GAAY,EAAA,UAAAo0B,EAAY,QAAQ,EAAE,CAAA,EACrC,CAAA;AAAA,UAAA;AAAA,QACF;AAAA,QACCrQ,EAAI,gBAAkB,EAAA,IAAI,CAAClB,MAC1B,gBAAAluB;AAAA,UAAC;AAAA,UAAA;AAAA,YAEC,WAAW4F;AAAA,cACT,CAACU,KAAYxE,GAAQ,MAAMosB,EAAK,OAAO,MAAMpsB,GAAQ,MAAM29B,EAAY,SAAS;AAAA,cAChFpxB,GAAM,SAAS6f,GAAM,QAAQ,EAAE,GAAG,UAAU,QAAQ7f,GAAM,SAAS6f,GAAM,QAAQ,EAAE,GAAG,MAAM;AAAA,YAC9F;AAAA,YACA,OAAO,EAAE,OAAOA,EAAK,OAAO,UAAU;AAAA,YAErC,aAAWA,EAAK,OAAO,UAAU,MAAMA,EAAK,WAAY,CAAA;AAAA,UAAA;AAAA,UAPpDA,EAAK;AAAA,QASb,CAAA;AAAA,MAAA;AAAA,IAAA;AAAA,EACH;AAEJ,GCrFM4R,KAAgB,CAACp9B,MAAe,oCAAoCA,CAAE,IAEtEq9B,KAAmB,CAACr9B,MAAgB;AACxC,MAAI,CAACA;AACH,WAAO,CAAC;AAGN,MAAA;AACF,UAAMs9B,IAAW,aAAa,QAAQF,GAAcp9B,CAAE,CAAC,GACjDqyB,IAAW,KAAK,MAAMiL,KAAY,IAAI;AACrC,WAAAC,GAAE,OAAOA,GAAE,OAAO,GAAGA,GAAE,OAAQ,CAAA,EAAE,MAAMlL,CAAQ;AAAA,EAAA,QAChD;AACN,WAAO,CAAC;AAAA,EAAA;AAEZ,GAEamL,KAA8B,CAAC,EAAE,IAAAx9B,GAAI,WAAAy9B,QAAgB;AAChE,QAAM,EAAE,OAAA9oB,EAAA,IAAUC,GAAM,SAAS,GAE3B0lB,IAAe75B,GAAwB,GACvC,EAAE,cAAA46B,EAAA,IAAiB76B,GAA0B,CAAC,EAAE,cAAA66B,EAAAA,OAAoB,EAAE,cAAAA,EAAAA,EAAe,GACrF,CAACqC,GAAcC,CAAe,IAAIxgC,EAAuB,MAAMkgC,GAAiBr9B,CAAE,CAAC,GAEnF,EAAE,cAAAoG,GAAc,UAAAxC,GAAU,QAAA8I,GAAQ,SAAAK,GAAS,UAAAouB,GAAU,aAAAC,MAAgB/6B;AAAA,IACzE,CAAC,EAAE,cAAA+F,GAAc,UAAAxC,GAAU,aAAAw3B,GAAa,UAAAD,GAAU,eAAAl9B,SAAqB;AAAA,MACrE,cAAAmI;AAAAA,MACA,UAAAxC;AAAAA,MACA,aAAAw3B;AAAAA,MACA,UAAAD;AAAAA,MACA,QAAQl9B,EAAc;AAAA,MACtB,SAASA,EAAc;AAAA,IACzB;AAAA,EACF,GAEM,EAAE,OAAAO,MAAU6B;AAAA,IAChB,CAAC,EAAE,eAAApC,EAAA,OAAqB;AAAA,MACtB,OAAOA,EAAc;AAAA,IAAA;AAAA,IAEvB,CAAC2/B,GAAMtgB,MACL7f;AAAA,MACEmgC,EAAK,MAAM,IAAI,CAAC//B,MAAWA,GAAG,GAAG;AAAA,MACjCyf,EAAK,MAAM,IAAI,CAACzf,MAAWA,GAAG,GAAG;AAAA,IAAA;AAAA,EAEvC,GAEMsC,IAAUtD,EAAM;AAAA,IACpB,MAAM;AAAA,MACJ;AAAA,QACE,IAAI;AAAA,QACJ,SAASu+B;AAAA,QACT,MAAMD;AAAA,QACN,gBAAgB;AAAA,QAChB,QAAQ,MAAO,gBAAA79B,EAAA4+B,IAAA,EAAmB,cAAA91B,GAA4B,UAAAxC,EAAoB,CAAA;AAAA,QAClF,SAAS;AAAA,UACP,IAAI8I,KAAU,CAAA,GAAI,IAAI,CAAC7M,OACd;AAAA,YACL,aAAaA,EAAM;AAAA,YACnB,IAAIA,EAAM;AAAA,YACV,SAASu7B;AAAA,YACT,MAAMD;AAAA,YACN,QAAQ,MAAM,gBAAA79B,EAACg/B,MAAwB,QAAQz8B,GAAO,cAAAuG,GAA4B,UAAAxC,EAAoB,CAAA;AAAA,UACxG,EACD;AAAA,QAAA;AAAA,MAEL;AAAA,MACA;AAAA,QACE,IAAI;AAAA,QACJ,SAASw3B;AAAA,QACT,MAAMA;AAAA,QACN,QAAQ,MAAO,gBAAA99B,EAAA++B,IAAA,EAAoB,UAAAz4B,GAAoB,cAAAwC,EAA4B,CAAA;AAAA,QACnF,SAAS;AAAA,UACP,IAAI2G,KAAW,CAAA,GAAI,IAAI,CAACI,OACf;AAAA,YACL,aAAaA,EAAO;AAAA,YACpB,SAASiuB;AAAA,YACT,MAAMD;AAAA,YACN,QAAQ,MACN,gBAAA79B,EAACi/B,MAAyB,QAAQpvB,GAAQ,cAAA/G,GAA4B,UAAAxC,EAAoB,CAAA;AAAA,UAE9F,EACD;AAAA,QAAA;AAAA,MAEL;AAAA,MACA;AAAA,QACE,IAAI;AAAA,QACJ,aAAa;AAAA,QACb,QAAQ,MACL,gBAAAtG,EAAA,OAAA,EAAI,WAAW,aACd,UAAC,gBAAAA,EAAAqL,EAAW,MAAX,EAAgB,WAAU,uBAAsB,wBAAW,CAAA,GAC9D;AAAA,QAEF,SAASyyB;AAAA,QACT,MAAMD;AAAA,MAAA;AAAA,IAEV;AAAA,IACA,CAAC/0B,GAAcxC,GAAU8I,GAAQK,CAAO;AAAA,EAC1C,GAEMuuB,IAAQuC,GAAc;AAAA,IAC1B,MAAMr/B;AAAA,IACN,kBAAkB;AAAA,IAClB,UAAU,CAACkuB,MAAQA,EAAI;AAAA,IACvB,SAAAvsB;AAAA,IACA,iBAAiB29B,GAAgB;AAAA,IACjC,eAAe;AAAA,MACb,MAAM,CAAC5I,MAAY,gBAAA53B,EAACo+B,MAAiB,SAAAxG,EAAkB,CAAA;AAAA,IACzD;AAAA,IACA,MAAM;AAAA,MACJ,SAASmG;AAAA,IACX;AAAA,IACA,GAAKr7B,IAED;AAAA,MACE,OAAO,EAAE,cAAA09B,EAAa;AAAA,MACtB,sBAAsBC;AAAA,IAAA,IAHxB;EAIA,CACL,GAEKI,IAAoBl7B,EAAuB,IAAI;AAErD,SAAAC,EAAU,MAAM;AACV,QAAA,CAACi7B,EAAkB;AACrB;AAGF,UAAM96B,IAAiB,IAAI,eAAe,CAACD,MAAY;AACrD,iBAAWk6B,KAASl6B;AACd,QAAAk6B,EAAM,kBAAkB,kBACpBA,EAAA,OAAO,MAAM,YAAY,wBAAwB,GAAGA,EAAM,YAAY,KAAK,IAAI;AAAA,IAEzF,CACD;AAEc,WAAAj6B,EAAA,QAAQ86B,EAAkB,OAAO,GAEzC,MAAM;AACX,MAAA96B,EAAe,WAAW;AAAA,IAC5B;AAAA,EACF,GAAG,EAAE,GAELH,EAAU,MAAM;AACd,IAAK9C,KAIW29B,EAAAN,GAAiBr9B,CAAE,CAAC;AAAA,EAAA,GACnC,CAACA,CAAE,CAAC,GAEP8C,EAAU,MAAM;AACd,IAAK9C,KAIL,aAAa,QAAQo9B,GAAcp9B,CAAE,GAAG,KAAK,UAAU09B,CAAY,CAAC;AAAA,EAAA,GACnE,CAACA,CAAY,CAAC,GAGf,gBAAAx4B;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,KAAK64B;AAAA,MACL,WAAU;AAAA,MACV,OAAO,EAAE,WAAAN,GAAW,WAAW,OAAO;AAAA,MACtC,cAAY9oB,EAAM;AAAA,MAElB,UAAA;AAAA,QAAC,gBAAArX,EAAA0gC,IAAA,EAAY,OAAO1C,EAAM,mBAAmB,GAC3C,UAAC,gBAAAh+B,EAAA,SAAA,EACE,UACEg+B,EAAA,gBAAA,EACA,OAAO,CAAC7uB,GAAG5O,MAAMA,MAAM,CAAC,EACxB,IAAI,CAAC4+B,MACJ,gBAAAn/B,EAACk/B,IAAkC,EAAA,aAAAC,EAAA,GAAhBA,EAAY,EAA8B,CAC9D,EAAA,CACL,EACF,CAAA;AAAA,QACC,gBAAAv3B,EAAA84B,IAAA,EAAY,OAAO1C,EAAM,mBACxB,GAAA,UAAA;AAAA,UAAC,gBAAAh+B,EAAA,SAAA,EACE,YACE,gBAAgB,EAChB,OAAO,CAACmP,GAAG5O,MAAMA,MAAM,CAAC,EACxB,IAAI,CAAC4+B,MACH,gBAAAn/B,EAAAk/B,IAAA,EAAkC,aAAAC,KAAhBA,EAAY,EAA8B,CAC9D,GACL;AAAA,4BACChB,IACC,EAAA,UAAA,gBAAAn+B,EAAC2gC,IAAU,EAAA,mBAAAF,GAAsC,OAAAzC,EAAc,CAAA,GACjE;AAAA,UACC,gBAAAh+B,EAAA,SAAA,EACC,UAAC,gBAAAA,EAAA,MAAA,EACC,4BAAC,MAAG,EAAA,SAASoP,EAAO,SAASK,EAAQ,SAAS,GAC5C,UAAC,gBAAAzP,EAAA,OAAA,EAAI,WAAU,2BACb,UAAA,gBAAAA;AAAA,YAACqN;AAAA,YAAA;AAAA,cACC,WAAU;AAAA,cACV,MAAK;AAAA,cACL,UAAA/G;AAAA,cACA,wBAAOmN,IAAmB,EAAA;AAAA,cAC1B,SAAS,MAAMupB,EAAa,YAAY;AAAA,cACzC,UAAA;AAAA,YAAA;AAAA,UAAA,GAGH,EACF,CAAA,EAAA,CACF,EACF,CAAA;AAAA,QAAA,EACF,CAAA;AAAA,MAAA;AAAA,IAAA;AAAA,EACF;AAEJ,GAOM2D,KAAYphC,EAAM;AAAA,EACtB,CAAC,EAAE,OAAAy+B,GAAO,mBAAAyC,GAAmB,GAAGj/B,EAAA,GAASkD,MAAQ;AAC/C,UAAMs4B,IAAe75B,GAAwB,GACvC,EAAE,UAAAmD,GAAU,QAAAxE,EAAA,IAAWiB,GAAsB,CAAC,EAAE,UAAAuD,GAAU,QAAAxE,SAAc;AAAA,MAC5E,UAAAwE;AAAAA,MACA,QAAAxE;AAAAA,IAAA,EACA,GAEI,EAAE,MAAA8+B,EAAA,IAAS5C,EAAM,YAAY,GAC7B6C,IAAcC,GAAe;AAAA,MACjC,kBAAkB,MAAML,EAAkB;AAAA,MAC1C,cAAc,MAAM;AAAA,MACpB,gBAAgB;AAAA,MAChB,OAAOG,EAAK;AAAA,MACZ,UAAU;AAAA,IAAA,CACX,GAEKG,IAAeF,EAAY,gBAAgB,GAC3CG,IAAYH,EAAY,aAAa,GAErC77B,IAAa+7B,EAAa,SAAS,KAAIA,IAAe,CAAC,GAAG,SAAS,GACnE97B,IAAgB87B,EAAa,SAAS,IAAIC,KAAaD,IAAeA,EAAa,SAAS,CAAC,GAAG,OAAO,KAAK,GAE5GE,IAAYhZ,GAAY,CAAChb,MAA2B;AACxD,MAAI3G,MAIA2G,EAAE,SAAS,cAAcA,EAAE,WAAWA,EAAE,WACtCnL,KAAQk7B,EAAa,YAAYl7B,EAAO,CAAC,GAE3CmL,EAAE,SAAS,gBAAgBA,EAAE,WAAWA,EAAE,WACxCnL,KAAQk7B,EAAa,YAAYl7B,EAAO,CAAC,GAE3CmL,EAAE,SAAS,gBAAgBA,EAAE,WAAWA,EAAE,WACxCnL,KAAQk7B,EAAa,UAAUl7B,EAAO,CAAC;AAAA,IAE/C,GAAG,EAAE;AAEL,WACG,gBAAA8F,EAAA,SAAA,EAAM,KAAAlD,GAAW,GAAGlD,GAAO,WAAAy/B,GACzB,UAAA;AAAA,MAAAj8B,IAAa,KACZ,gBAAAhF,EAAC,MACC,EAAA,UAAA,gBAAAA,EAAC,MAAG,EAAA,OAAO,EAAE,QAAQ,GAAGgF,CAAU,KAAK,EAAG,CAAA,GAC5C;AAAA,MAED+7B,EAAa,IAAI,CAACn+B,MAAS;AACpB,cAAAwsB,IAAMwR,EAAKh+B,EAAK,KAAK;AAGzB,eAAA,gBAAA5C;AAAA,UAACw/B;AAAA,UAAA;AAAA,YAEC,aAAa58B;AAAA,YACb,KAAAwsB;AAAA,YACA,UAAA9oB;AAAA,YACA,UAAU,CAAC1B,MAASi8B,EAAY,eAAej8B,CAAI;AAAA,UAAA;AAAA,UAJ9ChC,EAAK;AAAA,QAKZ;AAAA,MAAA,CAEH;AAAA,MACAqC,IAAgB,KACd,gBAAAjF,EAAA,MAAA,EACC,UAAC,gBAAAA,EAAA,MAAA,EAAG,OAAO,EAAE,QAAQ,GAAGiF,CAAa,QAAQ,EAC/C,CAAA;AAAA,IAAA,GAEJ;AAAA,EAAA;AAGN,GAEMy7B,KAAoF,CAAC;AAAA,EACzF,OAAA11B;AAAA,EACA,WAAA3F;AAAA,EACA,OAAAyF;AAAA,EACA,GAAGtJ;AACL,MACU,gBAAAxB,EAAA,SAAA,EAAM,WAAW4F,EAAK,SAASP,CAAS,GAAG,OAAO,EAAE,OAAAyF,GAAO,GAAGE,EAAM,GAAI,GAAGxJ,EAAO,CAAA,GCnS/EoI,KAA8C,CAAC;AAAA,EAC1D,IAAAlH;AAAA,EACA,aAAAw+B;AAAA,EACA,oBAAAC,IAAqB;AAAA,EACrB,SAAAz4B;AAAA,EACA,GAAGlH;AACL,MAAM;AACJ,QAAM,EAAE,OAAA6V,EAAA,IAAUC,GAAM,SAAS,GAE3B,CAACnI,GAAGyE,CAAU,IAAI/T,EAAS,EAAK,GAChC6E,IAAMa,EAAuB,IAAI;AAEvC,EAAAC,EAAU,MAAM;AACd,IAAAoO,EAAW,EAAI;AAAA,EACjB,GAAG,EAAE;AAEC,QAAAlU,IAAe,MAAMgF,EAAI,SAEzBoP,IAAWpS,EAAQ,MACnBgH,IACK;AAAA,IACL,SAAAA;AAAA,EACF,IAGK;AAAA,IACL,SAASqL;AAAA,IACT,SAAS;AAAA,MACP,aAAarP,EAAI;AAAA,IAAA;AAAA,EAErB,GACC,CAACA,EAAI,SAASgE,CAAO,CAAC;AAGvB,SAAA,gBAAA1I,EAAC,OAAI,EAAA,KAAA0E,GAAU,WAAW,UAAU,OAAO,EAAE,YAAY2S,EAAM,gBAAA,GAC5D,UAAA3S,EAAI,WACF,gBAAA1E,EAAAgU,IAAA,EAAa,GAAGF,GACf,UAAC,gBAAA9T,EAAAuB,IAAA,EACC,4BAAC/B,IAA4B,EAAA,cAAc2hC,IAAqB,SAAYzhC,GAC1E,UAAA;AAAA,IAAA,gBAAAM,EAACk9B,IAAwB,EAAA;AAAA,IACxB,gBAAAl9B,EAAAkgC,IAAA,EAAM,IAAAx9B,GAAQ,WAAWw+B,EAAa,CAAA;AAAA,sBACtCnE,IAAqB,EAAA;AAAA,IACtB,gBAAA/8B,EAAC49B,IAAoB,EAAA,GAAGp8B,EAAO,CAAA;AAAA,EAAA,GACjC,EAAA,CACF,EACF,CAAA,GAEJ;AAEJ,GC1Ee4/B,KAAA,4zDCoBTC,KAA8C;AAAA,EAClD,MAAM;AAAA,IACJ,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,MAAM;AAAA,IACN,OAAO;AAAA,IACP,MAAM;AAAA,EACR;AAAA,EACA,OAAO;AAAA,IACL,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,MAAM;AAAA,IACN,OAAO;AAAA,IACP,MAAM;AAAA,EAAA;AAEV,GAEaC,KAA0D,CAAC,EAAE,OAAAC,GAAO,YAAAC,QAAiB;AAChG,QAAM,EAAE,OAAAnqB,EAAA,IAAUC,GAAM,SAAS,GAC3BmqB,IAAYJ,GAAOhqB,EAAM,QAAQ,OAAO;AAG5C,SAAA,gBAAAzP,EAAC,OAAI,EAAA,WAAU,+BACb,UAAA;AAAA,IAAA,gBAAA5H;AAAA,MAACoN;AAAA,MAAA;AAAA,QACC,SAAS,CAAC,aAAa;AAAA,QACvB,MAAM;AAAA,UACJ,OAAO;AAAA,YACL;AAAA,cACE,KAAK;AAAA,cACL,OAAO;AAAA,cACP,SAAS,YAAY;AACnB,sBAAM0J,GAAgByqB,EAAM,WAAW,IAAIA,EAAM,CAAC,IAAI,IAAIA,EAAM,KAAK,IAAI,CAAC,GAAG,GAC7E7pB,EAAQ,QAAQ,qBAAqB;AAAA,cAAA;AAAA,YACvC;AAAA,UACF;AAAA,QAEJ;AAAA,QAEA,UAAA,gBAAA1X,EAAC,SAAI,WAAU,uCACZ,YAAM,IAAI,CAAC0hC,GAAMnhC,MAAM;AAChB,gBAAAoC,IAAO,KAAK,MAAM++B,CAAI;AAG1B,iBAAA,gBAAA1hC;AAAA,YAAC2hC;AAAA,YAAA;AAAA,cAEC,MAAAh/B;AAAA,cACA,2BAA2B,MAAM;AAAA,cACjC,eAAe,CAACi/B,GAAuCl7B,MAAa;AAClE,sBAAMm7B,IAA2B,CAAC,GAE5BC,IAAWF,IAAU,CAAC;AAUxB,oBATAE,MAAa,UACTD,EAAA;AAAA,kBAEF,gBAAAj6B,EAAAE,IAAA,EAAA,UAAA;AAAA,oBAAA,gBAAA9H,EAAC,UAAK,OAAO,EAAE,OAAOyhC,EAAU,aAAc,UAASK,GAAA;AAAA,oBACtD;AAAA,kBAAA,EACH,CAAA;AAAA,gBACF,GAGEF,EAAQ,UAAU,GAAG;AACnB,sBAAAG,IAAQ,CAAC,GAAGH,CAAO;AACvB,kBAAAG,EAAM,IAAI,GACVA,IAAQA,EAAM,QAAQ,GAEhBF,EAAA,KAAKG,GAAeP,CAAS,EAAEQ,GAAKt/B,GAAMo/B,CAAK,GAAGr7B,CAAQ,CAAC;AAAA,gBAAA;AAGnE,+CAAU,UAAMm7B,EAAA,CAAA;AAAA,cAClB;AAAA,cACA,eAAeK,GAAcT,CAAS;AAAA,cACtC,OAAO;AAAA,gBACL,QAAQpqB,EAAM;AAAA,gBACd,QAAQA,EAAM;AAAA,gBACd,QAAQA,EAAM;AAAA,gBACd,QAAQA,EAAM;AAAA,cAAA;AAAA,YAChB;AAAA,YAhCK9W;AAAA,UAiCP;AAAA,QAAA,CAEH,EACH,CAAA;AAAA,MAAA;AAAA,IACF;AAAA,IACA,gBAAAP,EAAC,SAAI,WAAU,qCACZ,gBAAe,QAAQ,gBAAA4H,EAAC4O,GAAQ,EAAA,OAAM,4CAA4C,UAAA;AAAA,MAAAgrB;AAAA,MAAW;AAAA,IAAA,EAAA,CAAE,EAClG,CAAA;AAAA,EAAA,GACF;AAEJ,GAEMQ,KACJ,CAACP,MACD,CAAC9+B,GAAW+D,MAAsC;AAChD,MAAIA,MAAa,UAAU;AAEnB,UAAAy7B,IAAgB,OAAO,QADVx/B,CAC4B,GACzCy/B,IAAUD,EAAc;AAAA,MAC5B,CAACj4B,GAAwB,CAACzJ,GAAKsB,CAAK,GAAGsgC,MAAiB;AAAA,QACtD,GAAGn4B;AAAA,0BACF,QACE,EAAA,UAAA;AAAA,UAAAzJ;AAAA,UAAI;AAAA,UAAGyhC,GAAcT,CAAS,EAAEa,GAAkBvgC,CAAK,GAAGA,CAAK;AAAA,UAC/DsgC,MAAiBF,EAAc,SAAS,6BAAQ,UAAK,KAAA,CAAA;AAAA,QAAA,EAAA,GAF7C1hC,CAGX;AAAA,MACF;AAAA,MACA,CAAA;AAAA,IACF;AAEA,WAEK,gBAAAmH,EAAAE,IAAA,EAAA,UAAA;AAAA,MAAA;AAAA,MACAs6B;AAAA,MACA;AAAA,IAAA,GACH;AAAA,EAAA,WAEO17B,MAAa,SAAS;AAC/B,UAAM67B,IAAY5/B,GACZy/B,IAAUG,EAAU;AAAA,MACxB,CAACr4B,GAAKnI,GAAOsgC,MAAiB;AAAA,QAC5B,GAAGn4B;AAAA,0BACF,QACE,EAAA,UAAA;AAAA,UAAAg4B,GAAcT,CAAS,EAAEa,GAAkBvgC,CAAK,GAAGA,CAAK;AAAA,UACxDsgC,MAAiBE,EAAU,SAAS,6BAAQ,UAAK,KAAA,CAAA;AAAA,QAAA,EAAA,GAFzCF,CAGX;AAAA,MACF;AAAA,MACA,CAAA;AAAA,IACF;AAEA,WAEK,gBAAAz6B,EAAAE,IAAA,EAAA,UAAA;AAAA,MAAAy6B,EAAU,SAAS,IAAI,IAAIA,EAAU,MAAM,MAAM;AAAA,MAAG;AAAA,MAAGH;AAAA,MAAQ;AAAA,IAAA,GAClE;AAAA,EAAA;AAGK,WAAA;AAEX,GAEIE,KAAoB,CAACvgC,MAA2B;AACpD,UAAQ,IAAM;AAAA,IACZ,KAAK,MAAM,QAAQA,CAAK;AACf,aAAA,SAAUA,EAAoB,MAAM;AAAA,IAC7C,KAAK,OAAOA,KAAU;AACb,aAAA;AAAA,IACT;AACS,aAAA,KAAK,UAAUA,CAAK;AAAA,EAAA;AAEjC,GAEMmgC,KACJ,CAACT,MACD,CAACe,GAAqBzgC,MAAoC;AACxD,QAAM0gC,IAAgBD;AAClB,SAAA,OAAOzgC,KAAU,WACf0gC,EAAc,WAAW,SAAS,IAC5B,gBAAAziC,EAAA,QAAA,EAAK,OAAO,EAAE,OAAOyhC,EAAU,MAAM,GAAI,UAAcgB,EAAA,MAAM,GAAG,EAAE,EAAE,CAAA,IAG1EA,EAAc,WAAW,QAAQ,IAC3B,gBAAAziC,EAAA,QAAA,EAAK,OAAO,EAAE,OAAOyhC,EAAU,KAAK,GAAI,UAAcgB,EAAA,MAAM,GAAG,EAAE,EAAE,CAAA,IAGtE,gBAAAziC,EAAC,UAAK,OAAO,EAAE,OAAOyhC,EAAU,UAAW,UAAcgB,GAAA,IACvD,OAAO1gC,KAAU,YACnB,gBAAA/B,EAAC,UAAK,OAAO,EAAE,OAAOyhC,EAAU,aAAc,UAAcgB,GAAA,IAC1D,OAAO1gC,KAAU,WACnB,gBAAA/B,EAAC,UAAK,OAAO,EAAE,OAAOyhC,EAAU,UAAW,UAAcgB,GAAA,IAG3DA;AACT,GAEIR,KAAO,CAAC1S,GAAU7rB,MAA8BA,EAAK,OAAO,CAACkvB,GAAGnyB,MAASmyB,KAAKA,EAAEnyB,CAAG,IAAImyB,EAAEnyB,CAAG,IAAI,MAAO8uB,CAAG;ACrLhH,IAAKvX,uBAAAA,OACHA,EAAA,UAAU,WACVA,EAAA,YAAY,aAFTA,IAAAA,MAAA,CAAA,CAAA;AAYQ,MAAA0qB,KAAoD,CAAC,EAAE,OAAAzvB,GAAO,QAAA2E,GAAQ,WAAA+qB,IAAY,CAAA,GAAI,aAAAC,QAAkB;AACnH,QAAMC,IAAW5vB,GAAO,WAAW,OAAO,CAAC,GACrC,CAACoF,GAAWC,CAAY,IAAIzY;AAAA,IAAiB;AAAA;AAAA,EAAc;AAEjE,2BACG,OAAI,EAAA,WAAU,0BACb,UAAC,gBAAA+H,EAAA,OAAA,EAAI,WAAU,iCACb,UAAA;AAAA,IAAC,gBAAA5H,EAAA,OAAA,EAAI,WAAU,kCACb,UAAA,gBAAAA;AAAA,MAAC8Y;AAAA,MAAA;AAAA,QACC,eAAc;AAAA,QACd,MAAK;AAAA,QACL,OAAO,EAAE,OAAO,OAAO;AAAA,QACvB,OAAO,OAAO,OAAOd,EAAM,EAAE,IAAI,CAACe,OAAO,EAAE,KAAKA,GAAG,OAAOA,EAAI,EAAA;AAAA,QAC9D,WAAWV;AAAA,QACX,UAAU,CAACU,MAAMT,EAAaS,CAAW;AAAA,QACzC,oBACE,gBAAA/Y,EAAC,OAAI,EAAA,OAAO,EAAE,aAAa,KACzB,UAAC,gBAAAA,EAAAwW,GAAA,EAAQ,OAAM,eAAc,WAAU,cACrC,UAAA,gBAAAxW;AAAA,UAACqN;AAAA,UAAA;AAAA,YACC,MAAK;AAAA,YACL,MAAK;AAAA,YACL,wBAAO4L,IAAsB,EAAA;AAAA,YAC7B,SAAS,MAAMrB,GAAQ,YAAY,8BAA8B,GAAG,MAAM;AAAA,UAAA;AAAA,WAE9E,EACF,CAAA;AAAA,MAAA;AAAA,IAAA,GAGN;AAAA,IACA,gBAAA5X,EAAC,OAAI,EAAA,WAAU,gCACZ,UAAAoJ,EAAMiP,CAAS,EACb,KAAK,WAAgB,MAEjB,gBAAAzQ,EAAAE,IAAA,EAAA,UAAA;AAAA,MAAA+6B,EAAS,WAAW,KACnB,gBAAA7iC;AAAA,QAACshC;AAAA,QAAA;AAAA,UACC,OAAO,CAAC,gEAAgE;AAAA,UACxE,YAAY;AAAA,QAAA;AAAA,MACd;AAAA,MAGDuB,EAAS,IAAI,CAACC,GAAKviC,MACjB,gBAAAP,EAAAshC,IAAA,EAA4B,OAAOwB,EAAI,OAAO,YAAYA,EAAI,WAAA,GAArCviC,CAAiD,CAC5E;AAAA,IAAA,EAAA,CACH,CACD,EACA,KAAK,aAAkB,MACtB,gBAAAP,EAAC,OAAI,EAAA,WAAU,2BACZ,UAAA2iC,EAAU,IAAI,CAACI,MACd,gBAAA/iC;AAAA,MAACgjC;AAAA,MAAA;AAAA,QAEC,KAAAD;AAAA,QACA,aAAAH;AAAA,QACA,UAAU,MAAM;AACd,cAAI,CAAChrB;AACH;AAGI,gBAAAqrB,IAAkB,UAAUF,EAAI,cAAcA,EAAI,IAAI,UAAUA,EAAI,IAAI;AAC9E,UAAAnrB,EAAO,SAASqrB,IAAkB;AAAA,IAAOrrB,EAAO,UAAU;AAAA,QAAA;AAAA,MAC5D;AAAA,MAVKmrB,EAAI;AAAA,IAAA,CAYZ,EACH,CAAA,CACD,EACA,aACL,CAAA;AAAA,EAAA,EAAA,CACF,EACF,CAAA;AAEJ,GAEMC,KAAuG,CAAC;AAAA,EAC5G,KAAAD;AAAA,EACA,UAAAG;AAAA,EACA,aAAAN;AACF,MAAM;AACE,QAAAO,IAAYzhC,EAAQ,MACnBkhC,IAIE,CAACA,EAAY,SAAS,SAASG,EAAI,IAAI,GAAG,KAAK,CAACH,EAAY,SAAS,SAASG,EAAI,IAAI,GAAG,IAHvF,IAIR,CAACA,EAAI,MAAMH,CAAW,CAAC;AAGxB,SAAA,gBAAAh7B,EAAC,OAAmB,EAAA,WAAU,iCAC5B,UAAA;AAAA,IAAA,gBAAA5H,EAAC,SAAI,KAAI,sBAAqB,KAAKohC,IAAgB,QAAQ,IAAI;AAAA,sBAC9D/1B,EAAW,MAAX,EAAgB,QAAM,IAAE,YAAI,MAAK;AAAA,IACjC,gBAAArL,EAAAqL,EAAW,MAAX,EAAgB,MAAK,aAAY,OAAO,EAAE,UAAU,IAAI,WAAW,IAAI,GACrE,YAAI,SACP;AAAA,IACA,gBAAAzD,EAAC,OAAI,EAAA,WAAU,0CACb,UAAA;AAAA,MAAC,gBAAA5H,EAAAwW,GAAA,EAAQ,OAAM,kBAAiB,WAAU,cACxC,UAAC,gBAAAxW,EAAAqN,GAAA,EAAO,MAAK,QAAO,MAAK,SAAQ,MAAM,gBAAArN,EAAC8+B,MAAa,GAAI,UAAU,CAACqE,GAAW,SAASD,GAAU,EACpG,CAAA;AAAA,MACC,gBAAAljC,EAAAwW,GAAA,EAAQ,OAAM,uBAAsB,WAAU,cAC7C,UAAA,gBAAAxW;AAAA,QAACqN;AAAA,QAAA;AAAA,UACC,MAAK;AAAA,UACL,MAAK;AAAA,UACL,wBAAOowB,IAAe,EAAA;AAAA,UACtB,MAAMsF,EAAI;AAAA,UACV,QAAO;AAAA,UACP,UAAU,CAACA,EAAI;AAAA,QAAA;AAAA,MAAA,EAEnB,CAAA;AAAA,IAAA,EACF,CAAA;AAAA,EAAA,EAAA,GApBQA,EAAI,IAqBd;AAEJ,GChIaK,KAA2B,CAACtxB,MAA+B;AAChE,QAAA+e,IAAO/e,EAAa,OAAO;AACjC,SAAOuxB,GAAmBxS,CAAI;AAChC,GAEMwS,KAAqB,CAACC,MAC1Bl6B,EAAMk6B,CAAG,EACN,KAAK,UAAU,MAAM,QAAQ,EAC7B,KAAK,QAAQ,MAAM,SAAS,EAC5B,KAAK,UAAU,MAAM,QAAQ,EAC7B,KAAK,QAAQ,MAAM,MAAM,EACzB,KAAK,OAAO,MAAM,KAAK,EACvB,KAAK,EAAE,QAAQj6B,EAAE,OAAS,EAAA,GAAG,CAACkmB,MAKtB,IAJa,OAAO,QAAQA,CAAG,EACnC,IAAI,CAAC,CAAC9uB,GAAKsB,CAAK,MAAM,CAACtB,GAAK4iC,GAAmBthC,CAAK,CAAC,EAAE,KAAK,GAAG,CAAC,EAChE,KAAK,GAAG,CAEW,GACvB,EACA,KAAK,EAAE,OAAOsH,EAAE,YAAY,CAACk6B,MAAQ,GAAGF,GAAmBE,CAAG,CAAC,IAAI,EACnE,KAAK,EAAE,UAAUl6B,EAAE,OAAO,KAAK,CAACxF,MAAM;AACjC,MAAA;AACK,WAAA,KAAK,UAAUA,CAAC;AAAA,EAAA,QACjB;AACC,WAAA;AAAA,EAAA;AAEX,CAAC,EACA,WAAW,GCGHwR,KAAoC,CAAC;AAAA,EAChD,UAAA/O,IAAW;AAAA,EACX,cAAAk9B;AAAA,EACA,UAAAtrB,IAAW;AAAA,EACX,cAAA7N;AAAA,EACA,OAAAtI;AAAA,EACA,UAAAyP;AAAA,EACA,OAAAyB;AAAA,EACA,eAAAwwB;AAAA,EACA,OAAAr1B;AAAA,EACA,WAAAuF;AAAA,EACA,eAAA5M;AAAA,EACA,WAAA47B,IAAYztB;AACd,MAAM;AACJ,QAAMS,IAAS+tB,GAAU,GACnBphB,IAAa/c,EAAO,EAAK,GACzB,EAAE,OAAA8R,EAAA,IAAUC,GAAM,SAAS,GAC3B,CAACqsB,GAAYC,CAAa,IAAI/jC,EAAiB,GAC/C,CAACgkC,GAAaC,CAAc,IAAIjkC,EAA8C,GAE9E0iB,IAAcC,GAAqB,CAAC3Y,MAAgB;AACxD,IAAA2H,IAAW3H,CAAG;AAAA,KACb,GAAG,GAEA,CAAC+N,GAAQW,CAAS,IAAI1Y,EAAuC,GAC7D,CAAC2Y,GAAYC,CAAa,IAAI5Y,EAAuC,GACrE6Y,IAAeC,GAAqB,MAAMf,GAAQ,UAAU,KAAK,EAAE,UAAU,IAAM,GACnFgB,IAAmBD,GAAqB,MAAMH,GAAY,UAAU,KAAK,EAAE,UAAU,IAAM;AAEjG,SAAAhT,EAAU,OACD,OAAA,iBAAiB,UAAUkT,CAAY,GACvC,MAAM,OAAO,oBAAoB,UAAUA,CAAY,IAC7D,CAACA,GAAcd,CAAM,CAAC,GAEzBpS,EAAU,OACD,OAAA,iBAAiB,UAAUoT,CAAgB,GAC3C,MAAM,OAAO,oBAAoB,UAAUA,CAAgB,IACjE,CAACA,GAAkBJ,CAAU,CAAC,GAEjChT,EAAU,MAAM;AACd,IAAKmQ,MAEEA,EAAA,UAAU,WAAW,mBAAmB,mBAAmB;AAAA,MAChE,QAAQA,EAAO,UAAU,WAAW,aAAa;AAAA,MACjD,QAAQA,EAAO,UAAU,WAAW,WAAW;AAAA,MAC/C,kBAAkBA,EAAO,UAAU,WAAW,qBAAqB;AAAA,MACnE,8BAA8B;AAAA,MAC9B,sBAAsB;AAAA,MACtB,SAAS;AAAA,MACT,SAAS;AAAA,MACT,KAAK,CAAC,QAAQ;AAAA,IAAA,CACf,GAEMA,EAAA,UAAU,WAAW,mBAAmB,sBAAsB;AAAA,MACnE,oBAAoB;AAAA,MACpB,sBAAsB;AAAA,MACtB,yBAAyB;AAAA,MACzB,aAAa;AAAA,IAAA,CACd,GAEMA,EAAA,UAAU,WAAW,mBAAmB;AAAA,MAC7CT,GAAkB,IAAI,CAAC6tB,OAAS;AAAA,QAC9B,SAAS,mBAAmBA,EAAI,IAAI,OAAOA,EAAI,OAAO;AAAA,QACtD,UAAUA,EAAI;AAAA,MAAA,EACd;AAAA,IACJ,GAEO,OAAA,QAAQ5tB,GAAoB,OAAO,EAAE,QAAQ,CAAC,CAAC4uB,GAAKtN,CAAK,MAAM;AACpE,MAAA9gB,EAAO,UAAU,WAAW,mBAAmB,YAAY8gB,GAAO,MAAMsN,CAAG,EAAE;AAAA,IAAA,CAC9E,GAEDN,IAAgB9tB,CAAM;AAAA,EAAA,GACrB,CAACA,GAAQgtB,CAAS,CAAC,GAEtBn9B,EAAU,MAAM;AACd,IAAI8c,EAAW,WAAWvgB,MAAU,UAAaA,MAAU4hC,KACzDC,EAAc7hC,CAAK;AAAA,EACrB,GACC,CAACA,CAAK,CAAC,GAEVyD,EAAU,MAAM;AACA,IAAAo+B,EAAA7hC,MAAU,SAAYsI,IAAetI,CAAK,GACxDugB,EAAW,UAAU;AAAA,EACvB,GAAG,EAAE,GAEL9c,EAAU,MAAM;AACd,QAAI,CAACmQ,EAAQ;AAEb,QAAIhT,IAAO;AACX,IAAImD,SACKnD,IAAAygC,GAAyBhvB,GAAmBT,CAAS,CAAC,IAGxDgC,EAAA,UAAU,WAAW,mBAAmB;AAAA,MAC7C;AAAA,mBACahT,CAAI;AAAA;AAAA;AAAA;AAAA;AAAA,MAKjB;AAAA,IACF;AAAA,EAAA,GACC,CAACgT,GAAQhC,CAAS,CAAC,GAEtBnO,EAAU,MAAM;AACd,QAAI,CAACmQ;AACH;AAGF,UAAMyB,IAAQzB,EAAO,OAAO,UAAA,IAAc,CAAC;AAC3C,IAAKyB,KAILzB,EAAO,OAAO,gBAAgByB,GAAO,WAAW,CAAA,CAAE;AAAA,EAAA,GACjD,CAACusB,GAAYhuB,CAAM,CAAC,GAEvBnQ,EAAU,MAAM;AACd,IAAKq+B,MAILA,EAAY,MAAM,GAClBC,EAAe,MAAS;AAAA,EAAA,GACvB,CAACH,CAAU,CAAC,GAEfn+B,EAAU,MAAM;AACV,QAAA;AACE,UAAA,CAAC4I,KAAS,CAACuH;AACb;AAGF,YAAMquB,IAAU,qCAAqC,KAAK51B,EAAM,KAAK,UAAU,EAAE;AACjF,UAAI,CAAC41B,KAAWA,EAAQ,WAAW;AACjC;AAGI,YAAAtC,IAAO,YAAYsC,IAAU,CAAC,KAAK,IAAI,QAAQ,MAAM,EAAE,CAAC,GACxDC,IAAeD,IAAU,CAAC,KAAK;AACjC,UAAA,CAACtC,KAAQ,CAACuC;AACZ;AAGF,YAAM7sB,IAAQzB,EAAO,OAAO,UAAA,EAAY,CAAC;AACzC,UAAI,CAACyB;AACH;AAGI,YAAA8sB,IAAQ,IAAIvuB,EAAO;AAAA,QACvB+rB;AAAA,QACAtqB,EAAM,gCAAgCsqB,CAAI;AAAA,QAC1CA;AAAA,QACAtqB,EAAM,+BAA+BsqB,CAAI;AAAA,MAC3C;AAEO,MAAA/rB,EAAA,OAAO,gBAAgByB,GAAO,WAAW;AAAA,QAC9C;AAAA,UACE,UAAU+sB,GAAe;AAAA,UACzB,SAASF;AAAA,UACT,iBAAiBC,EAAM;AAAA,UACvB,eAAeA,EAAM;AAAA,UACrB,aAAaA,EAAM;AAAA,UACnB,WAAWA,EAAM;AAAA,QAAA;AAAA,MACnB,CACD;AAED,YAAMtsB,IAASjC,EAAO,OAAO,WAAA,EAAa,CAAC;AAC3C,UAAI,CAACiC;AACH;AAGIisB,YAAAA,KAAcjsB,EAAO,4BAA4B;AAAA,QACrD;AAAA,UACE,OAAAssB;AAAA,UACA,SAAS;AAAA,YACP,cAAc,EAAE,OAAOD,EAAa;AAAA,YACpC,aAAa;AAAA,YACb,WAAW;AAAA,UAAA;AAAA,QACb;AAAA,MACF,CACD;AAED,MAAAH,EAAe,CAAC9jB,QACdA,IAAM,QAAQ,GACP6jB,GACR;AAAA,IAAA,QACK;AAAA,IAAA;AAAA,EAER,GACC,CAACz1B,GAAOwJ,CAAM,CAAC,GAGhB,gBAAA5X;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,WAAU;AAAA,MACV,cAAYqX,EAAM;AAAA,MAClB,OACE;AAAA,QACE,QAAU;AAAA,QACV,gBAAgBA,EAAM;AAAA,QACtB,+BAA+BA,EAAM;AAAA,QACrC,kBAAkBA,EAAM;AAAA,QACxB,iBAAiBA,EAAM;AAAA,MACzB;AAAA,MAGF,4BAACwB,IAAW,EAAA,WAAU,yBAAwB,WAAU,cAAa,YAAW,8BAC9E,UAAA;AAAA,QAAA,gBAAA7Y,EAAC00B,IAAM,EAAA,aAAa,IAAI,SAAS,IAC9B,UACC3tB,IAAA,gBAAA/G;AAAA,UAACmZ;AAAA,UAAA;AAAA,YACC,SAAS,gBAAAnZ,EAACkW,IAAK,EAAA,MAAK,QAAQ,CAAA;AAAA,YAC5B,UAAAgC;AAAA,YACA,UAAUnR;AAAA,YACV,UAAU48B;AAAA,YACV,SAAS,CAAC/rB,MAAWa,EAAcb,CAAM;AAAA,YACzC,OAAOP,EAAM,SAAS,SAAS,YAAY;AAAA,YAC3C,QAAO;AAAA,YACP,SAAS;AAAA,cACP,GAAGU;AAAA,cACH,UAAU;AAAA,YAAA;AAAA,UACZ;AAAA,QAAA,IAGF,gBAAA/X;AAAA,UAAC2X;AAAA,UAAA;AAAA,YACC,SAAS,gBAAA3X,EAACkW,IAAK,EAAA,MAAK,QAAQ,CAAA;AAAA,YAC5B,UAAAgC;AAAA,YACA,OAAOyrB;AAAA,YACP,SAAS,CAAC/rB,MAAWW,EAAUX,CAAM;AAAA,YACrC,UAAU,CAAC7V,MAAU;AACnB,cAAA6hC,EAAc7hC,KAAS,EAAE,GACzBwgB,EAAYxgB,KAAS,EAAE;AAAA,YACzB;AAAA,YACA,OAAOsV,EAAM,SAAS,SAAS,YAAY;AAAA,YAC3C,QAAO;AAAA,YACP,SAAS;AAAA,cACP,GAAGU;AAAA,cACH,UAAUzR;AAAA,YAAA;AAAA,UACZ;AAAA,QAAA,GAGN;AAAA,QACC,CAACk9B,KAEE,gBAAA57B,EAAAE,IAAA,EAAA,UAAA;AAAA,UAAA,gBAAA9H,EAAC20B,IAAkB,EAAA;AAAA,UAClB,gBAAA30B,EAAA00B,IAAA,EAAM,SAAS,IACb,WAAC8O,KACA,gBAAAxjC,EAAC0iC,IAAiB,EAAA,WAAWxtB,IAAmB,OAAAjC,GAAc,QAAA2E,GAAgB,aAAa7V,GAAO,EAEtG,CAAA;AAAA,QAAA,EACF,CAAA;AAAA,MAAA,EAEJ,CAAA;AAAA,IAAA;AAAA,EACF;AAEJ,GAEMgW,KAA6D;AAAA,EACjE,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,SAAS,EAAE,SAAS,GAAM;AAAA,EAC1B,qBAAqB;AAAA,EACrB,WAAW;AAAA,IACT,oBAAoB;AAAA,IACpB,uBAAuB;AAAA,IACvB,yBAAyB;AAAA,IACzB,sBAAsB;AAAA,EAAA;AAE1B,GC1RaqsB,KAAsD,CAAC;AAAA,EAClE,OAAO,EAAE,MAAA1iB,IAAO,SAAS,OAAArK,IAAQ,IAAI,GAAGgtB,EAAU,IAAI,CAAC;AAAA,EACvD,WAAAC;AAAA,EACA,UAAA7kC;AACF,MAAM;AACE,QAAA8kC,IAAY7iC,EAAQ,MAAM;AAC9B,YAAQggB,GAAM;AAAA,MACZ,KAAK;AACH,eAAO8iB,GAAS;AAAA,MAClB,KAAK;AAAA,MACL;AACE,eAAOA,GAAS;AAAA,IAAA;AAAA,EACpB,GACC,CAAC9iB,CAAI,CAAC;AAET,SACG,gBAAA9Z,EAAA68B,IAAA,EAAe,WAAAH,GAAsB,OAAO,EAAE,GAAGD,GAAW,WAAAE,GAAW,OAAO,EAAE,GAAGltB,GAAO,MAAAqK,OACzF,UAAA;AAAA,IAAA,gBAAA1hB,EAAC0kC,MAAmB,MAAAhjB,GAAY;AAAA,IAC/BjiB;AAAA,EAAA,GACH;AAEJ,GAEMilC,KAA2D,CAAC,EAAE,MAAAhjB,QAAW;AAC7E,QAAM,EAAE,OAAArK,EAAA,IAAUC,GAAM,SAAS,GAE3BqtB,IAAgBjjC;AAAA,IACpB,OAAO;AAAA,MACL,sBAAsB2V,EAAM;AAAA,MAC5B,4BAA4BqK,MAAS,UAAU,YAAY;AAAA,MAC3D,2BAA2BA,MAAS,UAAU,YAAY;AAAA,MAC1D,uBAAuBrK,EAAM;AAAA,MAC7B,0BAA0BA,EAAM;AAAA,MAChC,+BAA+BqK,MAAS,UAAU,YAAY;AAAA,MAC9D,gCAAgCrK,EAAM;AAAA,MACtC,8BAA8BA,EAAM;AAAA,MACpC,oCAAoCA,EAAM;AAAA,MAC1C,kCAAkCA,EAAM;AAAA,MACxC,uBAAuBA,EAAM;AAAA,MAC7B,0BAA0BA,EAAM;AAAA,MAChC,8BAA8BA,EAAM;AAAA,MACpC,qBAAqBA,EAAM;AAAA,MAC3B,wBAAwBA,EAAM;AAAA,MAC9B,4BAA4BA,EAAM;AAAA,MAClC,uBAAuBA,EAAM;AAAA,MAC7B,0BAA0BA,EAAM;AAAA,MAChC,8BAA8BA,EAAM;AAAA,MACpC,4BAA4BA,EAAM;AAAA,MAClC,oBAAoBA,EAAM;AAAA,MAC1B,uBAAuBA,EAAM;AAAA,MAC7B,2BAA2BA,EAAM;AAAA,MACjC,yBAAyBA,EAAM;AAAA,MAC/B,yBAAyBA,EAAM;AAAA,MAC/B,uBAAuBA,EAAM;AAAA,MAC7B,2BAA2BA,EAAM;AAAA,MACjC,4BAA4BA,EAAM;AAAA,MAClC,qCAAqCA,EAAM;AAAA,MAC3C,6BAA6BA,EAAM;AAAA,MACnC,6BAA6BA,EAAM;AAAA,MACnC,8BAA8BA,EAAM;AAAA,MACpC,oBAAoBA,EAAM;AAAA,MAC1B,gCAAgCA,EAAM;AAAA,MACtC,yBAAyBA,EAAM;AAAA,MAC/B,6BAA6BA,EAAM;AAAA,MACnC,8BAA8BA,EAAM;AAAA,MACpC,yBAAyBA,EAAM;AAAA,MAC/B,uBAAuBA,EAAM;AAAA,MAC7B,0BAA0BA,EAAM;AAAA,MAChC,qBAAqBA,EAAM;AAAA,MAC3B,qBAAqBA,EAAM;AAAA,MAC3B,uBAAuB,GAAGA,EAAM,YAAY;AAAA,MAE5C,+BAA+BqK,MAAS,UAAU,YAAY;AAAA,MAC9D,qCAAqCA,MAAS,UAAU,YAAY;AAAA,IAAA;AAAA,IAEtE,CAACrK,GAAOqK,CAAI;AAAA,EACd,GAEMkjB,IAAW,OAAO,QAAQD,CAAa,EAC1C,IAAI,CAAC,CAAClkC,GAAKsB,CAAK,MAAM,KAAKtB,CAAG,KAAKsB,CAAK,GAAG,EAC3C,KAAK;AAAA,CAAI;AAEZ,SAAQ,gBAAA/B,EAAA,SAAA,EAAM,yBAAyB,EAAE,QAAQ;AAAA,EAAY4kC,CAAQ;AAAA,GAAS,EAAA,CAAA;AAChF;","x_google_ignoreList":[1,34,35]}