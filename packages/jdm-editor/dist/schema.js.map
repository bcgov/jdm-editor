{"version":3,"file":"schema.js","sources":["../src/helpers/schema.ts"],"sourcesContent":["import { z } from 'zod';\n\nexport const DECISION_GRAPH_CONTENT_TYPE = 'application/vnd.gorules.decision';\nconst id = z.string().default(crypto.randomUUID);\n\nexport enum NodeKind {\n  Input = 'inputNode',\n  Output = 'outputNode',\n  DecisionTable = 'decisionTableNode',\n  Function = 'functionNode',\n  Expression = 'expressionNode',\n  Switch = 'switchNode',\n  Decision = 'decisionNode',\n}\n\nexport const CustomKind = 'customNode';\n\nconst nodeCommon = z.object({\n  id,\n  name: z.string(),\n  position: z.object({ x: z.number(), y: z.number() }).default({ x: 0, y: 0 }),\n});\n\nexport const inputNodeSchema = z\n  .object({\n    type: z.literal(NodeKind.Input),\n    content: z\n      .object({\n        schema: z\n          .string()\n          .nullish()\n          .transform((val) => val ?? ''),\n      })\n      .default({\n        schema: '',\n      }),\n  })\n  .merge(nodeCommon);\n\nexport const outputNodeSchema = z\n  .object({\n    type: z.literal(NodeKind.Output),\n    content: z\n      .object({\n        schema: z\n          .string()\n          .nullish()\n          .transform((val) => val ?? ''),\n      })\n      .default({\n        schema: '',\n      }),\n  })\n  .merge(nodeCommon);\n\nexport const decisionTableSchema = z\n  .object({\n    type: z.literal(NodeKind.DecisionTable),\n    content: z.object({\n      hitPolicy: z\n        .enum(['first', 'collect'])\n        .nullish()\n        .transform((val) => val ?? 'first'),\n      rules: z\n        .array(\n          z.record(\n            z.string(),\n            z\n              .string()\n              .nullish()\n              .transform((val) => val ?? ''),\n          ),\n        )\n        .default([]),\n      inputs: z.array(\n        z.object({\n          id,\n          name: z.string().nullish(),\n          field: z.string().nullish(),\n          defaultValue: z.string().nullish(),\n        }),\n      ),\n      outputs: z.array(\n        z.object({\n          id,\n          name: z.string(),\n          field: z.string(),\n          defaultValue: z.string().nullish(),\n        }),\n      ),\n      passThrough: z\n        .boolean()\n        .nullish()\n        .transform((val) => val ?? false),\n      inputField: z\n        .string()\n        .nullish()\n        .default(null)\n        .transform((val) => (val && val.trim().length > 0 ? val : null)),\n      outputPath: z\n        .string()\n        .nullish()\n        .default(null)\n        .transform((val) => (val && val.trim().length > 0 ? val : null)),\n      executionMode: z\n        .enum(['single', 'loop'])\n        .nullish()\n        .transform((val) => val ?? 'single'),\n    }),\n  })\n  .merge(nodeCommon);\n\nexport const functionNodeSchema = z\n  .object({\n    type: z.literal(NodeKind.Function),\n    content: z\n      .string()\n      .or(\n        z.object({\n          source: z.string().default(''),\n        }),\n      )\n      .nullish(),\n  })\n  .merge(nodeCommon);\n\nexport const expressionNodeSchema = z\n  .object({\n    type: z.literal(NodeKind.Expression),\n    content: z.object({\n      expressions: z.array(\n        z.object({\n          id,\n          key: z.string().default(''),\n          value: z.string().default(''),\n        }),\n      ),\n      passThrough: z\n        .boolean()\n        .nullish()\n        .transform((val) => val ?? false),\n      inputField: z\n        .string()\n        .nullish()\n        .default(null)\n        .transform((val) => (val && val.trim().length > 0 ? val : null)),\n      outputPath: z\n        .string()\n        .nullish()\n        .default(null)\n        .transform((val) => (val && val.trim().length > 0 ? val : null)),\n      executionMode: z\n        .enum(['single', 'loop'])\n        .nullish()\n        .transform((val) => val ?? 'single'),\n    }),\n  })\n  .merge(nodeCommon);\n\nexport const decisionNodeSchema = z\n  .object({\n    type: z.literal(NodeKind.Decision),\n    content: z.object({\n      key: z.string(),\n      passThrough: z\n        .boolean()\n        .nullish()\n        .transform((val) => val ?? false),\n      inputField: z\n        .string()\n        .nullish()\n        .default(null)\n        .transform((val) => (val && val.trim().length > 0 ? val : null)),\n      outputPath: z\n        .string()\n        .nullish()\n        .default(null)\n        .transform((val) => (val && val.trim().length > 0 ? val : null)),\n      executionMode: z\n        .enum(['single', 'loop'])\n        .nullish()\n        .transform((val) => val ?? 'single'),\n    }),\n  })\n  .merge(nodeCommon);\n\nexport const switchNodeSchema = z\n  .object({\n    type: z.literal(NodeKind.Switch),\n    content: z.object({\n      hitPolicy: z\n        .enum(['first', 'collect'])\n        .nullish()\n        .transform((val) => val ?? 'first'),\n      statements: z.array(\n        z.object({\n          id,\n          condition: z\n            .string()\n            .nullish()\n            .transform((val) => val ?? ''),\n          isDefault: z\n            .boolean()\n            .nullish()\n            .transform((val) => val ?? false),\n        }),\n      ),\n    }),\n  })\n  .merge(nodeCommon);\n\nexport const customNodeSchema = z\n  .object({\n    type: z.literal(CustomKind),\n    content: z.object({\n      kind: z.string(),\n      config: z.any(),\n    }),\n  })\n  .merge(nodeCommon);\n\nexport const anyNodeSchema = z\n  .object({\n    type: z.string().refine((val) => !(Object.values(NodeKind) as string[]).includes(val), {\n      message: 'Invalid type',\n    }),\n    content: z.any().nullish(),\n  })\n  .merge(nodeCommon);\n\nexport const nodeSchema = z\n  .discriminatedUnion('type', [\n    decisionNodeSchema,\n    expressionNodeSchema,\n    functionNodeSchema,\n    decisionTableSchema,\n    switchNodeSchema,\n    customNodeSchema,\n    inputNodeSchema,\n    outputNodeSchema,\n  ])\n  .or(anyNodeSchema);\n\nexport const edgeSchema = z.object({\n  id: z.string(),\n  sourceId: z.string(),\n  targetId: z.string(),\n  sourceHandle: z.string().nullish(),\n  type: z.enum(['edge']),\n});\n\nexport const validationSchema = z.object({\n  inputSchema: z.any().nullish().default(null),\n  outputSchema: z.any().nullish().default(null),\n});\n\nexport const decisionModelSchema = z.object({\n  nodes: z.array(nodeSchema).default([]),\n  edges: z.array(edgeSchema).default([]),\n});\n"],"names":["DECISION_GRAPH_CONTENT_TYPE","id","z","NodeKind","CustomKind","nodeCommon","inputNodeSchema","val","outputNodeSchema","decisionTableSchema","functionNodeSchema","expressionNodeSchema","decisionNodeSchema","switchNodeSchema","customNodeSchema","anyNodeSchema","nodeSchema","edgeSchema","validationSchema","decisionModelSchema"],"mappings":"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"}